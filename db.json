{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar_default.png","path":"img/avatar_default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar_pom.png","path":"img/avatar_pom.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":0},{"_id":"source/img/banner.png","path":"img/banner.png","modified":0,"renderable":0},{"_id":"source/img/default.png","path":"img/default.png","modified":0,"renderable":0},{"_id":"source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":0},{"_id":"source/img/hexo-deployed.png","path":"img/hexo-deployed.png","modified":0,"renderable":0},{"_id":"source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":0},{"_id":"source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":0},{"_id":"source/img/0712/demo.go.details.png","path":"img/0712/demo.go.details.png","modified":0,"renderable":0},{"_id":"source/img/0712/demo.go.png","path":"img/0712/demo.go.png","modified":0,"renderable":0},{"_id":"source/img/0712/go-client.png","path":"img/0712/go-client.png","modified":0,"renderable":0},{"_id":"source/img/docker-mysql/docker-mysql-images.png","path":"img/docker-mysql/docker-mysql-images.png","modified":0,"renderable":0},{"_id":"source/img/docker-mysql/docker-ps-mysql.png","path":"img/docker-mysql/docker-ps-mysql.png","modified":0,"renderable":0},{"_id":"source/img/docker-mysql/docker-pull-mysql.png","path":"img/docker-mysql/docker-pull-mysql.png","modified":0,"renderable":0},{"_id":"source/img/docker-nacos/hello_nacos.png","path":"img/docker-nacos/hello_nacos.png","modified":0,"renderable":0},{"_id":"source/img/hexo-bt-tcCloud/add-blog-su.png","path":"img/hexo-bt-tcCloud/add-blog-su.png","modified":0,"renderable":0},{"_id":"source/img/hexo-bt-tcCloud/change-nginx-server.png","path":"img/hexo-bt-tcCloud/change-nginx-server.png","modified":0,"renderable":0},{"_id":"source/img/hexo-bt-tcCloud/init-hexo-git.png","path":"img/hexo-bt-tcCloud/init-hexo-git.png","modified":0,"renderable":0},{"_id":"source/img/http-note/udp-header.png","path":"img/http-note/udp-header.png","modified":0,"renderable":0},{"_id":"source/img/nacos-coredns-plugin/nacos-coredns-test.png","path":"img/nacos-coredns-plugin/nacos-coredns-test.png","modified":0,"renderable":0},{"_id":"source/img/nacos_grpc_service/nacos_grpc_service_detail.png","path":"img/nacos_grpc_service/nacos_grpc_service_detail.png","modified":0,"renderable":0},{"_id":"source/img/nacos_grpc_service/nacos_grpc_service_list.png","path":"img/nacos_grpc_service/nacos_grpc_service_list.png","modified":0,"renderable":0},{"_id":"source/img/ospp-0704/allDomNames.png","path":"img/ospp-0704/allDomNames.png","modified":0,"renderable":0},{"_id":"source/img/ospp-0704/nacos1.x_ApiController.png","path":"img/ospp-0704/nacos1.x_ApiController.png","modified":0,"renderable":0},{"_id":"source/img/ospp-0704/nacos2.1.0_controller.png","path":"img/ospp-0704/nacos2.1.0_controller.png","modified":0,"renderable":0},{"_id":"source/img/ospp-0704/nacos_coredns_plugin_api.png","path":"img/ospp-0704/nacos_coredns_plugin_api.png","modified":0,"renderable":0},{"_id":"source/img/ospp-0704/srvIPXT.png","path":"img/ospp-0704/srvIPXT.png","modified":0,"renderable":0},{"_id":"source/img/ospp_record/cache_dir.png","path":"img/ospp_record/cache_dir.png","modified":0,"renderable":0},{"_id":"source/img/ospp_record/cache_sdk_dir.png","path":"img/ospp_record/cache_sdk_dir.png","modified":0,"renderable":0},{"_id":"source/img/ospp_record/domain_new.png","path":"img/ospp_record/domain_new.png","modified":0,"renderable":0},{"_id":"source/img/ospp_record/domian_old.png","path":"img/ospp_record/domian_old.png","modified":0,"renderable":0},{"_id":"source/img/ospp_record/getService.png","path":"img/ospp_record/getService.png","modified":0,"renderable":0},{"_id":"source/img/ospp_record/go_func.png","path":"img/ospp_record/go_func.png","modified":0,"renderable":0},{"_id":"source/img/ospp_record/grpc.png","path":"img/ospp_record/grpc.png","modified":0,"renderable":0},{"_id":"source/img/ospp_record/updateAllDomNames.png","path":"img/ospp_record/updateAllDomNames.png","modified":0,"renderable":0},{"_id":"source/img/ospp_record/updateDomain.png","path":"img/ospp_record/updateDomain.png","modified":0,"renderable":0},{"_id":"source/img/plugin-details/NacosGrpcClient.drawio","path":"img/plugin-details/NacosGrpcClient.drawio","modified":0,"renderable":0},{"_id":"source/img/plugin-details/NacosGrpcClient.png","path":"img/plugin-details/NacosGrpcClient.png","modified":0,"renderable":0},{"_id":"source/img/plugin-details/getAllService.png","path":"img/plugin-details/getAllService.png","modified":0,"renderable":0},{"_id":"source/img/plugin-details/getService.png","path":"img/plugin-details/getService.png","modified":0,"renderable":0},{"_id":"source/img/plugin-details/nacos-coredns-plugin.drawio","path":"img/plugin-details/nacos-coredns-plugin.drawio","modified":0,"renderable":0},{"_id":"source/img/plugin-details/nacos-coredns-plugin.png","path":"img/plugin-details/nacos-coredns-plugin.png","modified":0,"renderable":0},{"_id":"source/img/coredns-test-report/test1.png","path":"img/coredns-test-report/test1.png","modified":0,"renderable":0},{"_id":"source/img/coredns-test-report/test2.png","path":"img/coredns-test-report/test2.png","modified":0,"renderable":0},{"_id":"source/img/coredns-test-report/test3.png","path":"img/coredns-test-report/test3.png","modified":0,"renderable":0},{"_id":"source/img/coredns-test-report/test4.png","path":"img/coredns-test-report/test4.png","modified":0,"renderable":0},{"_id":"source/img/coredns-test-report/test5.png","path":"img/coredns-test-report/test5.png","modified":0,"renderable":0},{"_id":"source/img/coredns-test-report/test6.png","path":"img/coredns-test-report/test6.png","modified":0,"renderable":0},{"_id":"source/img/coredns-test-report/test7.png","path":"img/coredns-test-report/test7.png","modified":0,"renderable":0},{"_id":"source/img/project-report/NacosGrpcClient.drawio.png","path":"img/project-report/NacosGrpcClient.drawio.png","modified":0,"renderable":0},{"_id":"source/img/project-report/grpc-design.png","path":"img/project-report/grpc-design.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/docker-mysql.md","hash":"9326163f2de23a16821a05da193f9ed2fc1d5d96","modified":1660916134633},{"_id":"source/_posts/docker-nacos.md","hash":"c0462243abdc2580c135f1e1f35d889d2232656f","modified":1660916134633},{"_id":"source/_posts/git-local.md","hash":"de49586f8acd288dd0bb411da63086681c6c26e3","modified":1660916134633},{"_id":"source/_posts/go-note.md","hash":"cd370dfec87f4c8aa315d09b4516a422bcb071bf","modified":1660916134633},{"_id":"source/_posts/hello-world.md","hash":"ebb8886a9888b596beb86751d1427dbb7ba4abc0","modified":1660916134633},{"_id":"source/_posts/hexo-bt-tcCloud.md","hash":"682b0037d949e56f268dcd787303c66f0c604209","modified":1660916134633},{"_id":"source/_posts/http-note.md","hash":"dddd7669f64d58d247dd533b647de01b6e037807","modified":1662386515189},{"_id":"source/_posts/linux-clash.md","hash":"13fed1b5db77be9cf3340315fdfc3352a174a5f3","modified":1660916134633},{"_id":"source/_posts/nacos-coredns-plugin.md","hash":"684fc142552e1206f39218ecb3a7151fa9470c55","modified":1660916134633},{"_id":"source/_posts/nacos_grpc_service.md","hash":"96bdbfee7ff4841f248fdb904c9b15bc22e46e4a","modified":1660916134633},{"_id":"source/_posts/ospp-0704.md","hash":"4dd6009d7af5fa5e3d04d9ffedaff1c991196c3d","modified":1660916134633},{"_id":"source/_posts/ospp_record.md","hash":"86041e76aa91de6c6b9ef773dd6c4ac6a108a34f","modified":1660916134633},{"_id":"source/_posts/plugin-details.md","hash":"288ac7ca8c31205277d62fe1fb8804953e063ce2","modified":1660916134633},{"_id":"source/_posts/vmware-ubuntu-go.md","hash":"69fe00ff1cb80808ce3d14e75fbfb13b15b09a92","modified":1660916134633},{"_id":"source/about/index.md","hash":"b56646a96166e4ea1b65f1b4eaad7d1bb18950db","modified":1660916134633},{"_id":"source/categories/index.md","hash":"34bbb306b2f2718375d957ed5d92ee1feff2f9e0","modified":1660916134633},{"_id":"source/img/avatar.png","hash":"f4f797904e22977384b09b81384594ae96d8248a","modified":1660916134637},{"_id":"source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1660916134645},{"_id":"source/img/hexo-deployed.png","hash":"e7ccee9a5d879b44fe5dd0082b6b0370976f9b84","modified":1660916134645},{"_id":"source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1660916134645},{"_id":"source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1660916134653},{"_id":"source/js/duration.js","hash":"9e9738e24be66f1ea168e50575e43fed4790bd60","modified":1660916134653},{"_id":"source/img/0712/demo.go.details.png","hash":"ceb386bc10affe8ecc2d93d6b2cfc469fa939f54","modified":1660916134633},{"_id":"source/img/0712/demo.go.png","hash":"1c6c54234c73cee9f8681471c6e5b4e31ac02d8e","modified":1660916134637},{"_id":"source/img/docker-mysql/docker-mysql-images.png","hash":"6b23a74f98b993c6bab95e619b6f6a4da7d17e28","modified":1660916134645},{"_id":"source/img/docker-mysql/docker-ps-mysql.png","hash":"e486b6c7a973f1aff3b01a5e6ed37e76edd972f9","modified":1660916134645},{"_id":"source/img/docker-mysql/docker-pull-mysql.png","hash":"ea970b787e30880625f939abb5f7cf38ec9ca9f3","modified":1660916134645},{"_id":"source/img/docker-nacos/hello_nacos.png","hash":"1b34c42eb3fe2cdfec1a45d2f1b6df6e783e0c7f","modified":1660916134645},{"_id":"source/img/hexo-bt-tcCloud/add-blog-su.png","hash":"93df60beac6ce2055258b2916e09d8f045a6027c","modified":1660916134645},{"_id":"source/img/hexo-bt-tcCloud/change-nginx-server.png","hash":"52b57196bba749467f4b22c307921a783e68c476","modified":1660916134645},{"_id":"source/img/hexo-bt-tcCloud/init-hexo-git.png","hash":"9bb0b7dc1f805a066702564d11b93d6a8b975701","modified":1660916134645},{"_id":"source/img/http-note/udp-header.png","hash":"ea5e20a55a6d25b6e89ed418b75b1e582fe592a7","modified":1660916134645},{"_id":"source/img/nacos-coredns-plugin/nacos-coredns-test.png","hash":"c7ca449802c410a0bac9ad72f7a4133cbde9a7ee","modified":1660916134645},{"_id":"source/img/nacos_grpc_service/nacos_grpc_service_detail.png","hash":"0165863244453627544772f7f8740afb8076557c","modified":1660916134645},{"_id":"source/img/nacos_grpc_service/nacos_grpc_service_list.png","hash":"96a87f5dd5e51ab9e768d3d82636b07f2a3d41cf","modified":1660916134645},{"_id":"source/img/ospp-0704/allDomNames.png","hash":"6021ea818f04b278d541d692c506fd5ac84ec306","modified":1660916134645},{"_id":"source/img/ospp-0704/nacos2.1.0_controller.png","hash":"d50513b2d102e923c0c8ba49b2eff3f16b0aa0e1","modified":1660916134645},{"_id":"source/img/ospp-0704/srvIPXT.png","hash":"249f34c6473973778f980f5a56a15d24cc1a37ca","modified":1660916134649},{"_id":"source/img/ospp_record/cache_dir.png","hash":"9f4ff384f290a9365b285b0e7e5380be35bf26b4","modified":1660916134649},{"_id":"source/img/ospp_record/cache_sdk_dir.png","hash":"d64f2df84e19d663619b1068f4c714bb02150233","modified":1660916134649},{"_id":"source/img/ospp_record/domain_new.png","hash":"55321294d9084cb366ad8dc3eac041d600447b36","modified":1660916134649},{"_id":"source/img/ospp_record/domian_old.png","hash":"1ac2337a6d881fb9142ee4e14a64460a37c796bd","modified":1660916134649},{"_id":"source/img/ospp_record/getService.png","hash":"f0945762365974e8485e00ddd37e9033c672c05e","modified":1660916134649},{"_id":"source/img/ospp_record/grpc.png","hash":"bbecbbcab07e80d4495e2463b4c221feeb230a20","modified":1660916134649},{"_id":"source/img/ospp_record/updateAllDomNames.png","hash":"9341ba58be44da0d5bd525a98372b535b7222ead","modified":1660916134649},{"_id":"source/img/ospp_record/updateDomain.png","hash":"38114f2295e2b01a54336f5bc14030b2eb94345f","modified":1660916134649},{"_id":"source/img/plugin-details/NacosGrpcClient.drawio","hash":"f34fe5087c94782a04369ed1ffe2bb9e516a75f5","modified":1660916134653},{"_id":"source/img/plugin-details/NacosGrpcClient.png","hash":"32dc062ca8c45ace541666db0b0a6e048f2d4dd9","modified":1660916134653},{"_id":"source/img/plugin-details/getAllService.png","hash":"7aef94474bbdc9486ac044132ba1bc0ddb7b5837","modified":1660916134653},{"_id":"source/img/plugin-details/getService.png","hash":"a9ede8ae17a86b31683741fe3820a2f7f3ea416f","modified":1660916134653},{"_id":"source/img/plugin-details/nacos-coredns-plugin.drawio","hash":"20c2baacdeebd287fd84bd5e5b53e4c5461d9dc9","modified":1660916134653},{"_id":"source/img/plugin-details/nacos-coredns-plugin.png","hash":"57d0afe01ca9de580951b469ffab472fc5812ecf","modified":1660916134653},{"_id":"source/img/ospp_record/go_func.png","hash":"24a07b075b999997d8f9908e418048fba1c67441","modified":1660916134649},{"_id":"source/img/0712/go-client.png","hash":"b5974e62ba9ea4b1ef27b6495e2c192c1e915e63","modified":1660916134637},{"_id":"source/img/ospp-0704/nacos1.x_ApiController.png","hash":"f837e614ce1ce306688379aac50ef65100a76fa2","modified":1660916134645},{"_id":"source/img/ospp-0704/nacos_coredns_plugin_api.png","hash":"96d21405e9e32d4dfb35a89183cbf77951c32b1c","modified":1660916134649},{"_id":"source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1660916134645},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1660916134661},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1660916134653},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1660916134653},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1660916134653},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1660916134653},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1660916134653},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1660916134653},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1660916134653},{"_id":"themes/fluid/_config.yml","hash":"b3bf44a6fd20d69bc07ab0d11a27f3bfc5436061","modified":1660916134653},{"_id":"themes/fluid/package.json","hash":"0bc354a01c5e6e9de43bf67456dc16c59d400139","modified":1660916134657},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1660916134653},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1660916134653},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1660916134653},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1660916134653},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1660916134653},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1660916134653},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1660916134653},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1660916134653},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1660916134653},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1660916134657},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1660916134657},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1660916134657},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1660916134657},{"_id":"themes/fluid/layout/index.ejs","hash":"b15d13877827e99e0ff783a6b13b13cca90bfe8c","modified":1660916134657},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1660916134657},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1660916134657},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1660916134657},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1660916134657},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1660916134657},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1660916134657},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1660916134653},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1660916134653},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1660916134653},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1660916134653},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1660916134653},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1660916134653},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"a591fedbc5759fb00152304f9ea486dfba3a246a","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"776949aa697dffd54e9b1957d9245028879509a3","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1660916134657},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1660916134657},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1660916134657},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1660916134657},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1660916134657},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1660916134657},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1660916134657},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1660916134657},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1660916134657},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1660916134657},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1660916134657},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1660916134657},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1660916134657},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"43620b0944ffb67ea1fa6cc838f65a7351222eb0","modified":1660916134657},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1660916134657},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1660916134657},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"b917b893b1777e6ffcb53188f9f5644510e5f20d","modified":1660916134657},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1660916134657},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1660916134657},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1660916134657},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1660916134657},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1660916134657},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1660916134657},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1660916134657},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1660916134657},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1660916134657},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1660916134657},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1660916134661},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1660916134661},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1660916134661},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1660916134661},{"_id":"themes/fluid/source/img/avatar_default.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1660916134661},{"_id":"themes/fluid/source/img/avatar_pom.png","hash":"f4f797904e22977384b09b81384594ae96d8248a","modified":1660916134661},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1660916134661},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1660916134661},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1660916134661},{"_id":"themes/fluid/source/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1660916134661},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1660916134661},{"_id":"themes/fluid/source/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1660916134665},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1660916134665},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1660916134665},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1660916134665},{"_id":"themes/fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1660916134665},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1660916134665},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1660916134665},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1660916134653},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"953552425f0b86c98d1026fdb04e716fdff356e7","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"cbcf6905f4990a22895a848e29dd4c05592a9043","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"94c1ce6e312932e876886ba24b082ae34515a038","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"3b3b0be9f7624ff72fbb2da6ae3663adcfb7d118","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"88420e83c0968f7da69aa423f42d3033891c9229","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"e74fb49526ddb14fee2c6360a560d17f57262ef7","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1660916134657},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"91a1de823492d9225f9daa3ef59efbca345456a0","modified":1660916134657},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1660916134657},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1660916134657},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1660916134657},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1660916134657},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1660916134657},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1660916134657},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1660916134657},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1660916134661},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1660916134661},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"99e8e25e84d513b869a17140f63a5c1e48a0e7e1","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"7054d79c9d5966fc57baf0adcdf3b19275987b62","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"896179810e1ee986208ae2d57a44719f6b839bde","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1660916134661},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1660916134661},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1660916134661},{"_id":"source/img/banner.png","hash":"27174cd45c779bd717ff4c945ad555dc6674dda2","modified":1660916134641},{"_id":"public/js/duration.js","hash":"9e9738e24be66f1ea168e50575e43fed4790bd60","modified":1660916211856},{"_id":"public/local-search.xml","hash":"bd9c39b527c071bd3d447599c117aebcc86c837c","modified":1664348577415},{"_id":"public/about/index.html","hash":"3e3d4bb05ad092714df8763bed64d996da1eb105","modified":1660916211856},{"_id":"public/archives/index.html","hash":"e4a0c7ef0484e2af661bd1feb8fc35281cce4e2d","modified":1664088065479},{"_id":"public/archives/page/2/index.html","hash":"e39772b22ebc170ca03350f10805c48df2136989","modified":1664088065479},{"_id":"public/archives/2022/index.html","hash":"21acf4257252393b400c4b08369141391d7a14e2","modified":1664088065479},{"_id":"public/archives/2022/page/2/index.html","hash":"5262e92a7f3b989a20b1cfa15aabac60fe44a83c","modified":1664088065479},{"_id":"public/archives/2022/06/index.html","hash":"9ed9f6a6b816d1f21dbb521d0481b6c69a589d37","modified":1664088065479},{"_id":"public/archives/2022/07/index.html","hash":"ff79d3eb02223b0e92704df700fe395b915007a8","modified":1664088065479},{"_id":"public/archives/2022/08/index.html","hash":"ed60e507aa3411455013039ae977f10b5978a7b1","modified":1664088065479},{"_id":"public/categories/nacos/index.html","hash":"8882f1e0f31caf7f27797259e69e2e80059bafe3","modified":1660916211856},{"_id":"public/categories/git/index.html","hash":"6158d9b9f773a88e649ee44e23fcfd027eed2f2a","modified":1660916211856},{"_id":"public/categories/go/index.html","hash":"b1fda3e3938905ccd04f5c5b54ef6332518606d7","modified":1660916211856},{"_id":"public/categories/Hexo/index.html","hash":"168e9b0579d7598b533147168b6d8654a0b000ff","modified":1660916211856},{"_id":"public/categories/note/index.html","hash":"bb0e77f0e7c8ee8e9c57c8e97c17ebc1f3e42cb7","modified":1660916211856},{"_id":"public/categories/linux/index.html","hash":"a31f4c19dbd1e178d9ba9bf80e2a20415b982397","modified":1660916211856},{"_id":"public/page/2/index.html","hash":"4d80b3f42d4e71192ce6de6eb72a78d94b0ca395","modified":1664088065479},{"_id":"public/404.html","hash":"63bf996b6b0fc21ed25a43795998a6addb8aa856","modified":1660916211856},{"_id":"public/tags/index.html","hash":"88d1bfebbb2448acb967d8ecdab203d079b66641","modified":1660916211856},{"_id":"public/links/index.html","hash":"2b9099facc3b9cdd3d988bb916f88d9ef3b8407d","modified":1660916211856},{"_id":"public/categories/index.html","hash":"e128bea540217a3f872b3c6961870c1c67a9ba03","modified":1663224505917},{"_id":"public/2022/08/13/http-note/index.html","hash":"3287ee9fee8271d94fc83cfb48e67c7ee2518557","modified":1664089179587},{"_id":"public/2022/07/11/ospp_record/index.html","hash":"96f5569460e50cf5202852ff9f66ca9c10eec1a4","modified":1660916211856},{"_id":"public/2022/07/06/git-local/index.html","hash":"2b396400d57012699ce4148b9c8ded28c0d6db03","modified":1660916211856},{"_id":"public/2022/07/06/plugin-details/index.html","hash":"9062a29d5a1c9e59cc9ccb325fcc102bffdbeec8","modified":1660916211856},{"_id":"public/2022/07/06/go-note/index.html","hash":"1b0d9b02bfbe3765b653792d697aadb82106769d","modified":1660916211856},{"_id":"public/2022/07/05/nacos_grpc_service/index.html","hash":"ac1a32cc88fdc9580b44797229b348bde4d1d949","modified":1660916211856},{"_id":"public/2022/07/04/ospp-0704/index.html","hash":"38d7ae7800b05549cbc5c1e740cd1534f6399a5f","modified":1660916211856},{"_id":"public/2022/07/03/vmware-ubuntu-go/index.html","hash":"bea8ce95dfb3be95eba05a384ce916e32438bf44","modified":1660916211856},{"_id":"public/2022/06/27/linux-clash/index.html","hash":"cbad81c240aa052f8342a79780b7a90508dae0aa","modified":1660916211856},{"_id":"public/2022/06/25/docker-mysql/index.html","hash":"b62df851e08ddc307811df1932cc2831f0c3897a","modified":1660916211856},{"_id":"public/2022/06/25/hexo-bt-tcCloud/index.html","hash":"ca08db788caaeec6a41b882bee9f5d829357d52c","modified":1660916211856},{"_id":"public/2022/06/21/nacos-coredns-plugin/index.html","hash":"0f9440eb0919a86c0e022dac24001a620fa53b89","modified":1660916211856},{"_id":"public/2022/06/21/docker-nacos/index.html","hash":"d03bea74740ae33c185a5c14fedabf1e0323c4d6","modified":1660916211856},{"_id":"public/2022/06/21/hello-world/index.html","hash":"54a29106bd158b27fcf21377ac552abfdece978d","modified":1660916211856},{"_id":"public/index.html","hash":"cdf9d5c1698106508e6a7b45f9a9bf35ae1ee3b7","modified":1664348577415},{"_id":"public/img/avatar_default.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1660916211856},{"_id":"public/img/avatar_pom.png","hash":"f4f797904e22977384b09b81384594ae96d8248a","modified":1660916211856},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1660916211856},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1660916211856},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1660916211856},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1660916211856},{"_id":"public/img/avatar.png","hash":"f4f797904e22977384b09b81384594ae96d8248a","modified":1660916211856},{"_id":"public/img/hexo-deployed.png","hash":"e7ccee9a5d879b44fe5dd0082b6b0370976f9b84","modified":1660916211856},{"_id":"public/img/0712/demo.go.details.png","hash":"ceb386bc10affe8ecc2d93d6b2cfc469fa939f54","modified":1660916211856},{"_id":"public/img/0712/demo.go.png","hash":"1c6c54234c73cee9f8681471c6e5b4e31ac02d8e","modified":1660916211856},{"_id":"public/img/docker-mysql/docker-mysql-images.png","hash":"6b23a74f98b993c6bab95e619b6f6a4da7d17e28","modified":1660916211856},{"_id":"public/img/docker-mysql/docker-ps-mysql.png","hash":"e486b6c7a973f1aff3b01a5e6ed37e76edd972f9","modified":1660916211856},{"_id":"public/img/docker-mysql/docker-pull-mysql.png","hash":"ea970b787e30880625f939abb5f7cf38ec9ca9f3","modified":1660916211856},{"_id":"public/img/docker-nacos/hello_nacos.png","hash":"1b34c42eb3fe2cdfec1a45d2f1b6df6e783e0c7f","modified":1660916211856},{"_id":"public/img/hexo-bt-tcCloud/add-blog-su.png","hash":"93df60beac6ce2055258b2916e09d8f045a6027c","modified":1660916211856},{"_id":"public/img/hexo-bt-tcCloud/change-nginx-server.png","hash":"52b57196bba749467f4b22c307921a783e68c476","modified":1660916211856},{"_id":"public/img/hexo-bt-tcCloud/init-hexo-git.png","hash":"9bb0b7dc1f805a066702564d11b93d6a8b975701","modified":1660916211856},{"_id":"public/img/http-note/udp-header.png","hash":"ea5e20a55a6d25b6e89ed418b75b1e582fe592a7","modified":1660916211856},{"_id":"public/img/nacos-coredns-plugin/nacos-coredns-test.png","hash":"c7ca449802c410a0bac9ad72f7a4133cbde9a7ee","modified":1660916211856},{"_id":"public/img/nacos_grpc_service/nacos_grpc_service_detail.png","hash":"0165863244453627544772f7f8740afb8076557c","modified":1660916211856},{"_id":"public/img/nacos_grpc_service/nacos_grpc_service_list.png","hash":"96a87f5dd5e51ab9e768d3d82636b07f2a3d41cf","modified":1660916211856},{"_id":"public/img/ospp-0704/allDomNames.png","hash":"6021ea818f04b278d541d692c506fd5ac84ec306","modified":1660916211856},{"_id":"public/img/ospp-0704/nacos2.1.0_controller.png","hash":"d50513b2d102e923c0c8ba49b2eff3f16b0aa0e1","modified":1660916211856},{"_id":"public/img/ospp-0704/srvIPXT.png","hash":"249f34c6473973778f980f5a56a15d24cc1a37ca","modified":1660916211856},{"_id":"public/img/ospp_record/cache_dir.png","hash":"9f4ff384f290a9365b285b0e7e5380be35bf26b4","modified":1660916211856},{"_id":"public/img/ospp_record/cache_sdk_dir.png","hash":"d64f2df84e19d663619b1068f4c714bb02150233","modified":1660916211856},{"_id":"public/img/ospp_record/domain_new.png","hash":"55321294d9084cb366ad8dc3eac041d600447b36","modified":1660916211856},{"_id":"public/img/ospp_record/domian_old.png","hash":"1ac2337a6d881fb9142ee4e14a64460a37c796bd","modified":1660916211856},{"_id":"public/img/ospp_record/getService.png","hash":"f0945762365974e8485e00ddd37e9033c672c05e","modified":1660916211856},{"_id":"public/img/ospp_record/grpc.png","hash":"bbecbbcab07e80d4495e2463b4c221feeb230a20","modified":1660916211856},{"_id":"public/img/ospp_record/updateAllDomNames.png","hash":"9341ba58be44da0d5bd525a98372b535b7222ead","modified":1660916211856},{"_id":"public/img/ospp_record/updateDomain.png","hash":"38114f2295e2b01a54336f5bc14030b2eb94345f","modified":1660916211856},{"_id":"public/img/plugin-details/NacosGrpcClient.drawio","hash":"f34fe5087c94782a04369ed1ffe2bb9e516a75f5","modified":1660916211856},{"_id":"public/img/plugin-details/NacosGrpcClient.png","hash":"32dc062ca8c45ace541666db0b0a6e048f2d4dd9","modified":1660916211856},{"_id":"public/img/plugin-details/getAllService.png","hash":"7aef94474bbdc9486ac044132ba1bc0ddb7b5837","modified":1660916211856},{"_id":"public/img/plugin-details/getService.png","hash":"a9ede8ae17a86b31683741fe3820a2f7f3ea416f","modified":1660916211856},{"_id":"public/img/plugin-details/nacos-coredns-plugin.drawio","hash":"20c2baacdeebd287fd84bd5e5b53e4c5461d9dc9","modified":1660916211856},{"_id":"public/img/plugin-details/nacos-coredns-plugin.png","hash":"57d0afe01ca9de580951b469ffab472fc5812ecf","modified":1660916211856},{"_id":"public/img/ospp_record/go_func.png","hash":"24a07b075b999997d8f9908e418048fba1c67441","modified":1660916211856},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1660916211856},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1660916211856},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1660916211856},{"_id":"public/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1660916211856},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1660916211856},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1660916211856},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1660916211856},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1660916211856},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1660916211856},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1660916211856},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1660916211856},{"_id":"public/css/main.css","hash":"87e2205b08ac7bc1a7beffb860742a81a8dfd64b","modified":1660916211856},{"_id":"public/img/0712/go-client.png","hash":"b5974e62ba9ea4b1ef27b6495e2c192c1e915e63","modified":1660916211856},{"_id":"public/img/ospp-0704/nacos1.x_ApiController.png","hash":"f837e614ce1ce306688379aac50ef65100a76fa2","modified":1660916211856},{"_id":"public/img/ospp-0704/nacos_coredns_plugin_api.png","hash":"96d21405e9e32d4dfb35a89183cbf77951c32b1c","modified":1660916211856},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1660916211856},{"_id":"public/img/banner.png","hash":"27174cd45c779bd717ff4c945ad555dc6674dda2","modified":1660916211856},{"_id":"source/_posts/bit-compute.md","hash":"b9ec557a0ee8d6b954eac30a77e51defe0a28ca8","modified":1662385951223},{"_id":"public/categories/leetcode/index.html","hash":"579014f65ea91d07f54b183775558aa6c2e3003f","modified":1662385990934},{"_id":"public/2022/08/24/bit-compute/index.html","hash":"82d6dee6fb952d14a8694e6412d4101bf8e6e16a","modified":1664089179587},{"_id":"source/_posts/project-report.md","hash":"35853aa01e76e34c11e2c91cc0aabcd9a3161738","modified":1664349610652},{"_id":"public/archives/2022/09/index.html","hash":"a3ad743a8b32fcf8445238c4a51e906b6ad5a294","modified":1664088065479},{"_id":"public/categories/ospp/index.html","hash":"e629d445bba93729dbfb25128450e4f730452b50","modified":1663224505917},{"_id":"public/2022/09/09/project-report/index.html","hash":"1a723e519088931145d31ccd40ba9ca0bbc7e3cf","modified":1664348577415},{"_id":"source/_posts/coredns-test-report.md","hash":"2a893dc7e25766c60d6d1abf242c9b01fd2171b7","modified":1663844735059},{"_id":"public/2022/09/15/coredns-test-report/index.html","hash":"e52c941e8fe9ce424925eee89cda538ec61006e1","modified":1664088065479},{"_id":"source/img/coredns-test-report/test1.png","hash":"4ef07c9021f33c627ac9e152d4eb07b31eb95bdd","modified":1663233618916},{"_id":"public/img/coredns-test-report/test1.png","hash":"478637fe1391cddf2cd97eba68e1026ef5bc4ba8","modified":1663230437248},{"_id":"source/img/coredns-test-report/test2.png","hash":"9d29ea616a8df3ee1b8487ab4fc73a65e8c1ebfe","modified":1663233619072},{"_id":"source/img/coredns-test-report/test3.png","hash":"92ddeddbe0cdebf0a3264d40b9421aaddd593e4d","modified":1663233619232},{"_id":"source/img/coredns-test-report/test4.png","hash":"dc0f7c13055b4e40a04ebe1365d89f5def801c74","modified":1663233619368},{"_id":"source/img/coredns-test-report/test5.png","hash":"207791bd1eb9f87951c0a4c8dcbf93b8eb04c25c","modified":1663233619508},{"_id":"source/img/coredns-test-report/test6.png","hash":"38272528aaed80835b7b8d24f95265b95485356d","modified":1663233619636},{"_id":"source/img/coredns-test-report/test7.png","hash":"ddfbc8b11c2732de0fcdb22312d60fdabfe6a599","modified":1663233619796},{"_id":"public/img/coredns-test-report/test2.png","hash":"974107163e3ae06df64e913a8df3329094646587","modified":1663230384666},{"_id":"public/img/coredns-test-report/test3.png","hash":"b81846052b533709a01c136d10796483cb539d36","modified":1663230384666},{"_id":"public/img/coredns-test-report/test4.png","hash":"ba2bcd017cfee86ca3dd9863689dcd7dc9b8dffd","modified":1663230384666},{"_id":"public/img/coredns-test-report/test5.png","hash":"62b85cf4411fd7e0a153b5bbea73dff553efbf5d","modified":1663230384666},{"_id":"public/img/coredns-test-report/test6.png","hash":"b28bcfee6a9bdeb01c14981e1612c22e52b5bced","modified":1663230384666},{"_id":"public/img/coredns-test-report/test7.png","hash":"13e549f7cc9841ee16f55ac9428b29bb5ecfdc68","modified":1663230384666},{"_id":"source/_posts/test2.md","hash":"a217c1083a0f07f1787489093801c22fee778186","modified":1663857002150},{"_id":"source/_posts/test1.md","hash":"38fc28af020ff7d5a47b85ef37ba90a60098d3b1","modified":1663845632068},{"_id":"public/2022/09/22/test2/index.html","hash":"3a32f960c82120e6e65b1eebc1185f68197fe6b6","modified":1664088020436},{"_id":"public/2022/09/22/test1/index.html","hash":"d765c0c62fe7a31b313851463fc74e70ea515bac","modified":1664088020436},{"_id":"source/img/project-report/NacosGrpcClient.drawio.png","hash":"c9645cb47491bc36b0b56df8da7868998509e5ac","modified":1664088156313},{"_id":"source/img/project-report/grpc-design.png","hash":"ff11c4a97cc54c790a63a8f57dd6795cc1cd262e","modified":1664090081534},{"_id":"public/img/project-report/NacosGrpcClient.drawio.png","hash":"c9645cb47491bc36b0b56df8da7868998509e5ac","modified":1664088161086},{"_id":"public/img/project-report/grpc-design.png","hash":"ff11c4a97cc54c790a63a8f57dd6795cc1cd262e","modified":1664090086215}],"Category":[{"name":"nacos","_id":"cl70imnkp00041qwu2usdbf3l"},{"name":"git","_id":"cl70imnkx000c1qwu1pq77h2r"},{"name":"go","_id":"cl70imnl0000h1qwu69qogghf"},{"name":"Hexo","_id":"cl70imnl4000l1qwuh2qoflff"},{"name":"note","_id":"cl70imnl9000t1qwu6p3238tq"},{"name":"linux","_id":"cl70imnl9000w1qwu8srn2536"},{"name":"leetcode","_id":"cl7otp4ck0001mvwu939866sg"},{"name":"ospp","_id":"cl7unt1jo00016bwu5pkidmxx"}],"Data":[],"Page":[{"title":"标题","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 标题\nlayout: about\n---","date":"2022-08-19T13:35:34.633Z","updated":"2022-08-19T13:35:34.633Z","path":"about/index.html","comments":1,"_id":"cl70imnkf00001qwu9zgvbzec","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"title":"categories","date":"2022-06-21T07:19:48.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-06-21 15:19:48\n---\n","updated":"2022-08-19T13:35:34.633Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl70imnkm00021qwu7rdh2oop","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""},{"_content":"!(function() {\n    /** 计时起始时间，自行修改 **/\n    var start = new Date(\"2022/06/18 00:00:00\");\n  \n    function update() {\n      var now = new Date();\n      now.setTime(now.getTime()+250);\n      days = (now - start) / 1000 / 60 / 60 / 24;\n      dnum = Math.floor(days);\n      hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);\n      hnum = Math.floor(hours);\n      if(String(hnum).length === 1 ){\n        hnum = \"0\" + hnum;\n      }\n      minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n      mnum = Math.floor(minutes);\n      if(String(mnum).length === 1 ){\n        mnum = \"0\" + mnum;\n      }\n      seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n      snum = Math.round(seconds);\n      if(String(snum).length === 1 ){\n        snum = \"0\" + snum;\n      }\n      document.getElementById(\"timeDate\").innerHTML = \"本站安全运行&nbsp\"+dnum+\"&nbsp天\";\n      document.getElementById(\"times\").innerHTML = hnum + \"&nbsp小时&nbsp\" + mnum + \"&nbsp分&nbsp\" + snum + \"&nbsp秒\";\n    }\n  \n    update();\n    setInterval(update, 1000);\n  })();","source":"js/duration.js","raw":"!(function() {\n    /** 计时起始时间，自行修改 **/\n    var start = new Date(\"2022/06/18 00:00:00\");\n  \n    function update() {\n      var now = new Date();\n      now.setTime(now.getTime()+250);\n      days = (now - start) / 1000 / 60 / 60 / 24;\n      dnum = Math.floor(days);\n      hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);\n      hnum = Math.floor(hours);\n      if(String(hnum).length === 1 ){\n        hnum = \"0\" + hnum;\n      }\n      minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n      mnum = Math.floor(minutes);\n      if(String(mnum).length === 1 ){\n        mnum = \"0\" + mnum;\n      }\n      seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n      snum = Math.round(seconds);\n      if(String(snum).length === 1 ){\n        snum = \"0\" + snum;\n      }\n      document.getElementById(\"timeDate\").innerHTML = \"本站安全运行&nbsp\"+dnum+\"&nbsp天\";\n      document.getElementById(\"times\").innerHTML = hnum + \"&nbsp小时&nbsp\" + mnum + \"&nbsp分&nbsp\" + snum + \"&nbsp秒\";\n    }\n  \n    update();\n    setInterval(update, 1000);\n  })();","date":"2022-08-19T13:35:34.653Z","updated":"2022-08-19T13:35:34.653Z","path":"js/duration.js","layout":"false","title":"","comments":1,"_id":"cl70imnkq00051qwuclpvdjpv","content":"!(function() {\n    /** 计时起始时间，自行修改 **/\n    var start = new Date(\"2022/06/18 00:00:00\");\n  \n    function update() {\n      var now = new Date();\n      now.setTime(now.getTime()+250);\n      days = (now - start) / 1000 / 60 / 60 / 24;\n      dnum = Math.floor(days);\n      hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);\n      hnum = Math.floor(hours);\n      if(String(hnum).length === 1 ){\n        hnum = \"0\" + hnum;\n      }\n      minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n      mnum = Math.floor(minutes);\n      if(String(mnum).length === 1 ){\n        mnum = \"0\" + mnum;\n      }\n      seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n      snum = Math.round(seconds);\n      if(String(snum).length === 1 ){\n        snum = \"0\" + snum;\n      }\n      document.getElementById(\"timeDate\").innerHTML = \"本站安全运行&nbsp\"+dnum+\"&nbsp天\";\n      document.getElementById(\"times\").innerHTML = hnum + \"&nbsp小时&nbsp\" + mnum + \"&nbsp分&nbsp\" + snum + \"&nbsp秒\";\n    }\n  \n    update();\n    setInterval(update, 1000);\n  })();","site":{"data":{}},"wordcount":753,"excerpt":"","more":"!(function() {\n    /** 计时起始时间，自行修改 **/\n    var start = new Date(\"2022/06/18 00:00:00\");\n  \n    function update() {\n      var now = new Date();\n      now.setTime(now.getTime()+250);\n      days = (now - start) / 1000 / 60 / 60 / 24;\n      dnum = Math.floor(days);\n      hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);\n      hnum = Math.floor(hours);\n      if(String(hnum).length === 1 ){\n        hnum = \"0\" + hnum;\n      }\n      minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n      mnum = Math.floor(minutes);\n      if(String(mnum).length === 1 ){\n        mnum = \"0\" + mnum;\n      }\n      seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n      snum = Math.round(seconds);\n      if(String(snum).length === 1 ){\n        snum = \"0\" + snum;\n      }\n      document.getElementById(\"timeDate\").innerHTML = \"本站安全运行&nbsp\"+dnum+\"&nbsp天\";\n      document.getElementById(\"times\").innerHTML = hnum + \"&nbsp小时&nbsp\" + mnum + \"&nbsp分&nbsp\" + snum + \"&nbsp秒\";\n    }\n  \n    update();\n    setInterval(update, 1000);\n  })();"}],"Post":[{"title":"位运算符","date":"2022-08-24T11:47:43.000Z","_content":"\n# 位运算符\n常见位运算符：&，|，^，~，>>，<<\n\nA = 0011 1100\n\nB = 0000 1101\n\n```\n    &（与）:A的每一位与B的每一位进行比较，当相对应位的数值都为\"1\"时，则该位输出\"1\"，反之输出\"0\"。\n    A&B输出：0000 1100\n        \n    |（或）:A的每一位与B的每一位进行比较，当相对应位的数值都为\"0\"时，则该位输出\"0\"，反之输出\"1\"。\n    A|B输出：0011 1101\n        \n    ^（异或）：当A与B相对位不相同的时候，该位输出“1”，反之输出\"0\"。\n    A^B输出：0011 0001\n        \n    ~（非）：所有位取反。\n    ~B输出:1111 0010\n```\n\n```\n<<（左移）：相当于把数值*2的n次方。\n例：3<<3，相当于3*2的3次方=3*8=24\n\n>>（右移）：相当于把数值/2的n次方\n例：24>>3，相当于24/2的3次方=24*8=3\n```","source":"_posts/bit-compute.md","raw":"---\ntitle: 位运算符\ndate: 2022-08-24 19:47:43\ncategories: \n - leetcode\n---\n\n# 位运算符\n常见位运算符：&，|，^，~，>>，<<\n\nA = 0011 1100\n\nB = 0000 1101\n\n```\n    &（与）:A的每一位与B的每一位进行比较，当相对应位的数值都为\"1\"时，则该位输出\"1\"，反之输出\"0\"。\n    A&B输出：0000 1100\n        \n    |（或）:A的每一位与B的每一位进行比较，当相对应位的数值都为\"0\"时，则该位输出\"0\"，反之输出\"1\"。\n    A|B输出：0011 1101\n        \n    ^（异或）：当A与B相对位不相同的时候，该位输出“1”，反之输出\"0\"。\n    A^B输出：0011 0001\n        \n    ~（非）：所有位取反。\n    ~B输出:1111 0010\n```\n\n```\n<<（左移）：相当于把数值*2的n次方。\n例：3<<3，相当于3*2的3次方=3*8=24\n\n>>（右移）：相当于把数值/2的n次方\n例：24>>3，相当于24/2的3次方=24*8=3\n```","slug":"bit-compute","published":1,"updated":"2022-09-05T13:53:26.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdjb0000i3wuf82865hx","content":"<h1 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h1><p>常见位运算符：&amp;，|，^，~，&gt;&gt;，&lt;&lt;</p>\n<p>A &#x3D; 0011 1100</p>\n<p>B &#x3D; 0000 1101</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">&amp;（与）:<span class=\"hljs-keyword\">A</span>的每一位与B的每一位进行比较，当相对应位的数值都为&quot;<span class=\"hljs-number\">1</span>&quot;时，则该位输出&quot;<span class=\"hljs-number\">1</span>&quot;，反之输出&quot;<span class=\"hljs-number\">0</span>&quot;。<br><span class=\"hljs-keyword\">A</span>&amp;B输出：<span class=\"hljs-number\">0000 1100</span><br>    <br>|（或）:<span class=\"hljs-keyword\">A</span>的每一位与B的每一位进行比较，当相对应位的数值都为&quot;<span class=\"hljs-number\">0</span>&quot;时，则该位输出&quot;<span class=\"hljs-number\">0</span>&quot;，反之输出&quot;<span class=\"hljs-number\">1</span>&quot;。<br><span class=\"hljs-keyword\">A</span>|B输出：<span class=\"hljs-number\">0011 1101</span><br>    <br>^（异或）：当<span class=\"hljs-keyword\">A</span>与B相对位不相同的时候，该位输出“<span class=\"hljs-number\">1</span>”，反之输出&quot;<span class=\"hljs-number\">0</span>&quot;。<br><span class=\"hljs-keyword\">A</span>^B输出：<span class=\"hljs-number\">0011 0001</span><br>    <br>~（非）：所有位取反。<br>~B输出:<span class=\"hljs-number\">1111 0010</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">&lt;&lt;（左移）：相当于把数值*<span class=\"hljs-number\">2</span>的n次方。<br>例：<span class=\"hljs-number\">3</span>&lt;&lt;<span class=\"hljs-number\">3</span>，相当于<span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">2</span>的<span class=\"hljs-number\">3</span>次方<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">8</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">24</span><br><br>&gt;&gt;（右移）：相当于把数值/<span class=\"hljs-number\">2</span>的n次方<br>例：<span class=\"hljs-number\">24</span>&gt;&gt;<span class=\"hljs-number\">3</span>，相当于<span class=\"hljs-number\">24</span>/<span class=\"hljs-number\">2</span>的<span class=\"hljs-number\">3</span>次方<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">8</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":487,"excerpt":"","more":"<h1 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h1><p>常见位运算符：&amp;，|，^，~，&gt;&gt;，&lt;&lt;</p>\n<p>A &#x3D; 0011 1100</p>\n<p>B &#x3D; 0000 1101</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">&amp;（与）:<span class=\"hljs-keyword\">A</span>的每一位与B的每一位进行比较，当相对应位的数值都为&quot;<span class=\"hljs-number\">1</span>&quot;时，则该位输出&quot;<span class=\"hljs-number\">1</span>&quot;，反之输出&quot;<span class=\"hljs-number\">0</span>&quot;。<br><span class=\"hljs-keyword\">A</span>&amp;B输出：<span class=\"hljs-number\">0000 1100</span><br>    <br>|（或）:<span class=\"hljs-keyword\">A</span>的每一位与B的每一位进行比较，当相对应位的数值都为&quot;<span class=\"hljs-number\">0</span>&quot;时，则该位输出&quot;<span class=\"hljs-number\">0</span>&quot;，反之输出&quot;<span class=\"hljs-number\">1</span>&quot;。<br><span class=\"hljs-keyword\">A</span>|B输出：<span class=\"hljs-number\">0011 1101</span><br>    <br>^（异或）：当<span class=\"hljs-keyword\">A</span>与B相对位不相同的时候，该位输出“<span class=\"hljs-number\">1</span>”，反之输出&quot;<span class=\"hljs-number\">0</span>&quot;。<br><span class=\"hljs-keyword\">A</span>^B输出：<span class=\"hljs-number\">0011 0001</span><br>    <br>~（非）：所有位取反。<br>~B输出:<span class=\"hljs-number\">1111 0010</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">&lt;&lt;（左移）：相当于把数值*<span class=\"hljs-number\">2</span>的n次方。<br>例：<span class=\"hljs-number\">3</span>&lt;&lt;<span class=\"hljs-number\">3</span>，相当于<span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">2</span>的<span class=\"hljs-number\">3</span>次方<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3</span>*<span class=\"hljs-number\">8</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">24</span><br><br>&gt;&gt;（右移）：相当于把数值/<span class=\"hljs-number\">2</span>的n次方<br>例：<span class=\"hljs-number\">24</span>&gt;&gt;<span class=\"hljs-number\">3</span>，相当于<span class=\"hljs-number\">24</span>/<span class=\"hljs-number\">2</span>的<span class=\"hljs-number\">3</span>次方<span class=\"hljs-operator\">=</span><span class=\"hljs-number\">24</span>*<span class=\"hljs-number\">8</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>"},{"title":"项目测试文档","date":"2022-09-15T11:47:43.000Z","_content":"\n## 测试环境\n\n- 操作系统： Linux Ubuntu20.0.4\n- Golang版本： 1.17\n- Nacos版本：  2.1.0\n- CoreDNS版本：1.9.3\n\n**Nacos-Coredns-Plugin\n插件编译脚本**\n``` shell\n# cd GOPATH\ncd $GOPATH/src/\n\n# remove codes\nrm -rf coredns\nrm -rf nacos-coredns-plugin\n\n# clone current codes\ngit clone https://github.com/nacos-group/nacos-coredns-plugin.git\ngit clone https://github.com/coredns/coredns.git\n\n\n# cd coredns directory\ncd $GOPATH/src/coredns\ngit checkout -b v1.9.3 v1.9.3\n\n# copy nacos plugin to coredns\ncp -r ../nacos-coredns-plugin/nacos plugin/\ncp -r ../nacos-coredns-plugin/forward/setup.go plugin/forward\ncp -r ../nacos-coredns-plugin/conf conf\n\n# insert nacos into plugin\nsed -i '/hosts/a\\\\t\"nacos\",' core/dnsserver/zdirectives.go\nsed -i '/coredns\\/plugin\\/hosts/a\\\\t_ \"github.com/coredns/coredns/plugin/nacos\"' core/plugin/zplugin.go\nsed -i '/hosts:hosts/a\\nacos:nacos' plugin.cfg\n\ngo mod tidy\n\n# build\nmake\n```\n\n## 测试用例\n\n在原来的v1.6.7分支上，修改 个测试用例，新增 个测试用例\n\n### nacos_client_test.go\n\n**测试用例一：**TestNacosClient_getAllServiceNames\n- 预期结果：获取Nacos服务端里注册的所有服务名并存入AllDoms\n- 实际结果：成功获取Nacos服务端里注册的所有服务名并存入AllDoms\n```\nfunc TestNacosClient_getAllServiceNames(t *testing.T) {\n\tGrpcClient = grpcClientTest\n\tnacosClientTest.getAllServiceNames()\n\n\tAllDoms.DLock.Lock()\n\tdefer AllDoms.DLock.Unlock()\n\tdoms := GrpcClient.GetAllServicesInfo()\n\n\tfor _, dom := range doms {\n\t\tassert.True(t, AllDoms.Data[dom])\n\t}\n\tif len(doms) == len(AllDoms.Data) {\n\t\tt.Log(\"Get all serviceName from servers passed\")\n\t} else {\n\t\tt.Error(\"Get all serviceName from servers error\")\n\t}\n}\n```\n<div align=\"center\">\n    <img src=\"/img/coredns-test-report/test1.png\"></img>\n</div>\n\n**测试用例二：**TestNacosClient_getDomNow\n- 预期结果：获取Nacos服务端里某个服务的具体信息并存入缓存中\n- 实际结果：成功获取Nacos服务端里某个服务的具体信息并存入缓存中\n```\nfunc TestNacosClient_getServiceNow(t *testing.T) {\n\tGrpcClient = grpcClientTest\n\tnacosClientTest.getAllServiceNames()\n\ttestServiceMap := NewConcurrentMap()\n\n\tfor serviceName, _ := range AllDoms.Data {\n\t\tnacosClientTest.getServiceNow(serviceName, &nacosClientTest.serviceMap, \"0.0.0.0\")\n\t}\n\n\tfor serviceName, _ := range AllDoms.Data {\n\t\ttestService := GrpcClient.GetService(serviceName)\n\t\ttestServiceMap.Set(serviceName, testService)\n\t\ts, ok := nacosClientTest.GetDomainCache().Get(serviceName)\n\t\tassert.True(t, ok)\n\t\tservice := s.(model.Service)\n\t\tassert.True(t, len(service.Hosts) == len(testService.Hosts))\n\t}\n\n\tif len(nacosClientTest.GetDomainCache()) == len(testServiceMap) {\n\t\tt.Log(\"Get all servicesInfo from servers passed\")\n\t} else {\n\t\tt.Error(\"Get all servicesInfo from servers error\")\n\t}\n}\n```\n<div align=\"center\">\n    <img src=\"/img/coredns-test-report/test2.png\"></img>\n</div>\n\n### nacos_grpc_client_test.go\n\n**测试用例三：**TestGetAllServicesInfo\n- 预期结果：gRPC请求获取Nacos服务端里注册的所有服务名\n- 实际结果：成功通过gRPC请求获取Nacos服务端里注册的所有服务名\n```\nfunc TestGetAllServicesInfo(t *testing.T) {\n\tservices := grpcClientTest.GetAllServicesInfo()\n\tif len(services) > 0 {\n\t\tt.Log(\"GrpcClient get all servicesInfo passed\")\n\t} else {\n\t\tt.Log(\"GrpcClient get all servicesInfo empty\")\n\t}\n}\n```\n<div align=\"center\">\n    <img src=\"/img/coredns-test-report/test3.png\"></img>\n</div>\n\n\n**测试用例四：**TestGetService\n- 预期结果：gRPC请求获取Nacos服务端某个服务的具体信息\n- 实际结果：成功通过gRPC请求获取Nacos服务端某个服务的具体信息\n```\nfunc TestGetService(t *testing.T) {\n\tservices := grpcClientTest.GetAllServicesInfo()\n\tserviceMap := NewConcurrentMap()\n\tfor _, serviceName := range services {\n\t\tservice := grpcClientTest.GetService(serviceName)\n\t\tif assert.NotNil(t, service) {\n\t\t\tserviceMap.Set(serviceName, service)\n\t\t}\n\t}\n\tif serviceMap.Count() == len(services) {\n\t\tt.Log(\"GrpcClient get service passed\")\n\t} else {\n\t\tt.Error(\"GrpcClient get service error\")\n\t}\n}\n```\n<div align=\"center\">\n    <img src=\"/img/coredns-test-report/test4.png\"></img>\n</div>\n\n\n**测试用例五：**TestSubscribe\n- 预期结果：gRPC订阅Nacos服务端某个服务\n- 实际结果：成功通过gRPC订阅Nacos服务端某个服务\n```\nfunc TestSubscribe(t *testing.T) {\n\tdoms := grpcClientTest.GetAllServicesInfo()\n\tfor _, dom := range doms {\n\t\terr := grpcClientTest.Subscribe(dom)\n\t\tif err != nil {\n\t\t\tt.Error(\"GrpcClient subscribe service error\")\n\t\t\treturn\n\t\t}\n\t}\n\tt.Log(\"GrpcClient subscribe service passed\")\n}\n```\n<div align=\"center\">\n    <img src=\"/img/coredns-test-report/test5.png\"></img>\n</div>\n\n**测试用例六：**TestCallback\n- 预期结果：当Nacos服务端服务发生改变时，通过回调函数更新客户端的服务数据\n- 实际结果：当Nacos服务端服务发生改变时，成功通过回调函数更新客户端的服务数据\n```\nfunc TestCallback(t *testing.T) {\n    services := model.Service{\n            ......\n        }\n    \n    grpcClientTest.nacosClient.GetDomainCache().Set(\"demo.go\", services)\n\n    newServices := model.Service{\n            ······\n        }\n\n    grpcClientTest.Callback(newServices.Hosts, nil)\n\n\ts, _ := grpcClientTest.nacosClient.GetDomainCache().Get(\"demo.go\")\n\n\tupdateServices := s.(model.Service)\n\n\tif len(newServices.Hosts) == len(updateServices.Hosts) {\n\t\tt.Log(\"GrpcClient Service SubscribeCallback passed\")\n\t} else {\n\t\tt.Error(\"GrpcClient Service SubscribeCallback error\")\n\t}\n}\n```\n<div align=\"center\">\n    <img src=\"/img/coredns-test-report/test6.png\"></img>\n</div>\n\n### setup_test.go\n\n**测试用例七：**TestNacosParse\n- 预期结果：通过配置文件配置Nacos服务器的 NamespaceId 和 ip地址和端口 .\n- 实际结果：成功配置Nacos服务器的 NamespaceId 和 ip地址和端口 .\n```\nsetup_test.go: 24 - 63 行\nfunc TestNacosParse(t *testing.T) {\n    ·······\n}\n```\n<div align=\"center\">\n    <img src=\"/img/coredns-test-report/test7.png\"></img>\n</div>\n\n### 所有测试用例运行结果\n``` \n=== RUN   TestDnsCache_Updated\n    dns_cache_test.go:26: Out of date test is passed\n    dns_cache_test.go:32: Updated is passed.\n--- PASS: TestDnsCache_Updated (0.00s)\n=== RUN   TestGet\n    httpclient_test.go:40: Success to test http client get\n--- PASS: TestGet (0.00s)\n=== RUN   TestNacosClient_GetDomain\n--- PASS: TestNacosClient_GetDomain (0.00s)\n=== RUN   TestNacosClient_getAllServiceNames\n    nacos_client_test.go:75: Get all serviceName from servers passed\n--- PASS: TestNacosClient_getAllServiceNames (0.05s)\n=== RUN   TestNacosClient_getServiceNow\n    nacos_client_test.go:100: Get all servicesInfo from servers passed\n--- PASS: TestNacosClient_getServiceNow (2.80s)\n=== RUN   TestDomain_SrvInstances\n    nacos_domain_test.go:30: Domain.srvInstances weight passed.\n    nacos_domain_test.go:37: Domain.srvInstances valid passed.\n--- PASS: TestDomain_SrvInstances (0.00s)\n=== RUN   TestGetAllServicesInfo\n    nacos_grpc_client_test.go:23: GrpcClient get all servicesInfo passed\n--- PASS: TestGetAllServicesInfo (0.03s)\n=== RUN   TestGetService\n    nacos_grpc_client_test.go:39: GrpcClient get service passed\n--- PASS: TestGetService (0.03s)\n=== RUN   TestSubscribe\n    nacos_grpc_client_test.go:54: GrpcClient subscribe service passed\n--- PASS: TestSubscribe (0.03s)\n=== RUN   TestCallback\n    nacos_grpc_client_test.go:181: GrpcClient Service SubscribeCallback passed\n--- PASS: TestCallback (0.00s)\n=== RUN   TestServerManager_NextServer\n    server_manager_test.go:29: ServerManager.NextServer test is passed.\n--- PASS: TestServerManager_NextServer (0.00s)\n=== RUN   TestServerManager_RefreshServerListIfNeed\n    server_manager_test.go:39: ServerManager.RefreshServerListIfNeed test is passed.\n--- PASS: TestServerManager_RefreshServerListIfNeed (0.00s)\n=== RUN   TestNacosParse\ninit nacos plugin...\ninit nacos client.\n2022/09/15 16:05:03 [INFO] logDir:<C:\\Users\\Yu\\logs>   cacheDir:<C:\\Users\\Yu\\nacos-go-client-cache>\n    setup_test.go:54: Passed\n--- PASS: TestNacosParse (1.18s)\n=== RUN   TestUDPServer_StartServer\n    udp_server_test.go:43: Udp server test passed.\n--- PASS: TestUDPServer_StartServer (0.02s)\n=== RUN   TestTryDecompressData\n    util_and_comms_test.go:32: Gzip test is passed.\n--- PASS: TestTryDecompressData (0.00s)\nPASS\nok  \tnacos-coredns-plugin/nacos\t4.624s\n```\n\n\n## 压力测试\n\n1.6.7版本：\n\n### 50000\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              0.200666 sec\n  RTT min:              0.000063 sec\n  RTT average:          0.012621 sec\n  RTT std deviation:    0.010875 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Sat Sep 17 09:49:54 2022\n  Finished at:          Sat Sep 17 09:50:35 2022\n  Ran for:              41.475793 seconds\n\n  Queries per second:   1205.522460 qps\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              0.093154 sec\n  RTT min:              0.000066 sec\n  RTT average:          0.010944 sec\n  RTT std deviation:    0.005928 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Sat Sep 17 09:50:58 2022\n  Finished at:          Sat Sep 17 09:51:31 2022\n  Ran for:              33.176316 seconds\n\n  Queries per second:   1507.099221 qps\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              0.127623 sec\n  RTT min:              0.000097 sec\n  RTT average:          0.013324 sec\n  RTT std deviation:    0.008517 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Sat Sep 17 09:51:56 2022\n  Finished at:          Sat Sep 17 09:52:33 2022\n  Ran for:              36.864735 seconds\n\n  Queries per second:   1356.309763 qps\n\n### 500000\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         500000 queries\n  Queries completed:    499767 queries\n  Queries lost:         233 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              1578.041083 sec\n  RTT min:              0.000016 sec\n  RTT average:          0.036432 sec\n  RTT std deviation:    0.027122 sec\n  RTT out of range:     18 queries\n\n  Percentage completed:  99.95%\n  Percentage lost:        0.05%\n\n  Started at:           Fri Sep 16 17:46:10 2022\n  Finished at:          Fri Sep 16 18:17:38 2022\n  Ran for:              1887.486418 seconds\n\n  Queries per second:   264.779124 qps\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         500000 queries\n  Queries completed:    499857 queries\n  Queries lost:         143 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              1158.509071 sec\n  RTT min:              0.000013 sec\n  RTT average:          0.036213 sec\n  RTT std deviation:    0.028113 sec\n  RTT out of range:     24 queries\n\n  Percentage completed:  99.97%\n  Percentage lost:        0.03%\n\n  Started at:           Fri Sep 16 18:19:12 2022\n  Finished at:          Fri Sep 16 18:43:54 2022\n  Ran for:              1482.300741 seconds\n\n  Queries per second:   337.216994 qps\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         500000 queries\n  Queries completed:    499692 queries\n  Queries lost:         308 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              1594.459308 sec\n  RTT min:              0.000014 sec\n  RTT average:          0.039982 sec\n  RTT std deviation:    0.034464 sec\n  RTT out of range:     23 queries\n\n  Percentage completed:  99.94%\n  Percentage lost:        0.06%\n\n  Started at:           Fri Sep 16 19:03:18 2022\n  Finished at:          Fri Sep 16 19:35:33 2022\n  Ran for:              1935.047773 seconds\n\n  Queries per second:   258.232384 qps\n\n\n### 5000000\n\n新版本：\n\n50000\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              0.052808 sec\n  RTT min:              0.000063 sec\n  RTT average:          0.009972 sec\n  RTT std deviation:    0.003560 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Fri Sep 16 22:07:58 2022\n  Finished at:          Fri Sep 16 22:08:35 2022\n  Ran for:              37.832932 seconds\n\n  Queries per second:   1321.599923 qps\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              0.066514 sec\n  RTT min:              0.000061 sec\n  RTT average:          0.007880 sec\n  RTT std deviation:    0.004037 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Fri Sep 16 22:08:52 2022\n  Finished at:          Fri Sep 16 22:09:26 2022\n  Ran for:              34.318542 seconds\n\n  Queries per second:   1456.938351 qps\n\n### 500000\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         500000 queries\n  Queries completed:    500000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              0.062532 sec\n  RTT min:              0.000032 sec\n  RTT average:          0.005649 sec\n  RTT std deviation:    0.002476 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Sat Sep 17 00:00:22 2022\n  Finished at:          Sat Sep 17 00:05:07 2022\n  Ran for:              284.796569 seconds\n\n  Queries per second:   1755.639128 qps\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         500000 queries\n  Queries completed:    500000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              0.098301 sec\n  RTT min:              0.000062 sec\n  RTT average:          0.011365 sec\n  RTT std deviation:    0.003072 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Sat Sep 17 09:03:59 2022\n  Finished at:          Sat Sep 17 09:08:55 2022\n  Ran for:              296.729115 seconds\n\n  Queries per second:   1685.038558 qps\n\n### 5000000\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         5000000 queries\n  Queries completed:    4999780 queries\n  Queries lost:         220 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              3074.590919 sec\n  RTT min:              0.000022 sec\n  RTT average:          0.011621 sec\n  RTT std deviation:    0.004951 sec\n  RTT out of range:     20 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Fri Sep 16 22:10:31 2022\n  Finished at:          Fri Sep 16 23:06:25 2022\n  Ran for:              3353.644673 seconds\n\n  Queries per second:   1490.849654 qps","source":"_posts/coredns-test-report.md","raw":"---\ntitle: 项目测试文档\ndate: 2022-09-15 19:47:43\ncategories: \n - ospp\n---\n\n## 测试环境\n\n- 操作系统： Linux Ubuntu20.0.4\n- Golang版本： 1.17\n- Nacos版本：  2.1.0\n- CoreDNS版本：1.9.3\n\n**Nacos-Coredns-Plugin\n插件编译脚本**\n``` shell\n# cd GOPATH\ncd $GOPATH/src/\n\n# remove codes\nrm -rf coredns\nrm -rf nacos-coredns-plugin\n\n# clone current codes\ngit clone https://github.com/nacos-group/nacos-coredns-plugin.git\ngit clone https://github.com/coredns/coredns.git\n\n\n# cd coredns directory\ncd $GOPATH/src/coredns\ngit checkout -b v1.9.3 v1.9.3\n\n# copy nacos plugin to coredns\ncp -r ../nacos-coredns-plugin/nacos plugin/\ncp -r ../nacos-coredns-plugin/forward/setup.go plugin/forward\ncp -r ../nacos-coredns-plugin/conf conf\n\n# insert nacos into plugin\nsed -i '/hosts/a\\\\t\"nacos\",' core/dnsserver/zdirectives.go\nsed -i '/coredns\\/plugin\\/hosts/a\\\\t_ \"github.com/coredns/coredns/plugin/nacos\"' core/plugin/zplugin.go\nsed -i '/hosts:hosts/a\\nacos:nacos' plugin.cfg\n\ngo mod tidy\n\n# build\nmake\n```\n\n## 测试用例\n\n在原来的v1.6.7分支上，修改 个测试用例，新增 个测试用例\n\n### nacos_client_test.go\n\n**测试用例一：**TestNacosClient_getAllServiceNames\n- 预期结果：获取Nacos服务端里注册的所有服务名并存入AllDoms\n- 实际结果：成功获取Nacos服务端里注册的所有服务名并存入AllDoms\n```\nfunc TestNacosClient_getAllServiceNames(t *testing.T) {\n\tGrpcClient = grpcClientTest\n\tnacosClientTest.getAllServiceNames()\n\n\tAllDoms.DLock.Lock()\n\tdefer AllDoms.DLock.Unlock()\n\tdoms := GrpcClient.GetAllServicesInfo()\n\n\tfor _, dom := range doms {\n\t\tassert.True(t, AllDoms.Data[dom])\n\t}\n\tif len(doms) == len(AllDoms.Data) {\n\t\tt.Log(\"Get all serviceName from servers passed\")\n\t} else {\n\t\tt.Error(\"Get all serviceName from servers error\")\n\t}\n}\n```\n<div align=\"center\">\n    <img src=\"/img/coredns-test-report/test1.png\"></img>\n</div>\n\n**测试用例二：**TestNacosClient_getDomNow\n- 预期结果：获取Nacos服务端里某个服务的具体信息并存入缓存中\n- 实际结果：成功获取Nacos服务端里某个服务的具体信息并存入缓存中\n```\nfunc TestNacosClient_getServiceNow(t *testing.T) {\n\tGrpcClient = grpcClientTest\n\tnacosClientTest.getAllServiceNames()\n\ttestServiceMap := NewConcurrentMap()\n\n\tfor serviceName, _ := range AllDoms.Data {\n\t\tnacosClientTest.getServiceNow(serviceName, &nacosClientTest.serviceMap, \"0.0.0.0\")\n\t}\n\n\tfor serviceName, _ := range AllDoms.Data {\n\t\ttestService := GrpcClient.GetService(serviceName)\n\t\ttestServiceMap.Set(serviceName, testService)\n\t\ts, ok := nacosClientTest.GetDomainCache().Get(serviceName)\n\t\tassert.True(t, ok)\n\t\tservice := s.(model.Service)\n\t\tassert.True(t, len(service.Hosts) == len(testService.Hosts))\n\t}\n\n\tif len(nacosClientTest.GetDomainCache()) == len(testServiceMap) {\n\t\tt.Log(\"Get all servicesInfo from servers passed\")\n\t} else {\n\t\tt.Error(\"Get all servicesInfo from servers error\")\n\t}\n}\n```\n<div align=\"center\">\n    <img src=\"/img/coredns-test-report/test2.png\"></img>\n</div>\n\n### nacos_grpc_client_test.go\n\n**测试用例三：**TestGetAllServicesInfo\n- 预期结果：gRPC请求获取Nacos服务端里注册的所有服务名\n- 实际结果：成功通过gRPC请求获取Nacos服务端里注册的所有服务名\n```\nfunc TestGetAllServicesInfo(t *testing.T) {\n\tservices := grpcClientTest.GetAllServicesInfo()\n\tif len(services) > 0 {\n\t\tt.Log(\"GrpcClient get all servicesInfo passed\")\n\t} else {\n\t\tt.Log(\"GrpcClient get all servicesInfo empty\")\n\t}\n}\n```\n<div align=\"center\">\n    <img src=\"/img/coredns-test-report/test3.png\"></img>\n</div>\n\n\n**测试用例四：**TestGetService\n- 预期结果：gRPC请求获取Nacos服务端某个服务的具体信息\n- 实际结果：成功通过gRPC请求获取Nacos服务端某个服务的具体信息\n```\nfunc TestGetService(t *testing.T) {\n\tservices := grpcClientTest.GetAllServicesInfo()\n\tserviceMap := NewConcurrentMap()\n\tfor _, serviceName := range services {\n\t\tservice := grpcClientTest.GetService(serviceName)\n\t\tif assert.NotNil(t, service) {\n\t\t\tserviceMap.Set(serviceName, service)\n\t\t}\n\t}\n\tif serviceMap.Count() == len(services) {\n\t\tt.Log(\"GrpcClient get service passed\")\n\t} else {\n\t\tt.Error(\"GrpcClient get service error\")\n\t}\n}\n```\n<div align=\"center\">\n    <img src=\"/img/coredns-test-report/test4.png\"></img>\n</div>\n\n\n**测试用例五：**TestSubscribe\n- 预期结果：gRPC订阅Nacos服务端某个服务\n- 实际结果：成功通过gRPC订阅Nacos服务端某个服务\n```\nfunc TestSubscribe(t *testing.T) {\n\tdoms := grpcClientTest.GetAllServicesInfo()\n\tfor _, dom := range doms {\n\t\terr := grpcClientTest.Subscribe(dom)\n\t\tif err != nil {\n\t\t\tt.Error(\"GrpcClient subscribe service error\")\n\t\t\treturn\n\t\t}\n\t}\n\tt.Log(\"GrpcClient subscribe service passed\")\n}\n```\n<div align=\"center\">\n    <img src=\"/img/coredns-test-report/test5.png\"></img>\n</div>\n\n**测试用例六：**TestCallback\n- 预期结果：当Nacos服务端服务发生改变时，通过回调函数更新客户端的服务数据\n- 实际结果：当Nacos服务端服务发生改变时，成功通过回调函数更新客户端的服务数据\n```\nfunc TestCallback(t *testing.T) {\n    services := model.Service{\n            ......\n        }\n    \n    grpcClientTest.nacosClient.GetDomainCache().Set(\"demo.go\", services)\n\n    newServices := model.Service{\n            ······\n        }\n\n    grpcClientTest.Callback(newServices.Hosts, nil)\n\n\ts, _ := grpcClientTest.nacosClient.GetDomainCache().Get(\"demo.go\")\n\n\tupdateServices := s.(model.Service)\n\n\tif len(newServices.Hosts) == len(updateServices.Hosts) {\n\t\tt.Log(\"GrpcClient Service SubscribeCallback passed\")\n\t} else {\n\t\tt.Error(\"GrpcClient Service SubscribeCallback error\")\n\t}\n}\n```\n<div align=\"center\">\n    <img src=\"/img/coredns-test-report/test6.png\"></img>\n</div>\n\n### setup_test.go\n\n**测试用例七：**TestNacosParse\n- 预期结果：通过配置文件配置Nacos服务器的 NamespaceId 和 ip地址和端口 .\n- 实际结果：成功配置Nacos服务器的 NamespaceId 和 ip地址和端口 .\n```\nsetup_test.go: 24 - 63 行\nfunc TestNacosParse(t *testing.T) {\n    ·······\n}\n```\n<div align=\"center\">\n    <img src=\"/img/coredns-test-report/test7.png\"></img>\n</div>\n\n### 所有测试用例运行结果\n``` \n=== RUN   TestDnsCache_Updated\n    dns_cache_test.go:26: Out of date test is passed\n    dns_cache_test.go:32: Updated is passed.\n--- PASS: TestDnsCache_Updated (0.00s)\n=== RUN   TestGet\n    httpclient_test.go:40: Success to test http client get\n--- PASS: TestGet (0.00s)\n=== RUN   TestNacosClient_GetDomain\n--- PASS: TestNacosClient_GetDomain (0.00s)\n=== RUN   TestNacosClient_getAllServiceNames\n    nacos_client_test.go:75: Get all serviceName from servers passed\n--- PASS: TestNacosClient_getAllServiceNames (0.05s)\n=== RUN   TestNacosClient_getServiceNow\n    nacos_client_test.go:100: Get all servicesInfo from servers passed\n--- PASS: TestNacosClient_getServiceNow (2.80s)\n=== RUN   TestDomain_SrvInstances\n    nacos_domain_test.go:30: Domain.srvInstances weight passed.\n    nacos_domain_test.go:37: Domain.srvInstances valid passed.\n--- PASS: TestDomain_SrvInstances (0.00s)\n=== RUN   TestGetAllServicesInfo\n    nacos_grpc_client_test.go:23: GrpcClient get all servicesInfo passed\n--- PASS: TestGetAllServicesInfo (0.03s)\n=== RUN   TestGetService\n    nacos_grpc_client_test.go:39: GrpcClient get service passed\n--- PASS: TestGetService (0.03s)\n=== RUN   TestSubscribe\n    nacos_grpc_client_test.go:54: GrpcClient subscribe service passed\n--- PASS: TestSubscribe (0.03s)\n=== RUN   TestCallback\n    nacos_grpc_client_test.go:181: GrpcClient Service SubscribeCallback passed\n--- PASS: TestCallback (0.00s)\n=== RUN   TestServerManager_NextServer\n    server_manager_test.go:29: ServerManager.NextServer test is passed.\n--- PASS: TestServerManager_NextServer (0.00s)\n=== RUN   TestServerManager_RefreshServerListIfNeed\n    server_manager_test.go:39: ServerManager.RefreshServerListIfNeed test is passed.\n--- PASS: TestServerManager_RefreshServerListIfNeed (0.00s)\n=== RUN   TestNacosParse\ninit nacos plugin...\ninit nacos client.\n2022/09/15 16:05:03 [INFO] logDir:<C:\\Users\\Yu\\logs>   cacheDir:<C:\\Users\\Yu\\nacos-go-client-cache>\n    setup_test.go:54: Passed\n--- PASS: TestNacosParse (1.18s)\n=== RUN   TestUDPServer_StartServer\n    udp_server_test.go:43: Udp server test passed.\n--- PASS: TestUDPServer_StartServer (0.02s)\n=== RUN   TestTryDecompressData\n    util_and_comms_test.go:32: Gzip test is passed.\n--- PASS: TestTryDecompressData (0.00s)\nPASS\nok  \tnacos-coredns-plugin/nacos\t4.624s\n```\n\n\n## 压力测试\n\n1.6.7版本：\n\n### 50000\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              0.200666 sec\n  RTT min:              0.000063 sec\n  RTT average:          0.012621 sec\n  RTT std deviation:    0.010875 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Sat Sep 17 09:49:54 2022\n  Finished at:          Sat Sep 17 09:50:35 2022\n  Ran for:              41.475793 seconds\n\n  Queries per second:   1205.522460 qps\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              0.093154 sec\n  RTT min:              0.000066 sec\n  RTT average:          0.010944 sec\n  RTT std deviation:    0.005928 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Sat Sep 17 09:50:58 2022\n  Finished at:          Sat Sep 17 09:51:31 2022\n  Ran for:              33.176316 seconds\n\n  Queries per second:   1507.099221 qps\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              0.127623 sec\n  RTT min:              0.000097 sec\n  RTT average:          0.013324 sec\n  RTT std deviation:    0.008517 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Sat Sep 17 09:51:56 2022\n  Finished at:          Sat Sep 17 09:52:33 2022\n  Ran for:              36.864735 seconds\n\n  Queries per second:   1356.309763 qps\n\n### 500000\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         500000 queries\n  Queries completed:    499767 queries\n  Queries lost:         233 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              1578.041083 sec\n  RTT min:              0.000016 sec\n  RTT average:          0.036432 sec\n  RTT std deviation:    0.027122 sec\n  RTT out of range:     18 queries\n\n  Percentage completed:  99.95%\n  Percentage lost:        0.05%\n\n  Started at:           Fri Sep 16 17:46:10 2022\n  Finished at:          Fri Sep 16 18:17:38 2022\n  Ran for:              1887.486418 seconds\n\n  Queries per second:   264.779124 qps\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         500000 queries\n  Queries completed:    499857 queries\n  Queries lost:         143 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              1158.509071 sec\n  RTT min:              0.000013 sec\n  RTT average:          0.036213 sec\n  RTT std deviation:    0.028113 sec\n  RTT out of range:     24 queries\n\n  Percentage completed:  99.97%\n  Percentage lost:        0.03%\n\n  Started at:           Fri Sep 16 18:19:12 2022\n  Finished at:          Fri Sep 16 18:43:54 2022\n  Ran for:              1482.300741 seconds\n\n  Queries per second:   337.216994 qps\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         500000 queries\n  Queries completed:    499692 queries\n  Queries lost:         308 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              1594.459308 sec\n  RTT min:              0.000014 sec\n  RTT average:          0.039982 sec\n  RTT std deviation:    0.034464 sec\n  RTT out of range:     23 queries\n\n  Percentage completed:  99.94%\n  Percentage lost:        0.06%\n\n  Started at:           Fri Sep 16 19:03:18 2022\n  Finished at:          Fri Sep 16 19:35:33 2022\n  Ran for:              1935.047773 seconds\n\n  Queries per second:   258.232384 qps\n\n\n### 5000000\n\n新版本：\n\n50000\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              0.052808 sec\n  RTT min:              0.000063 sec\n  RTT average:          0.009972 sec\n  RTT std deviation:    0.003560 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Fri Sep 16 22:07:58 2022\n  Finished at:          Fri Sep 16 22:08:35 2022\n  Ran for:              37.832932 seconds\n\n  Queries per second:   1321.599923 qps\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              0.066514 sec\n  RTT min:              0.000061 sec\n  RTT average:          0.007880 sec\n  RTT std deviation:    0.004037 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Fri Sep 16 22:08:52 2022\n  Finished at:          Fri Sep 16 22:09:26 2022\n  Ran for:              34.318542 seconds\n\n  Queries per second:   1456.938351 qps\n\n### 500000\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         500000 queries\n  Queries completed:    500000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              0.062532 sec\n  RTT min:              0.000032 sec\n  RTT average:          0.005649 sec\n  RTT std deviation:    0.002476 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Sat Sep 17 00:00:22 2022\n  Finished at:          Sat Sep 17 00:05:07 2022\n  Ran for:              284.796569 seconds\n\n  Queries per second:   1755.639128 qps\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         500000 queries\n  Queries completed:    500000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              0.098301 sec\n  RTT min:              0.000062 sec\n  RTT average:          0.011365 sec\n  RTT std deviation:    0.003072 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Sat Sep 17 09:03:59 2022\n  Finished at:          Sat Sep 17 09:08:55 2022\n  Ran for:              296.729115 seconds\n\n  Queries per second:   1685.038558 qps\n\n### 5000000\n\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         5000000 queries\n  Queries completed:    4999780 queries\n  Queries lost:         220 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:              3074.590919 sec\n  RTT min:              0.000022 sec\n  RTT average:          0.011621 sec\n  RTT std deviation:    0.004951 sec\n  RTT out of range:     20 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Fri Sep 16 22:10:31 2022\n  Finished at:          Fri Sep 16 23:06:25 2022\n  Ran for:              3353.644673 seconds\n\n  Queries per second:   1490.849654 qps","slug":"coredns-test-report","published":1,"updated":"2022-09-22T11:05:35.059Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdk20002i3wue5i9gf0a","content":"<h2 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h2><ul>\n<li>操作系统： Linux Ubuntu20.0.4</li>\n<li>Golang版本： 1.17</li>\n<li>Nacos版本：  2.1.0</li>\n<li>CoreDNS版本：1.9.3</li>\n</ul>\n<p><strong>Nacos-Coredns-Plugin<br>插件编译脚本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> GOPATH</span><br>cd $GOPATH/src/<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">remove codes</span><br>rm -rf coredns<br>rm -rf nacos-coredns-plugin<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">clone</span> current codes</span><br>git clone https://github.com/nacos-group/nacos-coredns-plugin.git<br>git clone https://github.com/coredns/coredns.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> coredns directory</span><br>cd $GOPATH/src/coredns<br>git checkout -b v1.9.3 v1.9.3<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">copy nacos plugin to coredns</span><br>cp -r ../nacos-coredns-plugin/nacos plugin/<br>cp -r ../nacos-coredns-plugin/forward/setup.go plugin/forward<br>cp -r ../nacos-coredns-plugin/conf conf<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">insert nacos into plugin</span><br>sed -i &#x27;/hosts/a\\\\t&quot;nacos&quot;,&#x27; core/dnsserver/zdirectives.go<br>sed -i &#x27;/coredns\\/plugin\\/hosts/a\\\\t_ &quot;github.com/coredns/coredns/plugin/nacos&quot;&#x27; core/plugin/zplugin.go<br>sed -i &#x27;/hosts:hosts/a\\nacos:nacos&#x27; plugin.cfg<br><br>go mod tidy<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">build</span><br>make<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h2><p>在原来的v1.6.7分支上，修改 个测试用例，新增 个测试用例</p>\n<h3 id=\"nacos-client-test-go\"><a href=\"#nacos-client-test-go\" class=\"headerlink\" title=\"nacos_client_test.go\"></a>nacos_client_test.go</h3><p><strong>测试用例一：</strong>TestNacosClient_getAllServiceNames</p>\n<ul>\n<li>预期结果：获取Nacos服务端里注册的所有服务名并存入AllDoms</li>\n<li>实际结果：成功获取Nacos服务端里注册的所有服务名并存入AllDoms<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">func <span class=\"hljs-built_in\">TestNacosClient_getAllServiceNames</span>(t *testing.T) &#123;<br>\tGrpcClient = grpcClientTest<br>\tnacosClientTest<span class=\"hljs-selector-class\">.getAllServiceNames</span>()<br><br>\tAllDoms<span class=\"hljs-selector-class\">.DLock</span><span class=\"hljs-selector-class\">.Lock</span>()<br>\tdefer AllDoms<span class=\"hljs-selector-class\">.DLock</span><span class=\"hljs-selector-class\">.Unlock</span>()<br>\tdoms := GrpcClient<span class=\"hljs-selector-class\">.GetAllServicesInfo</span>()<br><br>\t<span class=\"hljs-keyword\">for</span> _, dom := range doms &#123;<br>\t\tassert<span class=\"hljs-selector-class\">.True</span>(t, AllDoms<span class=\"hljs-selector-class\">.Data</span><span class=\"hljs-selector-attr\">[dom]</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(doms) == <span class=\"hljs-built_in\">len</span>(AllDoms.Data) &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Log</span>(<span class=\"hljs-string\">&quot;Get all serviceName from servers passed&quot;</span>)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Error</span>(<span class=\"hljs-string\">&quot;Get all serviceName from servers error&quot;</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<div align=\"center\">\n  <img src=\"/img/coredns-test-report/test1.png\"></img>\n</div></li>\n</ul>\n<p><strong>测试用例二：</strong>TestNacosClient_getDomNow</p>\n<ul>\n<li>预期结果：获取Nacos服务端里某个服务的具体信息并存入缓存中</li>\n<li>实际结果：成功获取Nacos服务端里某个服务的具体信息并存入缓存中<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">func <span class=\"hljs-built_in\">TestNacosClient_getServiceNow</span>(t *testing.T) &#123;<br>\tGrpcClient = grpcClientTest<br>\tnacosClientTest<span class=\"hljs-selector-class\">.getAllServiceNames</span>()<br>\ttestServiceMap := <span class=\"hljs-built_in\">NewConcurrentMap</span>()<br><br>\t<span class=\"hljs-keyword\">for</span> serviceName, _ := range AllDoms<span class=\"hljs-selector-class\">.Data</span> &#123;<br>\t\tnacosClientTest<span class=\"hljs-selector-class\">.getServiceNow</span>(serviceName, &amp;nacosClientTest<span class=\"hljs-selector-class\">.serviceMap</span>, <span class=\"hljs-string\">&quot;0.0.0.0&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> serviceName, _ := range AllDoms<span class=\"hljs-selector-class\">.Data</span> &#123;<br>\t\ttestService := GrpcClient<span class=\"hljs-selector-class\">.GetService</span>(serviceName)<br>\t\ttestServiceMap<span class=\"hljs-selector-class\">.Set</span>(serviceName, testService)<br>\t\ts, ok := nacosClientTest<span class=\"hljs-selector-class\">.GetDomainCache</span>()<span class=\"hljs-selector-class\">.Get</span>(serviceName)<br>\t\tassert<span class=\"hljs-selector-class\">.True</span>(t, ok)<br>\t\tservice := s.(model.Service)<br>\t\tassert<span class=\"hljs-selector-class\">.True</span>(t, <span class=\"hljs-built_in\">len</span>(service.Hosts) == <span class=\"hljs-built_in\">len</span>(testService.Hosts))<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(nacosClientTest<span class=\"hljs-selector-class\">.GetDomainCache</span>()) == <span class=\"hljs-built_in\">len</span>(testServiceMap) &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Log</span>(<span class=\"hljs-string\">&quot;Get all servicesInfo from servers passed&quot;</span>)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Error</span>(<span class=\"hljs-string\">&quot;Get all servicesInfo from servers error&quot;</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<div align=\"center\">\n  <img src=\"/img/coredns-test-report/test2.png\"></img>\n</div></li>\n</ul>\n<h3 id=\"nacos-grpc-client-test-go\"><a href=\"#nacos-grpc-client-test-go\" class=\"headerlink\" title=\"nacos_grpc_client_test.go\"></a>nacos_grpc_client_test.go</h3><p><strong>测试用例三：</strong>TestGetAllServicesInfo</p>\n<ul>\n<li>预期结果：gRPC请求获取Nacos服务端里注册的所有服务名</li>\n<li>实际结果：成功通过gRPC请求获取Nacos服务端里注册的所有服务名<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">func <span class=\"hljs-built_in\">TestGetAllServicesInfo</span>(t *testing.T) &#123;<br>\tservices := grpcClientTest<span class=\"hljs-selector-class\">.GetAllServicesInfo</span>()<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(services) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Log</span>(<span class=\"hljs-string\">&quot;GrpcClient get all servicesInfo passed&quot;</span>)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Log</span>(<span class=\"hljs-string\">&quot;GrpcClient get all servicesInfo empty&quot;</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<div align=\"center\">\n  <img src=\"/img/coredns-test-report/test3.png\"></img>\n</div></li>\n</ul>\n<p><strong>测试用例四：</strong>TestGetService</p>\n<ul>\n<li>预期结果：gRPC请求获取Nacos服务端某个服务的具体信息</li>\n<li>实际结果：成功通过gRPC请求获取Nacos服务端某个服务的具体信息<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">func <span class=\"hljs-built_in\">TestGetService</span>(t *testing.T) &#123;<br>\tservices := grpcClientTest<span class=\"hljs-selector-class\">.GetAllServicesInfo</span>()<br>\tserviceMap := <span class=\"hljs-built_in\">NewConcurrentMap</span>()<br>\t<span class=\"hljs-keyword\">for</span> _, serviceName := range services &#123;<br>\t\tservice := grpcClientTest<span class=\"hljs-selector-class\">.GetService</span>(serviceName)<br>\t\t<span class=\"hljs-keyword\">if</span> assert<span class=\"hljs-selector-class\">.NotNil</span>(t, service) &#123;<br>\t\t\tserviceMap<span class=\"hljs-selector-class\">.Set</span>(serviceName, service)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> serviceMap<span class=\"hljs-selector-class\">.Count</span>() == <span class=\"hljs-built_in\">len</span>(services) &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Log</span>(<span class=\"hljs-string\">&quot;GrpcClient get service passed&quot;</span>)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Error</span>(<span class=\"hljs-string\">&quot;GrpcClient get service error&quot;</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<div align=\"center\">\n  <img src=\"/img/coredns-test-report/test4.png\"></img>\n</div></li>\n</ul>\n<p><strong>测试用例五：</strong>TestSubscribe</p>\n<ul>\n<li>预期结果：gRPC订阅Nacos服务端某个服务</li>\n<li>实际结果：成功通过gRPC订阅Nacos服务端某个服务<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestSubscribe</span><span class=\"hljs-params\">(t *testing.T)</span></span> &#123;<br>\tdoms := grpcClientTest.GetAllServicesInfo()<br>\t<span class=\"hljs-keyword\">for</span> _, dom := <span class=\"hljs-keyword\">range</span> doms &#123;<br>\t\terr := grpcClientTest.Subscribe(dom)<br>\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tt.Error(<span class=\"hljs-string\">&quot;GrpcClient subscribe service error&quot;</span>)<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t&#125;<br>\tt.Log(<span class=\"hljs-string\">&quot;GrpcClient subscribe service passed&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<div align=\"center\">\n  <img src=\"/img/coredns-test-report/test5.png\"></img>\n</div></li>\n</ul>\n<p><strong>测试用例六：</strong>TestCallback</p>\n<ul>\n<li>预期结果：当Nacos服务端服务发生改变时，通过回调函数更新客户端的服务数据</li>\n<li>实际结果：当Nacos服务端服务发生改变时，成功通过回调函数更新客户端的服务数据<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs roboconf\">func TestCallback(t *testing.T) &#123;<br>    <span class=\"hljs-attribute\">services</span> := model<span class=\"hljs-variable\">.Service</span>&#123;<br>            ......<br>        &#125;<br>    <br>    grpcClientTest<span class=\"hljs-variable\">.nacosClient</span><span class=\"hljs-variable\">.GetDomainCache</span>()<span class=\"hljs-variable\">.Set</span>(&quot;demo<span class=\"hljs-variable\">.go</span>&quot;, services)<br><br>    newServices := model<span class=\"hljs-variable\">.Service</span>&#123;<br>            ······<br>        &#125;<br><br>    grpcClientTest<span class=\"hljs-variable\">.Callback</span>(newServices<span class=\"hljs-variable\">.Hosts</span>, nil)<br><br>\ts, _ := grpcClientTest<span class=\"hljs-variable\">.nacosClient</span><span class=\"hljs-variable\">.GetDomainCache</span>()<span class=\"hljs-variable\">.Get</span>(&quot;demo<span class=\"hljs-variable\">.go</span>&quot;)<br><br>\tupdateServices := s.(model<span class=\"hljs-variable\">.Service</span>)<br><br>\tif len(newServices<span class=\"hljs-variable\">.Hosts</span>) == len(updateServices<span class=\"hljs-variable\">.Hosts</span>) &#123;<br>\t\tt<span class=\"hljs-variable\">.Log</span>(&quot;GrpcClient Service SubscribeCallback passed&quot;)<br>\t&#125; else &#123;<br>\t\tt<span class=\"hljs-variable\">.Error</span>(&quot;GrpcClient Service SubscribeCallback error&quot;)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<div align=\"center\">\n  <img src=\"/img/coredns-test-report/test6.png\"></img>\n</div></li>\n</ul>\n<h3 id=\"setup-test-go\"><a href=\"#setup-test-go\" class=\"headerlink\" title=\"setup_test.go\"></a>setup_test.go</h3><p><strong>测试用例七：</strong>TestNacosParse</p>\n<ul>\n<li>预期结果：通过配置文件配置Nacos服务器的 NamespaceId 和 ip地址和端口 .</li>\n<li>实际结果：成功配置Nacos服务器的 NamespaceId 和 ip地址和端口 .<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">setup_test.<span class=\"hljs-keyword\">go</span>: <span class=\"hljs-number\">24</span> - <span class=\"hljs-number\">63</span> 行<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestNacosParse</span><span class=\"hljs-params\">(t *testing.T)</span></span> &#123;<br>    ·······<br>&#125;<br></code></pre></td></tr></table></figure>\n<div align=\"center\">\n  <img src=\"/img/coredns-test-report/test7.png\"></img>\n</div></li>\n</ul>\n<h3 id=\"所有测试用例运行结果\"><a href=\"#所有测试用例运行结果\" class=\"headerlink\" title=\"所有测试用例运行结果\"></a>所有测试用例运行结果</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">=== <span class=\"hljs-built_in\">RUN</span>   TestDnsCache_Updated<br>    dns_cache_test.go:26: Out of date test is passed<br>    dns_cache_test.go:32: Updated is passed.<br>--- PASS: TestDnsCache_Updated (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestGet<br>    httpclient_test.go:40: Success <span class=\"hljs-keyword\">to</span> test http<span class=\"hljs-built_in\"> client </span><span class=\"hljs-built_in\">get</span><br>--- PASS: TestGet (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosClient_GetDomain<br>--- PASS: TestNacosClient_GetDomain (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosClient_getAllServiceNames<br>    nacos_client_test.go:75: <span class=\"hljs-built_in\">Get</span> all serviceName <span class=\"hljs-keyword\">from</span> servers passed<br>--- PASS: TestNacosClient_getAllServiceNames (0.05s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosClient_getServiceNow<br>    nacos_client_test.go:100: <span class=\"hljs-built_in\">Get</span> all servicesInfo <span class=\"hljs-keyword\">from</span> servers passed<br>--- PASS: TestNacosClient_getServiceNow (2.80s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestDomain_SrvInstances<br>    nacos_domain_test.go:30: Domain.srvInstances weight passed.<br>    nacos_domain_test.go:37: Domain.srvInstances valid passed.<br>--- PASS: TestDomain_SrvInstances (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestGetAllServicesInfo<br>    nacos_grpc_client_test.go:23: GrpcClient <span class=\"hljs-built_in\">get</span> all servicesInfo passed<br>--- PASS: TestGetAllServicesInfo (0.03s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestGetService<br>    nacos_grpc_client_test.go:39: GrpcClient <span class=\"hljs-built_in\">get</span><span class=\"hljs-built_in\"> service </span>passed<br>--- PASS: TestGetService (0.03s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestSubscribe<br>    nacos_grpc_client_test.go:54: GrpcClient subscribe<span class=\"hljs-built_in\"> service </span>passed<br>--- PASS: TestSubscribe (0.03s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestCallback<br>    nacos_grpc_client_test.go:181: GrpcClient<span class=\"hljs-built_in\"> Service </span>SubscribeCallback passed<br>--- PASS: TestCallback (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestServerManager_NextServer<br>    server_manager_test.go:29: ServerManager.NextServer test is passed.<br>--- PASS: TestServerManager_NextServer (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestServerManager_RefreshServerListIfNeed<br>    server_manager_test.go:39: ServerManager.RefreshServerListIfNeed test is passed.<br>--- PASS: TestServerManager_RefreshServerListIfNeed (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosParse<br>init nacos plugin<span class=\"hljs-built_in\">..</span>.<br>init nacos client.<br>2022/09/15 16:05:03 [<span class=\"hljs-built_in\">INFO</span>] logDir:&lt;C:\\Users\\Yu\\logs&gt;   cacheDir:&lt;C:\\Users\\Yu\\nacos-go-client-cache&gt;<br>    setup_test.go:54: Passed<br>--- PASS: TestNacosParse (1.18s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestUDPServer_StartServer<br>    udp_server_test.go:43: Udp<span class=\"hljs-built_in\"> server </span>test passed.<br>--- PASS: TestUDPServer_StartServer (0.02s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestTryDecompressData<br>    util_and_comms_test.go:32: Gzip test is passed.<br>--- PASS: TestTryDecompressData (0.00s)<br>PASS<br>ok  \tnacos-coredns-plugin/nacos\t4.624s<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h2><p>1.6.7版本：</p>\n<h3 id=\"50000\"><a href=\"#50000\" class=\"headerlink\" title=\"50000\"></a>50000</h3><p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         50000 queries<br>  Queries completed:    50000 queries<br>  Queries lost:         0 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              0.200666 sec<br>  RTT min:              0.000063 sec<br>  RTT average:          0.012621 sec<br>  RTT std deviation:    0.010875 sec<br>  RTT out of range:     0 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Sat Sep 17 09:49:54 2022<br>  Finished at:          Sat Sep 17 09:50:35 2022<br>  Ran for:              41.475793 seconds</p>\n<p>  Queries per second:   1205.522460 qps</p>\n<p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         50000 queries<br>  Queries completed:    50000 queries<br>  Queries lost:         0 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              0.093154 sec<br>  RTT min:              0.000066 sec<br>  RTT average:          0.010944 sec<br>  RTT std deviation:    0.005928 sec<br>  RTT out of range:     0 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Sat Sep 17 09:50:58 2022<br>  Finished at:          Sat Sep 17 09:51:31 2022<br>  Ran for:              33.176316 seconds</p>\n<p>  Queries per second:   1507.099221 qps</p>\n<p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         50000 queries<br>  Queries completed:    50000 queries<br>  Queries lost:         0 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              0.127623 sec<br>  RTT min:              0.000097 sec<br>  RTT average:          0.013324 sec<br>  RTT std deviation:    0.008517 sec<br>  RTT out of range:     0 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Sat Sep 17 09:51:56 2022<br>  Finished at:          Sat Sep 17 09:52:33 2022<br>  Ran for:              36.864735 seconds</p>\n<p>  Queries per second:   1356.309763 qps</p>\n<h3 id=\"500000\"><a href=\"#500000\" class=\"headerlink\" title=\"500000\"></a>500000</h3><p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         500000 queries<br>  Queries completed:    499767 queries<br>  Queries lost:         233 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              1578.041083 sec<br>  RTT min:              0.000016 sec<br>  RTT average:          0.036432 sec<br>  RTT std deviation:    0.027122 sec<br>  RTT out of range:     18 queries</p>\n<p>  Percentage completed:  99.95%<br>  Percentage lost:        0.05%</p>\n<p>  Started at:           Fri Sep 16 17:46:10 2022<br>  Finished at:          Fri Sep 16 18:17:38 2022<br>  Ran for:              1887.486418 seconds</p>\n<p>  Queries per second:   264.779124 qps</p>\n<p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         500000 queries<br>  Queries completed:    499857 queries<br>  Queries lost:         143 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              1158.509071 sec<br>  RTT min:              0.000013 sec<br>  RTT average:          0.036213 sec<br>  RTT std deviation:    0.028113 sec<br>  RTT out of range:     24 queries</p>\n<p>  Percentage completed:  99.97%<br>  Percentage lost:        0.03%</p>\n<p>  Started at:           Fri Sep 16 18:19:12 2022<br>  Finished at:          Fri Sep 16 18:43:54 2022<br>  Ran for:              1482.300741 seconds</p>\n<p>  Queries per second:   337.216994 qps</p>\n<p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         500000 queries<br>  Queries completed:    499692 queries<br>  Queries lost:         308 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              1594.459308 sec<br>  RTT min:              0.000014 sec<br>  RTT average:          0.039982 sec<br>  RTT std deviation:    0.034464 sec<br>  RTT out of range:     23 queries</p>\n<p>  Percentage completed:  99.94%<br>  Percentage lost:        0.06%</p>\n<p>  Started at:           Fri Sep 16 19:03:18 2022<br>  Finished at:          Fri Sep 16 19:35:33 2022<br>  Ran for:              1935.047773 seconds</p>\n<p>  Queries per second:   258.232384 qps</p>\n<h3 id=\"5000000\"><a href=\"#5000000\" class=\"headerlink\" title=\"5000000\"></a>5000000</h3><p>新版本：</p>\n<p>50000<br>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         50000 queries<br>  Queries completed:    50000 queries<br>  Queries lost:         0 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              0.052808 sec<br>  RTT min:              0.000063 sec<br>  RTT average:          0.009972 sec<br>  RTT std deviation:    0.003560 sec<br>  RTT out of range:     0 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Fri Sep 16 22:07:58 2022<br>  Finished at:          Fri Sep 16 22:08:35 2022<br>  Ran for:              37.832932 seconds</p>\n<p>  Queries per second:   1321.599923 qps</p>\n<p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         50000 queries<br>  Queries completed:    50000 queries<br>  Queries lost:         0 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              0.066514 sec<br>  RTT min:              0.000061 sec<br>  RTT average:          0.007880 sec<br>  RTT std deviation:    0.004037 sec<br>  RTT out of range:     0 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Fri Sep 16 22:08:52 2022<br>  Finished at:          Fri Sep 16 22:09:26 2022<br>  Ran for:              34.318542 seconds</p>\n<p>  Queries per second:   1456.938351 qps</p>\n<h3 id=\"500000-1\"><a href=\"#500000-1\" class=\"headerlink\" title=\"500000\"></a>500000</h3><p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         500000 queries<br>  Queries completed:    500000 queries<br>  Queries lost:         0 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              0.062532 sec<br>  RTT min:              0.000032 sec<br>  RTT average:          0.005649 sec<br>  RTT std deviation:    0.002476 sec<br>  RTT out of range:     0 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Sat Sep 17 00:00:22 2022<br>  Finished at:          Sat Sep 17 00:05:07 2022<br>  Ran for:              284.796569 seconds</p>\n<p>  Queries per second:   1755.639128 qps</p>\n<p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         500000 queries<br>  Queries completed:    500000 queries<br>  Queries lost:         0 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              0.098301 sec<br>  RTT min:              0.000062 sec<br>  RTT average:          0.011365 sec<br>  RTT std deviation:    0.003072 sec<br>  RTT out of range:     0 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Sat Sep 17 09:03:59 2022<br>  Finished at:          Sat Sep 17 09:08:55 2022<br>  Ran for:              296.729115 seconds</p>\n<p>  Queries per second:   1685.038558 qps</p>\n<h3 id=\"5000000-1\"><a href=\"#5000000-1\" class=\"headerlink\" title=\"5000000\"></a>5000000</h3><p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         5000000 queries<br>  Queries completed:    4999780 queries<br>  Queries lost:         220 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              3074.590919 sec<br>  RTT min:              0.000022 sec<br>  RTT average:          0.011621 sec<br>  RTT std deviation:    0.004951 sec<br>  RTT out of range:     20 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Fri Sep 16 22:10:31 2022<br>  Finished at:          Fri Sep 16 23:06:25 2022<br>  Ran for:              3353.644673 seconds</p>\n<p>  Queries per second:   1490.849654 qps</p>\n","site":{"data":{}},"wordcount":11657,"excerpt":"","more":"<h2 id=\"测试环境\"><a href=\"#测试环境\" class=\"headerlink\" title=\"测试环境\"></a>测试环境</h2><ul>\n<li>操作系统： Linux Ubuntu20.0.4</li>\n<li>Golang版本： 1.17</li>\n<li>Nacos版本：  2.1.0</li>\n<li>CoreDNS版本：1.9.3</li>\n</ul>\n<p><strong>Nacos-Coredns-Plugin<br>插件编译脚本</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> GOPATH</span><br>cd $GOPATH/src/<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">remove codes</span><br>rm -rf coredns<br>rm -rf nacos-coredns-plugin<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">clone</span> current codes</span><br>git clone https://github.com/nacos-group/nacos-coredns-plugin.git<br>git clone https://github.com/coredns/coredns.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> coredns directory</span><br>cd $GOPATH/src/coredns<br>git checkout -b v1.9.3 v1.9.3<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">copy nacos plugin to coredns</span><br>cp -r ../nacos-coredns-plugin/nacos plugin/<br>cp -r ../nacos-coredns-plugin/forward/setup.go plugin/forward<br>cp -r ../nacos-coredns-plugin/conf conf<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">insert nacos into plugin</span><br>sed -i &#x27;/hosts/a\\\\t&quot;nacos&quot;,&#x27; core/dnsserver/zdirectives.go<br>sed -i &#x27;/coredns\\/plugin\\/hosts/a\\\\t_ &quot;github.com/coredns/coredns/plugin/nacos&quot;&#x27; core/plugin/zplugin.go<br>sed -i &#x27;/hosts:hosts/a\\nacos:nacos&#x27; plugin.cfg<br><br>go mod tidy<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">build</span><br>make<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h2><p>在原来的v1.6.7分支上，修改 个测试用例，新增 个测试用例</p>\n<h3 id=\"nacos-client-test-go\"><a href=\"#nacos-client-test-go\" class=\"headerlink\" title=\"nacos_client_test.go\"></a>nacos_client_test.go</h3><p><strong>测试用例一：</strong>TestNacosClient_getAllServiceNames</p>\n<ul>\n<li>预期结果：获取Nacos服务端里注册的所有服务名并存入AllDoms</li>\n<li>实际结果：成功获取Nacos服务端里注册的所有服务名并存入AllDoms<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">func <span class=\"hljs-built_in\">TestNacosClient_getAllServiceNames</span>(t *testing.T) &#123;<br>\tGrpcClient = grpcClientTest<br>\tnacosClientTest<span class=\"hljs-selector-class\">.getAllServiceNames</span>()<br><br>\tAllDoms<span class=\"hljs-selector-class\">.DLock</span><span class=\"hljs-selector-class\">.Lock</span>()<br>\tdefer AllDoms<span class=\"hljs-selector-class\">.DLock</span><span class=\"hljs-selector-class\">.Unlock</span>()<br>\tdoms := GrpcClient<span class=\"hljs-selector-class\">.GetAllServicesInfo</span>()<br><br>\t<span class=\"hljs-keyword\">for</span> _, dom := range doms &#123;<br>\t\tassert<span class=\"hljs-selector-class\">.True</span>(t, AllDoms<span class=\"hljs-selector-class\">.Data</span><span class=\"hljs-selector-attr\">[dom]</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(doms) == <span class=\"hljs-built_in\">len</span>(AllDoms.Data) &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Log</span>(<span class=\"hljs-string\">&quot;Get all serviceName from servers passed&quot;</span>)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Error</span>(<span class=\"hljs-string\">&quot;Get all serviceName from servers error&quot;</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<div align=\"center\">\n  <img src=\"/img/coredns-test-report/test1.png\"></img>\n</div></li>\n</ul>\n<p><strong>测试用例二：</strong>TestNacosClient_getDomNow</p>\n<ul>\n<li>预期结果：获取Nacos服务端里某个服务的具体信息并存入缓存中</li>\n<li>实际结果：成功获取Nacos服务端里某个服务的具体信息并存入缓存中<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">func <span class=\"hljs-built_in\">TestNacosClient_getServiceNow</span>(t *testing.T) &#123;<br>\tGrpcClient = grpcClientTest<br>\tnacosClientTest<span class=\"hljs-selector-class\">.getAllServiceNames</span>()<br>\ttestServiceMap := <span class=\"hljs-built_in\">NewConcurrentMap</span>()<br><br>\t<span class=\"hljs-keyword\">for</span> serviceName, _ := range AllDoms<span class=\"hljs-selector-class\">.Data</span> &#123;<br>\t\tnacosClientTest<span class=\"hljs-selector-class\">.getServiceNow</span>(serviceName, &amp;nacosClientTest<span class=\"hljs-selector-class\">.serviceMap</span>, <span class=\"hljs-string\">&quot;0.0.0.0&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> serviceName, _ := range AllDoms<span class=\"hljs-selector-class\">.Data</span> &#123;<br>\t\ttestService := GrpcClient<span class=\"hljs-selector-class\">.GetService</span>(serviceName)<br>\t\ttestServiceMap<span class=\"hljs-selector-class\">.Set</span>(serviceName, testService)<br>\t\ts, ok := nacosClientTest<span class=\"hljs-selector-class\">.GetDomainCache</span>()<span class=\"hljs-selector-class\">.Get</span>(serviceName)<br>\t\tassert<span class=\"hljs-selector-class\">.True</span>(t, ok)<br>\t\tservice := s.(model.Service)<br>\t\tassert<span class=\"hljs-selector-class\">.True</span>(t, <span class=\"hljs-built_in\">len</span>(service.Hosts) == <span class=\"hljs-built_in\">len</span>(testService.Hosts))<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(nacosClientTest<span class=\"hljs-selector-class\">.GetDomainCache</span>()) == <span class=\"hljs-built_in\">len</span>(testServiceMap) &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Log</span>(<span class=\"hljs-string\">&quot;Get all servicesInfo from servers passed&quot;</span>)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Error</span>(<span class=\"hljs-string\">&quot;Get all servicesInfo from servers error&quot;</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<div align=\"center\">\n  <img src=\"/img/coredns-test-report/test2.png\"></img>\n</div></li>\n</ul>\n<h3 id=\"nacos-grpc-client-test-go\"><a href=\"#nacos-grpc-client-test-go\" class=\"headerlink\" title=\"nacos_grpc_client_test.go\"></a>nacos_grpc_client_test.go</h3><p><strong>测试用例三：</strong>TestGetAllServicesInfo</p>\n<ul>\n<li>预期结果：gRPC请求获取Nacos服务端里注册的所有服务名</li>\n<li>实际结果：成功通过gRPC请求获取Nacos服务端里注册的所有服务名<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">func <span class=\"hljs-built_in\">TestGetAllServicesInfo</span>(t *testing.T) &#123;<br>\tservices := grpcClientTest<span class=\"hljs-selector-class\">.GetAllServicesInfo</span>()<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(services) &gt; <span class=\"hljs-number\">0</span> &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Log</span>(<span class=\"hljs-string\">&quot;GrpcClient get all servicesInfo passed&quot;</span>)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Log</span>(<span class=\"hljs-string\">&quot;GrpcClient get all servicesInfo empty&quot;</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<div align=\"center\">\n  <img src=\"/img/coredns-test-report/test3.png\"></img>\n</div></li>\n</ul>\n<p><strong>测试用例四：</strong>TestGetService</p>\n<ul>\n<li>预期结果：gRPC请求获取Nacos服务端某个服务的具体信息</li>\n<li>实际结果：成功通过gRPC请求获取Nacos服务端某个服务的具体信息<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">func <span class=\"hljs-built_in\">TestGetService</span>(t *testing.T) &#123;<br>\tservices := grpcClientTest<span class=\"hljs-selector-class\">.GetAllServicesInfo</span>()<br>\tserviceMap := <span class=\"hljs-built_in\">NewConcurrentMap</span>()<br>\t<span class=\"hljs-keyword\">for</span> _, serviceName := range services &#123;<br>\t\tservice := grpcClientTest<span class=\"hljs-selector-class\">.GetService</span>(serviceName)<br>\t\t<span class=\"hljs-keyword\">if</span> assert<span class=\"hljs-selector-class\">.NotNil</span>(t, service) &#123;<br>\t\t\tserviceMap<span class=\"hljs-selector-class\">.Set</span>(serviceName, service)<br>\t\t&#125;<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> serviceMap<span class=\"hljs-selector-class\">.Count</span>() == <span class=\"hljs-built_in\">len</span>(services) &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Log</span>(<span class=\"hljs-string\">&quot;GrpcClient get service passed&quot;</span>)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tt<span class=\"hljs-selector-class\">.Error</span>(<span class=\"hljs-string\">&quot;GrpcClient get service error&quot;</span>)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<div align=\"center\">\n  <img src=\"/img/coredns-test-report/test4.png\"></img>\n</div></li>\n</ul>\n<p><strong>测试用例五：</strong>TestSubscribe</p>\n<ul>\n<li>预期结果：gRPC订阅Nacos服务端某个服务</li>\n<li>实际结果：成功通过gRPC订阅Nacos服务端某个服务<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestSubscribe</span><span class=\"hljs-params\">(t *testing.T)</span></span> &#123;<br>\tdoms := grpcClientTest.GetAllServicesInfo()<br>\t<span class=\"hljs-keyword\">for</span> _, dom := <span class=\"hljs-keyword\">range</span> doms &#123;<br>\t\terr := grpcClientTest.Subscribe(dom)<br>\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\tt.Error(<span class=\"hljs-string\">&quot;GrpcClient subscribe service error&quot;</span>)<br>\t\t\t<span class=\"hljs-keyword\">return</span><br>\t\t&#125;<br>\t&#125;<br>\tt.Log(<span class=\"hljs-string\">&quot;GrpcClient subscribe service passed&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<div align=\"center\">\n  <img src=\"/img/coredns-test-report/test5.png\"></img>\n</div></li>\n</ul>\n<p><strong>测试用例六：</strong>TestCallback</p>\n<ul>\n<li>预期结果：当Nacos服务端服务发生改变时，通过回调函数更新客户端的服务数据</li>\n<li>实际结果：当Nacos服务端服务发生改变时，成功通过回调函数更新客户端的服务数据<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs roboconf\">func TestCallback(t *testing.T) &#123;<br>    <span class=\"hljs-attribute\">services</span> := model<span class=\"hljs-variable\">.Service</span>&#123;<br>            ......<br>        &#125;<br>    <br>    grpcClientTest<span class=\"hljs-variable\">.nacosClient</span><span class=\"hljs-variable\">.GetDomainCache</span>()<span class=\"hljs-variable\">.Set</span>(&quot;demo<span class=\"hljs-variable\">.go</span>&quot;, services)<br><br>    newServices := model<span class=\"hljs-variable\">.Service</span>&#123;<br>            ······<br>        &#125;<br><br>    grpcClientTest<span class=\"hljs-variable\">.Callback</span>(newServices<span class=\"hljs-variable\">.Hosts</span>, nil)<br><br>\ts, _ := grpcClientTest<span class=\"hljs-variable\">.nacosClient</span><span class=\"hljs-variable\">.GetDomainCache</span>()<span class=\"hljs-variable\">.Get</span>(&quot;demo<span class=\"hljs-variable\">.go</span>&quot;)<br><br>\tupdateServices := s.(model<span class=\"hljs-variable\">.Service</span>)<br><br>\tif len(newServices<span class=\"hljs-variable\">.Hosts</span>) == len(updateServices<span class=\"hljs-variable\">.Hosts</span>) &#123;<br>\t\tt<span class=\"hljs-variable\">.Log</span>(&quot;GrpcClient Service SubscribeCallback passed&quot;)<br>\t&#125; else &#123;<br>\t\tt<span class=\"hljs-variable\">.Error</span>(&quot;GrpcClient Service SubscribeCallback error&quot;)<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<div align=\"center\">\n  <img src=\"/img/coredns-test-report/test6.png\"></img>\n</div></li>\n</ul>\n<h3 id=\"setup-test-go\"><a href=\"#setup-test-go\" class=\"headerlink\" title=\"setup_test.go\"></a>setup_test.go</h3><p><strong>测试用例七：</strong>TestNacosParse</p>\n<ul>\n<li>预期结果：通过配置文件配置Nacos服务器的 NamespaceId 和 ip地址和端口 .</li>\n<li>实际结果：成功配置Nacos服务器的 NamespaceId 和 ip地址和端口 .<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">setup_test.<span class=\"hljs-keyword\">go</span>: <span class=\"hljs-number\">24</span> - <span class=\"hljs-number\">63</span> 行<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">TestNacosParse</span><span class=\"hljs-params\">(t *testing.T)</span></span> &#123;<br>    ·······<br>&#125;<br></code></pre></td></tr></table></figure>\n<div align=\"center\">\n  <img src=\"/img/coredns-test-report/test7.png\"></img>\n</div></li>\n</ul>\n<h3 id=\"所有测试用例运行结果\"><a href=\"#所有测试用例运行结果\" class=\"headerlink\" title=\"所有测试用例运行结果\"></a>所有测试用例运行结果</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">=== <span class=\"hljs-built_in\">RUN</span>   TestDnsCache_Updated<br>    dns_cache_test.go:26: Out of date test is passed<br>    dns_cache_test.go:32: Updated is passed.<br>--- PASS: TestDnsCache_Updated (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestGet<br>    httpclient_test.go:40: Success <span class=\"hljs-keyword\">to</span> test http<span class=\"hljs-built_in\"> client </span><span class=\"hljs-built_in\">get</span><br>--- PASS: TestGet (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosClient_GetDomain<br>--- PASS: TestNacosClient_GetDomain (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosClient_getAllServiceNames<br>    nacos_client_test.go:75: <span class=\"hljs-built_in\">Get</span> all serviceName <span class=\"hljs-keyword\">from</span> servers passed<br>--- PASS: TestNacosClient_getAllServiceNames (0.05s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosClient_getServiceNow<br>    nacos_client_test.go:100: <span class=\"hljs-built_in\">Get</span> all servicesInfo <span class=\"hljs-keyword\">from</span> servers passed<br>--- PASS: TestNacosClient_getServiceNow (2.80s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestDomain_SrvInstances<br>    nacos_domain_test.go:30: Domain.srvInstances weight passed.<br>    nacos_domain_test.go:37: Domain.srvInstances valid passed.<br>--- PASS: TestDomain_SrvInstances (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestGetAllServicesInfo<br>    nacos_grpc_client_test.go:23: GrpcClient <span class=\"hljs-built_in\">get</span> all servicesInfo passed<br>--- PASS: TestGetAllServicesInfo (0.03s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestGetService<br>    nacos_grpc_client_test.go:39: GrpcClient <span class=\"hljs-built_in\">get</span><span class=\"hljs-built_in\"> service </span>passed<br>--- PASS: TestGetService (0.03s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestSubscribe<br>    nacos_grpc_client_test.go:54: GrpcClient subscribe<span class=\"hljs-built_in\"> service </span>passed<br>--- PASS: TestSubscribe (0.03s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestCallback<br>    nacos_grpc_client_test.go:181: GrpcClient<span class=\"hljs-built_in\"> Service </span>SubscribeCallback passed<br>--- PASS: TestCallback (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestServerManager_NextServer<br>    server_manager_test.go:29: ServerManager.NextServer test is passed.<br>--- PASS: TestServerManager_NextServer (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestServerManager_RefreshServerListIfNeed<br>    server_manager_test.go:39: ServerManager.RefreshServerListIfNeed test is passed.<br>--- PASS: TestServerManager_RefreshServerListIfNeed (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosParse<br>init nacos plugin<span class=\"hljs-built_in\">..</span>.<br>init nacos client.<br>2022/09/15 16:05:03 [<span class=\"hljs-built_in\">INFO</span>] logDir:&lt;C:\\Users\\Yu\\logs&gt;   cacheDir:&lt;C:\\Users\\Yu\\nacos-go-client-cache&gt;<br>    setup_test.go:54: Passed<br>--- PASS: TestNacosParse (1.18s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestUDPServer_StartServer<br>    udp_server_test.go:43: Udp<span class=\"hljs-built_in\"> server </span>test passed.<br>--- PASS: TestUDPServer_StartServer (0.02s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestTryDecompressData<br>    util_and_comms_test.go:32: Gzip test is passed.<br>--- PASS: TestTryDecompressData (0.00s)<br>PASS<br>ok  \tnacos-coredns-plugin/nacos\t4.624s<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h2><p>1.6.7版本：</p>\n<h3 id=\"50000\"><a href=\"#50000\" class=\"headerlink\" title=\"50000\"></a>50000</h3><p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         50000 queries<br>  Queries completed:    50000 queries<br>  Queries lost:         0 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              0.200666 sec<br>  RTT min:              0.000063 sec<br>  RTT average:          0.012621 sec<br>  RTT std deviation:    0.010875 sec<br>  RTT out of range:     0 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Sat Sep 17 09:49:54 2022<br>  Finished at:          Sat Sep 17 09:50:35 2022<br>  Ran for:              41.475793 seconds</p>\n<p>  Queries per second:   1205.522460 qps</p>\n<p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         50000 queries<br>  Queries completed:    50000 queries<br>  Queries lost:         0 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              0.093154 sec<br>  RTT min:              0.000066 sec<br>  RTT average:          0.010944 sec<br>  RTT std deviation:    0.005928 sec<br>  RTT out of range:     0 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Sat Sep 17 09:50:58 2022<br>  Finished at:          Sat Sep 17 09:51:31 2022<br>  Ran for:              33.176316 seconds</p>\n<p>  Queries per second:   1507.099221 qps</p>\n<p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         50000 queries<br>  Queries completed:    50000 queries<br>  Queries lost:         0 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              0.127623 sec<br>  RTT min:              0.000097 sec<br>  RTT average:          0.013324 sec<br>  RTT std deviation:    0.008517 sec<br>  RTT out of range:     0 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Sat Sep 17 09:51:56 2022<br>  Finished at:          Sat Sep 17 09:52:33 2022<br>  Ran for:              36.864735 seconds</p>\n<p>  Queries per second:   1356.309763 qps</p>\n<h3 id=\"500000\"><a href=\"#500000\" class=\"headerlink\" title=\"500000\"></a>500000</h3><p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         500000 queries<br>  Queries completed:    499767 queries<br>  Queries lost:         233 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              1578.041083 sec<br>  RTT min:              0.000016 sec<br>  RTT average:          0.036432 sec<br>  RTT std deviation:    0.027122 sec<br>  RTT out of range:     18 queries</p>\n<p>  Percentage completed:  99.95%<br>  Percentage lost:        0.05%</p>\n<p>  Started at:           Fri Sep 16 17:46:10 2022<br>  Finished at:          Fri Sep 16 18:17:38 2022<br>  Ran for:              1887.486418 seconds</p>\n<p>  Queries per second:   264.779124 qps</p>\n<p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         500000 queries<br>  Queries completed:    499857 queries<br>  Queries lost:         143 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              1158.509071 sec<br>  RTT min:              0.000013 sec<br>  RTT average:          0.036213 sec<br>  RTT std deviation:    0.028113 sec<br>  RTT out of range:     24 queries</p>\n<p>  Percentage completed:  99.97%<br>  Percentage lost:        0.03%</p>\n<p>  Started at:           Fri Sep 16 18:19:12 2022<br>  Finished at:          Fri Sep 16 18:43:54 2022<br>  Ran for:              1482.300741 seconds</p>\n<p>  Queries per second:   337.216994 qps</p>\n<p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         500000 queries<br>  Queries completed:    499692 queries<br>  Queries lost:         308 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              1594.459308 sec<br>  RTT min:              0.000014 sec<br>  RTT average:          0.039982 sec<br>  RTT std deviation:    0.034464 sec<br>  RTT out of range:     23 queries</p>\n<p>  Percentage completed:  99.94%<br>  Percentage lost:        0.06%</p>\n<p>  Started at:           Fri Sep 16 19:03:18 2022<br>  Finished at:          Fri Sep 16 19:35:33 2022<br>  Ran for:              1935.047773 seconds</p>\n<p>  Queries per second:   258.232384 qps</p>\n<h3 id=\"5000000\"><a href=\"#5000000\" class=\"headerlink\" title=\"5000000\"></a>5000000</h3><p>新版本：</p>\n<p>50000<br>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         50000 queries<br>  Queries completed:    50000 queries<br>  Queries lost:         0 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              0.052808 sec<br>  RTT min:              0.000063 sec<br>  RTT average:          0.009972 sec<br>  RTT std deviation:    0.003560 sec<br>  RTT out of range:     0 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Fri Sep 16 22:07:58 2022<br>  Finished at:          Fri Sep 16 22:08:35 2022<br>  Ran for:              37.832932 seconds</p>\n<p>  Queries per second:   1321.599923 qps</p>\n<p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         50000 queries<br>  Queries completed:    50000 queries<br>  Queries lost:         0 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              0.066514 sec<br>  RTT min:              0.000061 sec<br>  RTT average:          0.007880 sec<br>  RTT std deviation:    0.004037 sec<br>  RTT out of range:     0 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Fri Sep 16 22:08:52 2022<br>  Finished at:          Fri Sep 16 22:09:26 2022<br>  Ran for:              34.318542 seconds</p>\n<p>  Queries per second:   1456.938351 qps</p>\n<h3 id=\"500000-1\"><a href=\"#500000-1\" class=\"headerlink\" title=\"500000\"></a>500000</h3><p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         500000 queries<br>  Queries completed:    500000 queries<br>  Queries lost:         0 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              0.062532 sec<br>  RTT min:              0.000032 sec<br>  RTT average:          0.005649 sec<br>  RTT std deviation:    0.002476 sec<br>  RTT out of range:     0 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Sat Sep 17 00:00:22 2022<br>  Finished at:          Sat Sep 17 00:05:07 2022<br>  Ran for:              284.796569 seconds</p>\n<p>  Queries per second:   1755.639128 qps</p>\n<p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         500000 queries<br>  Queries completed:    500000 queries<br>  Queries lost:         0 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              0.098301 sec<br>  RTT min:              0.000062 sec<br>  RTT average:          0.011365 sec<br>  RTT std deviation:    0.003072 sec<br>  RTT out of range:     0 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Sat Sep 17 09:03:59 2022<br>  Finished at:          Sat Sep 17 09:08:55 2022<br>  Ran for:              296.729115 seconds</p>\n<p>  Queries per second:   1685.038558 qps</p>\n<h3 id=\"5000000-1\"><a href=\"#5000000-1\" class=\"headerlink\" title=\"5000000\"></a>5000000</h3><p>[Status] Testing complete</p>\n<p>Statistics:</p>\n<p>  Parse input file:     once<br>  Ended due to:         reaching end of file</p>\n<p>  Queries sent:         5000000 queries<br>  Queries completed:    4999780 queries<br>  Queries lost:         220 queries<br>  Queries delayed(?):   0 queries</p>\n<p>  RTT max:              3074.590919 sec<br>  RTT min:              0.000022 sec<br>  RTT average:          0.011621 sec<br>  RTT std deviation:    0.004951 sec<br>  RTT out of range:     20 queries</p>\n<p>  Percentage completed: 100.00%<br>  Percentage lost:        0.00%</p>\n<p>  Started at:           Fri Sep 16 22:10:31 2022<br>  Finished at:          Fri Sep 16 23:06:25 2022<br>  Ran for:              3353.644673 seconds</p>\n<p>  Queries per second:   1490.849654 qps</p>\n"},{"title":"mysql-docker部署","date":"2022-06-25T12:32:43.000Z","_content":"## docker 安装\n```\n    apt install docker.io\n```\n\n## docker 拉取mysql官方镜像\n```\n    docker pull mysql:8.0.18\n```\n![](/img/docker-mysql/docker-pull-mysql.png)\n\n## 查看本地镜像\n**使用以下命令来查看是否已安装了 mysql：**\n```\n    docker images\n```\n![](/img/docker-mysql/docker-mysql-images.png)\n**在上图中可以看到我们已经安装了8.0.18版本的 mysql 镜像。**\n\n## 运行容器\n**安装完成后，我们可以使用以下命令来运行 mysql 容器：**\n```\n    docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:8.0.18\n```\n参数说明：\n-p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。\nMYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码。\n\n## 安装成功\n通过 docker ps 命令查看是否安装成功：\n\n本机可以通过 root 和密码 123456 访问 MySQL 服务。\n\n![](/img/docker-mysql/docker-ps-mysql.png)","source":"_posts/docker-mysql.md","raw":"---\ntitle: mysql-docker部署\ndate: 2022-06-25 20:32:43\ncategories: \n - nacos\n---\n## docker 安装\n```\n    apt install docker.io\n```\n\n## docker 拉取mysql官方镜像\n```\n    docker pull mysql:8.0.18\n```\n![](/img/docker-mysql/docker-pull-mysql.png)\n\n## 查看本地镜像\n**使用以下命令来查看是否已安装了 mysql：**\n```\n    docker images\n```\n![](/img/docker-mysql/docker-mysql-images.png)\n**在上图中可以看到我们已经安装了8.0.18版本的 mysql 镜像。**\n\n## 运行容器\n**安装完成后，我们可以使用以下命令来运行 mysql 容器：**\n```\n    docker run -itd --name mysql-test -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql:8.0.18\n```\n参数说明：\n-p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。\nMYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码。\n\n## 安装成功\n通过 docker ps 命令查看是否安装成功：\n\n本机可以通过 root 和密码 123456 访问 MySQL 服务。\n\n![](/img/docker-mysql/docker-ps-mysql.png)","slug":"docker-mysql","published":1,"updated":"2022-08-19T13:35:34.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdk90003i3wu8rpw41zr","content":"<h2 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">apt <span class=\"hljs-keyword\">install</span> docker.io<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-拉取mysql官方镜像\"><a href=\"#docker-拉取mysql官方镜像\" class=\"headerlink\" title=\"docker 拉取mysql官方镜像\"></a>docker 拉取mysql官方镜像</h2><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">docker</span> pull mysql:<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">18</span><br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/docker-mysql/docker-pull-mysql.png\"></p>\n<h2 id=\"查看本地镜像\"><a href=\"#查看本地镜像\" class=\"headerlink\" title=\"查看本地镜像\"></a>查看本地镜像</h2><p><strong>使用以下命令来查看是否已安装了 mysql：</strong></p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">docker images</span><br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/docker-mysql/docker-mysql-images.png\"><br><strong>在上图中可以看到我们已经安装了8.0.18版本的 mysql 镜像。</strong></p>\n<h2 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h2><p><strong>安装完成后，我们可以使用以下命令来运行 mysql 容器：</strong></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">docker</span> run -itd --name mysql-test -p <span class=\"hljs-number\">3306</span>:<span class=\"hljs-number\">3306</span> -e MYSQL_ROOT_PASSWORD=<span class=\"hljs-number\">123456</span> mysql:<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">18</span><br></code></pre></td></tr></table></figure>\n<p>参数说明：<br>-p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。<br>MYSQL_ROOT_PASSWORD&#x3D;123456：设置 MySQL 服务 root 用户的密码。</p>\n<h2 id=\"安装成功\"><a href=\"#安装成功\" class=\"headerlink\" title=\"安装成功\"></a>安装成功</h2><p>通过 docker ps 命令查看是否安装成功：</p>\n<p>本机可以通过 root 和密码 123456 访问 MySQL 服务。</p>\n<p><img src=\"/img/docker-mysql/docker-ps-mysql.png\"></p>\n","site":{"data":{}},"wordcount":431,"excerpt":"","more":"<h2 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">apt <span class=\"hljs-keyword\">install</span> docker.io<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-拉取mysql官方镜像\"><a href=\"#docker-拉取mysql官方镜像\" class=\"headerlink\" title=\"docker 拉取mysql官方镜像\"></a>docker 拉取mysql官方镜像</h2><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">docker</span> pull mysql:<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">18</span><br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/docker-mysql/docker-pull-mysql.png\"></p>\n<h2 id=\"查看本地镜像\"><a href=\"#查看本地镜像\" class=\"headerlink\" title=\"查看本地镜像\"></a>查看本地镜像</h2><p><strong>使用以下命令来查看是否已安装了 mysql：</strong></p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">docker images</span><br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/docker-mysql/docker-mysql-images.png\"><br><strong>在上图中可以看到我们已经安装了8.0.18版本的 mysql 镜像。</strong></p>\n<h2 id=\"运行容器\"><a href=\"#运行容器\" class=\"headerlink\" title=\"运行容器\"></a>运行容器</h2><p><strong>安装完成后，我们可以使用以下命令来运行 mysql 容器：</strong></p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">docker</span> run -itd --name mysql-test -p <span class=\"hljs-number\">3306</span>:<span class=\"hljs-number\">3306</span> -e MYSQL_ROOT_PASSWORD=<span class=\"hljs-number\">123456</span> mysql:<span class=\"hljs-number\">8</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">18</span><br></code></pre></td></tr></table></figure>\n<p>参数说明：<br>-p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。<br>MYSQL_ROOT_PASSWORD&#x3D;123456：设置 MySQL 服务 root 用户的密码。</p>\n<h2 id=\"安装成功\"><a href=\"#安装成功\" class=\"headerlink\" title=\"安装成功\"></a>安装成功</h2><p>通过 docker ps 命令查看是否安装成功：</p>\n<p>本机可以通过 root 和密码 123456 访问 MySQL 服务。</p>\n<p><img src=\"/img/docker-mysql/docker-ps-mysql.png\"></p>\n"},{"title":"git 将本地代码推送到新仓库","date":"2022-07-06T14:16:00.000Z","_content":"\n在github新建仓库获取https://*.git\n```bash\ngit clone https://*.git\n\ngit init\n\ngit remote add origin https://*.git\n\ngit add Readme.md\n\ngit commit -m \"update Readme.md\"\n\ngit push -u origin master\n```\n\n\n\n","source":"_posts/git-local.md","raw":"---\ntitle: git 将本地代码推送到新仓库\ndate: 2022-07-06 22:16:00\ncategories: \n - git\n---\n\n在github新建仓库获取https://*.git\n```bash\ngit clone https://*.git\n\ngit init\n\ngit remote add origin https://*.git\n\ngit add Readme.md\n\ngit commit -m \"update Readme.md\"\n\ngit push -u origin master\n```\n\n\n\n","slug":"git-local","published":1,"updated":"2022-08-19T13:35:34.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdkb0004i3wu5fju3hnd","content":"<p>在github新建仓库获取https:&#x2F;&#x2F;*.git</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://*.git<br><br>git init<br><br>git remote add origin https://*.git<br><br>git add Readme.md<br><br>git commit -m <span class=\"hljs-string\">&quot;update Readme.md&quot;</span><br><br>git push -u origin master<br></code></pre></td></tr></table></figure>\n\n\n\n","site":{"data":{}},"wordcount":182,"excerpt":"","more":"<p>在github新建仓库获取https:&#x2F;&#x2F;*.git</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://*.git<br><br>git init<br><br>git remote add origin https://*.git<br><br>git add Readme.md<br><br>git commit -m <span class=\"hljs-string\">&quot;update Readme.md&quot;</span><br><br>git push -u origin master<br></code></pre></td></tr></table></figure>\n\n\n\n"},{"title":"go笔记","date":"2022-07-06T05:32:43.000Z","_content":"\n## [Go 数组与切片](https://zhuanlan.zhihu.com/p/78747815)\n\n### new() 和 make() 的区别\n看起来二者没有什么区别，都在堆上分配内存，但是它们的行为不同，适用于不同的类型。\n\nnew(T) 为每个新的类型T分配一片内存，初始化为 0 并且返回类型为*T的内存地址：\n这种方法 返回一个指向类型为 T，值为 0 的地址的指针，\n它适用于值类型如数组和结构体（参见第 10 章）；它相当于 &T{}。\nmake(T) 返回一个类型为 T 的初始值，它只适用于3种内建的引用类型：切片、map 和 channel（参见第 8 章，第 13 章）。\n换言之，new 函数分配内存，make 函数初始化\n\n![参考链接](https://blog.csdn.net/ouyangyiwen/article/details/111548053)\n## new和make的区别：\n\n 1）new是为值类型分配内存（可以任意类型的数据），其返回的是指针，指向分配类型的内存地址。         \n\n 2）make为引用类型分配内存并初始化，如：chan、map和slice，其返回值为这个类型（引用）本身。   \n\n 3）new 分配的空间被清零。make 分配空间后，会进行初始化；\n\n### New函数\n#### 一. 为切片分配内存\n\n          如下面代码所示，用new分配一个切片内存后，此时slice是空的（&[]）,仅仅声明了一个指针指向这个空的slice的地址。如果我们直接（*s1）[0]=100会panic，报错：index out of range。\n``` go\npackage main\nimport \"fmt\"\nfunc test() {\n\ts1 := new([]int) //为slice分配内存，返回地址\n\t(*s1)[0] = 100\n\tfmt.Println(s1)\n\treturn\n}\nfunc main() {\n\ttest()\n}\n```\n如果我们要用这个slice，我们还需将其初始化，代码如下。我们用make对这个slice进行初始化，再赋值（*s1）[0]=100就可成功运行，结果如后图所示。\n``` go\npackage main\nimport \"fmt\"\nfunc test() {\n\ts1 := new([]int) //为slice分配内存，返回地址\n\tfmt.Println(s1)\n\ts2 := make([]int, 10) //为slice分配内存，返回值类型\n\t*s1 = make([]int, 5)\n\t(*s1)[0] = 100\n\ts2[0] = 100\n\tfmt.Println(s1)\n\treturn\n}\nfunc main() {\n\ttest()\n}\n```\n#### 二. 为变量和自定义类型分配内存空间\n\n2.1为变量分配\n``` go\npackage main\nimport \"fmt\"\nfunc main() {\n\tvar sum *int = new(int)    //new分配空间\n\tfmt.Println(*sum)\n\t*sum = 98                  \n\tfmt.Println(*sum)\n}\n```\n2.2 为自定义类型分配内存，如果我们不分配内存，就会panic。\n``` go\npackage main\nimport \"fmt\"\nfunc main() {\n\ttype Student struct {\n\t\tname string\n\t\tage  int\n\t}\n\tvar s *Student\n\ts = new(Student) //分配空间\n\ts.name = \"dequan\"\n\tfmt.Println(s)\n}\n```\n###  make\nmake 也是用于内存分配的，但是和 new 不同，它只用于 chan、map 以及 slice 的内存创建，而且它返回的类型就是这三个类型本身，而不是他们的指针类型\n我们可以通过如下代码和输出结果对比观察他们区别。\n``` go\npackage main\nimport \"fmt\"\nfunc test() {\n\ts1 := new([]int) //为slice分配内存，返回地址\n\tfmt.Println(s1)\n\ts2 := make([]int, 10) //为slice分配内存，返回值类型\n\tfmt.Println(s2)\n\t*s1 = make([]int, 5)\n\t(*s1)[0] = 100\n\ts2[0] = 100\n\tfmt.Println(s1)\n\tfmt.Println(s2)\n\treturn\n}\nfunc main() {\n\ttest()\n}\n```\n","source":"_posts/go-note.md","raw":"---\ntitle: go笔记\ndate: 2022-07-06 13:32:43\ncategories: \n - go\n---\n\n## [Go 数组与切片](https://zhuanlan.zhihu.com/p/78747815)\n\n### new() 和 make() 的区别\n看起来二者没有什么区别，都在堆上分配内存，但是它们的行为不同，适用于不同的类型。\n\nnew(T) 为每个新的类型T分配一片内存，初始化为 0 并且返回类型为*T的内存地址：\n这种方法 返回一个指向类型为 T，值为 0 的地址的指针，\n它适用于值类型如数组和结构体（参见第 10 章）；它相当于 &T{}。\nmake(T) 返回一个类型为 T 的初始值，它只适用于3种内建的引用类型：切片、map 和 channel（参见第 8 章，第 13 章）。\n换言之，new 函数分配内存，make 函数初始化\n\n![参考链接](https://blog.csdn.net/ouyangyiwen/article/details/111548053)\n## new和make的区别：\n\n 1）new是为值类型分配内存（可以任意类型的数据），其返回的是指针，指向分配类型的内存地址。         \n\n 2）make为引用类型分配内存并初始化，如：chan、map和slice，其返回值为这个类型（引用）本身。   \n\n 3）new 分配的空间被清零。make 分配空间后，会进行初始化；\n\n### New函数\n#### 一. 为切片分配内存\n\n          如下面代码所示，用new分配一个切片内存后，此时slice是空的（&[]）,仅仅声明了一个指针指向这个空的slice的地址。如果我们直接（*s1）[0]=100会panic，报错：index out of range。\n``` go\npackage main\nimport \"fmt\"\nfunc test() {\n\ts1 := new([]int) //为slice分配内存，返回地址\n\t(*s1)[0] = 100\n\tfmt.Println(s1)\n\treturn\n}\nfunc main() {\n\ttest()\n}\n```\n如果我们要用这个slice，我们还需将其初始化，代码如下。我们用make对这个slice进行初始化，再赋值（*s1）[0]=100就可成功运行，结果如后图所示。\n``` go\npackage main\nimport \"fmt\"\nfunc test() {\n\ts1 := new([]int) //为slice分配内存，返回地址\n\tfmt.Println(s1)\n\ts2 := make([]int, 10) //为slice分配内存，返回值类型\n\t*s1 = make([]int, 5)\n\t(*s1)[0] = 100\n\ts2[0] = 100\n\tfmt.Println(s1)\n\treturn\n}\nfunc main() {\n\ttest()\n}\n```\n#### 二. 为变量和自定义类型分配内存空间\n\n2.1为变量分配\n``` go\npackage main\nimport \"fmt\"\nfunc main() {\n\tvar sum *int = new(int)    //new分配空间\n\tfmt.Println(*sum)\n\t*sum = 98                  \n\tfmt.Println(*sum)\n}\n```\n2.2 为自定义类型分配内存，如果我们不分配内存，就会panic。\n``` go\npackage main\nimport \"fmt\"\nfunc main() {\n\ttype Student struct {\n\t\tname string\n\t\tage  int\n\t}\n\tvar s *Student\n\ts = new(Student) //分配空间\n\ts.name = \"dequan\"\n\tfmt.Println(s)\n}\n```\n###  make\nmake 也是用于内存分配的，但是和 new 不同，它只用于 chan、map 以及 slice 的内存创建，而且它返回的类型就是这三个类型本身，而不是他们的指针类型\n我们可以通过如下代码和输出结果对比观察他们区别。\n``` go\npackage main\nimport \"fmt\"\nfunc test() {\n\ts1 := new([]int) //为slice分配内存，返回地址\n\tfmt.Println(s1)\n\ts2 := make([]int, 10) //为slice分配内存，返回值类型\n\tfmt.Println(s2)\n\t*s1 = make([]int, 5)\n\t(*s1)[0] = 100\n\ts2[0] = 100\n\tfmt.Println(s1)\n\tfmt.Println(s2)\n\treturn\n}\nfunc main() {\n\ttest()\n}\n```\n","slug":"go-note","published":1,"updated":"2022-08-19T13:35:34.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdkc0005i3wugginby27","content":"<h2 id=\"Go-数组与切片\"><a href=\"#Go-数组与切片\" class=\"headerlink\" title=\"Go 数组与切片\"></a><a href=\"https://zhuanlan.zhihu.com/p/78747815\">Go 数组与切片</a></h2><h3 id=\"new-和-make-的区别\"><a href=\"#new-和-make-的区别\" class=\"headerlink\" title=\"new() 和 make() 的区别\"></a>new() 和 make() 的区别</h3><p>看起来二者没有什么区别，都在堆上分配内存，但是它们的行为不同，适用于不同的类型。</p>\n<p>new(T) 为每个新的类型T分配一片内存，初始化为 0 并且返回类型为*T的内存地址：<br>这种方法 返回一个指向类型为 T，值为 0 的地址的指针，<br>它适用于值类型如数组和结构体（参见第 10 章）；它相当于 &amp;T{}。<br>make(T) 返回一个类型为 T 的初始值，它只适用于3种内建的引用类型：切片、map 和 channel（参见第 8 章，第 13 章）。<br>换言之，new 函数分配内存，make 函数初始化</p>\n<p><img src=\"https://blog.csdn.net/ouyangyiwen/article/details/111548053\" alt=\"参考链接\"></p>\n<h2 id=\"new和make的区别：\"><a href=\"#new和make的区别：\" class=\"headerlink\" title=\"new和make的区别：\"></a>new和make的区别：</h2><p> 1）new是为值类型分配内存（可以任意类型的数据），其返回的是指针，指向分配类型的内存地址。         </p>\n<p> 2）make为引用类型分配内存并初始化，如：chan、map和slice，其返回值为这个类型（引用）本身。   </p>\n<p> 3）new 分配的空间被清零。make 分配空间后，会进行初始化；</p>\n<h3 id=\"New函数\"><a href=\"#New函数\" class=\"headerlink\" title=\"New函数\"></a>New函数</h3><h4 id=\"一-为切片分配内存\"><a href=\"#一-为切片分配内存\" class=\"headerlink\" title=\"一. 为切片分配内存\"></a>一. 为切片分配内存</h4><pre><code class=\"hljs\">      如下面代码所示，用new分配一个切片内存后，此时slice是空的（&amp;[]）,仅仅声明了一个指针指向这个空的slice的地址。如果我们直接（*s1）[0]=100会panic，报错：index out of range。\n</code></pre>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ts1 := <span class=\"hljs-built_in\">new</span>([]<span class=\"hljs-type\">int</span>) <span class=\"hljs-comment\">//为slice分配内存，返回地址</span><br>\t(*s1)[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span><br>\tfmt.Println(s1)<br>\t<span class=\"hljs-keyword\">return</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttest()<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如果我们要用这个slice，我们还需将其初始化，代码如下。我们用make对这个slice进行初始化，再赋值（*s1）[0]&#x3D;100就可成功运行，结果如后图所示。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ts1 := <span class=\"hljs-built_in\">new</span>([]<span class=\"hljs-type\">int</span>) <span class=\"hljs-comment\">//为slice分配内存，返回地址</span><br>\tfmt.Println(s1)<br>\ts2 := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">10</span>) <span class=\"hljs-comment\">//为slice分配内存，返回值类型</span><br>\t*s1 = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">5</span>)<br>\t(*s1)[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span><br>\ts2[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span><br>\tfmt.Println(s1)<br>\t<span class=\"hljs-keyword\">return</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttest()<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"二-为变量和自定义类型分配内存空间\"><a href=\"#二-为变量和自定义类型分配内存空间\" class=\"headerlink\" title=\"二. 为变量和自定义类型分配内存空间\"></a>二. 为变量和自定义类型分配内存空间</h4><p>2.1为变量分配</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> sum *<span class=\"hljs-type\">int</span> = <span class=\"hljs-built_in\">new</span>(<span class=\"hljs-type\">int</span>)    <span class=\"hljs-comment\">//new分配空间</span><br>\tfmt.Println(*sum)<br>\t*sum = <span class=\"hljs-number\">98</span>                  <br>\tfmt.Println(*sum)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>2.2 为自定义类型分配内存，如果我们不分配内存，就会panic。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;<br>\t\tname <span class=\"hljs-type\">string</span><br>\t\tage  <span class=\"hljs-type\">int</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> s *Student<br>\ts = <span class=\"hljs-built_in\">new</span>(Student) <span class=\"hljs-comment\">//分配空间</span><br>\ts.name = <span class=\"hljs-string\">&quot;dequan&quot;</span><br>\tfmt.Println(s)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"make\"><a href=\"#make\" class=\"headerlink\" title=\"make\"></a>make</h3><p>make 也是用于内存分配的，但是和 new 不同，它只用于 chan、map 以及 slice 的内存创建，而且它返回的类型就是这三个类型本身，而不是他们的指针类型<br>我们可以通过如下代码和输出结果对比观察他们区别。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ts1 := <span class=\"hljs-built_in\">new</span>([]<span class=\"hljs-type\">int</span>) <span class=\"hljs-comment\">//为slice分配内存，返回地址</span><br>\tfmt.Println(s1)<br>\ts2 := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">10</span>) <span class=\"hljs-comment\">//为slice分配内存，返回值类型</span><br>\tfmt.Println(s2)<br>\t*s1 = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">5</span>)<br>\t(*s1)[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span><br>\ts2[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span><br>\tfmt.Println(s1)<br>\tfmt.Println(s2)<br>\t<span class=\"hljs-keyword\">return</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttest()<br>&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"wordcount":1758,"excerpt":"","more":"<h2 id=\"Go-数组与切片\"><a href=\"#Go-数组与切片\" class=\"headerlink\" title=\"Go 数组与切片\"></a><a href=\"https://zhuanlan.zhihu.com/p/78747815\">Go 数组与切片</a></h2><h3 id=\"new-和-make-的区别\"><a href=\"#new-和-make-的区别\" class=\"headerlink\" title=\"new() 和 make() 的区别\"></a>new() 和 make() 的区别</h3><p>看起来二者没有什么区别，都在堆上分配内存，但是它们的行为不同，适用于不同的类型。</p>\n<p>new(T) 为每个新的类型T分配一片内存，初始化为 0 并且返回类型为*T的内存地址：<br>这种方法 返回一个指向类型为 T，值为 0 的地址的指针，<br>它适用于值类型如数组和结构体（参见第 10 章）；它相当于 &amp;T{}。<br>make(T) 返回一个类型为 T 的初始值，它只适用于3种内建的引用类型：切片、map 和 channel（参见第 8 章，第 13 章）。<br>换言之，new 函数分配内存，make 函数初始化</p>\n<p><img src=\"https://blog.csdn.net/ouyangyiwen/article/details/111548053\" alt=\"参考链接\"></p>\n<h2 id=\"new和make的区别：\"><a href=\"#new和make的区别：\" class=\"headerlink\" title=\"new和make的区别：\"></a>new和make的区别：</h2><p> 1）new是为值类型分配内存（可以任意类型的数据），其返回的是指针，指向分配类型的内存地址。         </p>\n<p> 2）make为引用类型分配内存并初始化，如：chan、map和slice，其返回值为这个类型（引用）本身。   </p>\n<p> 3）new 分配的空间被清零。make 分配空间后，会进行初始化；</p>\n<h3 id=\"New函数\"><a href=\"#New函数\" class=\"headerlink\" title=\"New函数\"></a>New函数</h3><h4 id=\"一-为切片分配内存\"><a href=\"#一-为切片分配内存\" class=\"headerlink\" title=\"一. 为切片分配内存\"></a>一. 为切片分配内存</h4><pre><code>      如下面代码所示，用new分配一个切片内存后，此时slice是空的（&amp;[]）,仅仅声明了一个指针指向这个空的slice的地址。如果我们直接（*s1）[0]=100会panic，报错：index out of range。\n</code></pre>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ts1 := <span class=\"hljs-built_in\">new</span>([]<span class=\"hljs-type\">int</span>) <span class=\"hljs-comment\">//为slice分配内存，返回地址</span><br>\t(*s1)[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span><br>\tfmt.Println(s1)<br>\t<span class=\"hljs-keyword\">return</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttest()<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>如果我们要用这个slice，我们还需将其初始化，代码如下。我们用make对这个slice进行初始化，再赋值（*s1）[0]&#x3D;100就可成功运行，结果如后图所示。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ts1 := <span class=\"hljs-built_in\">new</span>([]<span class=\"hljs-type\">int</span>) <span class=\"hljs-comment\">//为slice分配内存，返回地址</span><br>\tfmt.Println(s1)<br>\ts2 := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">10</span>) <span class=\"hljs-comment\">//为slice分配内存，返回值类型</span><br>\t*s1 = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">5</span>)<br>\t(*s1)[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span><br>\ts2[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span><br>\tfmt.Println(s1)<br>\t<span class=\"hljs-keyword\">return</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttest()<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"二-为变量和自定义类型分配内存空间\"><a href=\"#二-为变量和自定义类型分配内存空间\" class=\"headerlink\" title=\"二. 为变量和自定义类型分配内存空间\"></a>二. 为变量和自定义类型分配内存空间</h4><p>2.1为变量分配</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">var</span> sum *<span class=\"hljs-type\">int</span> = <span class=\"hljs-built_in\">new</span>(<span class=\"hljs-type\">int</span>)    <span class=\"hljs-comment\">//new分配空间</span><br>\tfmt.Println(*sum)<br>\t*sum = <span class=\"hljs-number\">98</span>                  <br>\tfmt.Println(*sum)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>2.2 为自定义类型分配内存，如果我们不分配内存，就会panic。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">type</span> Student <span class=\"hljs-keyword\">struct</span> &#123;<br>\t\tname <span class=\"hljs-type\">string</span><br>\t\tage  <span class=\"hljs-type\">int</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">var</span> s *Student<br>\ts = <span class=\"hljs-built_in\">new</span>(Student) <span class=\"hljs-comment\">//分配空间</span><br>\ts.name = <span class=\"hljs-string\">&quot;dequan&quot;</span><br>\tfmt.Println(s)<br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"make\"><a href=\"#make\" class=\"headerlink\" title=\"make\"></a>make</h3><p>make 也是用于内存分配的，但是和 new 不同，它只用于 chan、map 以及 slice 的内存创建，而且它返回的类型就是这三个类型本身，而不是他们的指针类型<br>我们可以通过如下代码和输出结果对比观察他们区别。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;fmt&quot;</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ts1 := <span class=\"hljs-built_in\">new</span>([]<span class=\"hljs-type\">int</span>) <span class=\"hljs-comment\">//为slice分配内存，返回地址</span><br>\tfmt.Println(s1)<br>\ts2 := <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">10</span>) <span class=\"hljs-comment\">//为slice分配内存，返回值类型</span><br>\tfmt.Println(s2)<br>\t*s1 = <span class=\"hljs-built_in\">make</span>([]<span class=\"hljs-type\">int</span>, <span class=\"hljs-number\">5</span>)<br>\t(*s1)[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span><br>\ts2[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">100</span><br>\tfmt.Println(s1)<br>\tfmt.Println(s2)<br>\t<span class=\"hljs-keyword\">return</span><br>&#125;<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\ttest()<br>&#125;<br></code></pre></td></tr></table></figure>\n"},{"title":"HTTP笔记","date":"2022-08-13T07:21:43.000Z","_content":"\n# HTTP\n\n## 1、[TCP/IP 的分层管理及主要协议](https://cloud.tencent.com/developer/article/2015535?from=article.detail.1884646)\n\n1. 应用层：应用层决定了向用户提供应用服务时通信的活动。（HTTP、DNS、FTP）\n\n\n2. 传输层：传输层对上层应用层，提供处于网络连接中两台计算机之间的数据传输。（TCP）\n\n\n3. 网络层: 网络层用来处理在网络上流动的数据包，数据包是网络传输的最小数据单位。规定了通过怎样的路径到达对方计算机，并把数据包传送给对方。（IP、ARP）\n\n\n4. 链路层: 网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。\n\n\n5. 物理层: 考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。\n\n### 1.1 划分层次\n当两台主机之间传送文件时，是一项非常复杂的工作。\n\n可以将工作划分为三类：\n\n1. 与传送文件直接有关，例如发送端的文件传送应用程序应当确定接收端的文件管理程序已做好接收和存储文件的准备。这就需要一个文件传送模块来完成。\n\n2. 为了保证文件和文件传送命令可靠地在两个系统之间交换，可以再设立一个通信服务模块。\n\n3. 再构造一个网络接入模块,让这个模块负责做与网络接口细节有关的工作，并向上层提供服务，使上面的通信服务模块能够完成可靠通信的任务。\n\n### 1.2 分层带来的好处：\n\n1. 各层之间是独立的。某一层并不需要它的下一层是如何实现的，而仅仅需要知道该层接口所提供的服务。\n\n2. 灵活性好。当任何一层发生变化时，只需要层间接口关系保持不变，则在这层以上或以下各层均不受影响。\n\n3. 结构上可分割开。各层都可以采用最适合的技术来实现。\n\n4. 易于实现和维护。整个系统被分解为若干个相对独立的子系统，更方便维护。\n\n5. 能促进标准化工作。每一层的功能及其所提供的服务都有了明确说明。通常各层所要完成的功能主要有以下一些：\n\n　　1）差错控制，使相对应层次对等方的通信更加可靠。\n\n　　2）流量控制，发送端的发送速率必须使接收端来得及接收。\n\n　　3）分段和重装，发送端将要发送的数据块划分为更小的单位，在接收端将其还原。\n\n　　4）复用和分用，发送端几个高层会话复用一条低层的连接，在接收端再进行分用。\n\n　　5）连接建立和释放，交换数据前先建立一条逻辑连接，数据传送结束后释放连接。\n\n\n\n## [2、在浏览器中输入url地址后发生的所有过程](https://www.jianshu.com/p/c1dfc6caa520)\n\n1. DNS: 通过DNS将域名解析为目标服务器的IP地址\n2. TCP: 获取到目标服务器的IP地址后，发起TCP的三次握手，与目标服务器建立TCP连接。\n3. HTTP: 建立TCP连接后，发送HTTP报文向服务器请求资源，TCP会将HTTP请求报文按序号分割成多个报文段，并把每个报文段可靠的传给对方\n4. 服务器接受并处理完请求后，返回 HTTP 响应给浏览器客户端。\n5. 完成一次 HTTP 请求后，服务器会根据是否是长连接，来决定是不是断开TCP连接。在 HTTP/1.1 中，Connection: keep-alive 是默认启用的，表示持久连接。\n在服务器持久连接设定的超时时间（默认75秒）内没有新到达的请求，则断开与客户端的连接。而，浏览器客户端每隔 45 秒会向服务器发送 TCP keep-alive 探测包，\n来判断 TCP 连接状况，如果没有收到 ACK 应答，则主动断开与服务器的连接。HTTP keep-alive 和 TCP keep-alive 虽然都是一种保活机制，但是它们完全不相同，\n一个作用于应用层，一个作用于传输层。\n6. 断开TCP连接 四次挥手\n7. 浏览器解析htm代码,并请求htm代码中的资源(如js、css图片等)\n8. 浏览器将返回的数据按顺序解析html文件，构建DOM树和CSS规则树生成渲染树。 遇到外部CSS链接时，以异步方式来获取资源，不会产生阻塞并继续加载解析HTML。当 CSS 下载完毕后，主线程在合适的时机解析 CSS 内容。\n   但在解析执行JS脚本时，会停止解析后续HTML，可能会出现阻塞问题。\n9. 渲染树构建完毕后，根据渲染树的布局，在页面显示的过程中会多次进行Reflow和Repaint操作，计算每个节点在页面中的大小和位置等几何信息。HTML默认是流式布局的，CSS和js会打破这种布局，\n改变DOM的外观样式以及大小和位置。\n\nreplaint：屏幕的一部分重画，不影响整体布局，比如某个CSS的背景色变了，但元素的几何尺寸和位置不变。\nreflow： 意味着元件的几何尺寸变了，我们需要重新验证并计算渲染树。是渲染树的一部分或全部发生了变化。这就是Reflow，或是Layout。\n\n浏览器解析css，形成CSS规则树，当DOM树构建完成后，浏览器引擎通过DOM树和CSS规则树构造出渲染树。\n渲染树中包含可视节点的样式信息（不可见节点将不会被添加到渲染树中，如：head元素和display值为none的元素）\n\n## 3、URI和URL区别\n1）URL是URI的子集，我们所看到的URL是一种特殊的URI，它是URI的一种实现形式，也即一个URL一定是一个URI，但URI不一定是URL\n2）URL是绝对的，于整个网络而言，一个提供访问到确切资源的链接是一个URL（也属于URI）\n3）URI既有相对性又有绝对性\nURI(Identifier) 指定某个资源的唯一识别编号，用身份证号来唯一标识一个人。每个人都有自己的身份证号，对应每个资源有每个资源的URI来作为该资源的标识\n知道该资源的唯一标识，并不一定知道该资源的具体位置。每个协议有自己的规范来给该协议下的资源做标识。\nURL(Locator)   指定这个资源的路径，类似于具体的身份证卡片，可以通过身份证上的地址来找到每个人的位置。\n\n##  [4、TCP和UDP的区别](https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html#:~:text=%E6%80%BB%E7%BB%93%201%20TCP%E5%90%91%E4%B8%8A%E5%B1%82%E6%8F%90%E4%BE%9B%E9%9D%A2%E5%90%91%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%9C%8D%E5%8A%A1%20%EF%BC%8CUDP%E5%90%91%E4%B8%8A%E5%B1%82%E6%8F%90%E4%BE%9B%E6%97%A0%E8%BF%9E%E6%8E%A5%E4%B8%8D%E5%8F%AF%E9%9D%A0%E6%9C%8D%E5%8A%A1%E3%80%82%202%20%E8%99%BD%E7%84%B6,UDP%20%E5%B9%B6%E6%B2%A1%E6%9C%89%20TCP%20%E4%BC%A0%E8%BE%93%E6%9D%A5%E7%9A%84%E5%87%86%E7%A1%AE%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B9%9F%E8%83%BD%E5%9C%A8%E5%BE%88%E5%A4%9A%E5%AE%9E%E6%97%B6%E6%80%A7%E8%A6%81%E6%B1%82%E9%AB%98%E7%9A%84%E5%9C%B0%E6%96%B9%E6%9C%89%E6%89%80%E4%BD%9C%E4%B8%BA%203%20%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%87%86%E7%A1%AE%E6%80%A7%E8%A6%81%E6%B1%82%E9%AB%98%EF%BC%8C%E9%80%9F%E5%BA%A6%E5%8F%AF%E4%BB%A5%E7%9B%B8%E5%AF%B9%E8%BE%83%E6%85%A2%E7%9A%84%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%89%E7%94%A8TCP)\n\n### 4.1 **TCP/IP 是互联网相关的各类协议族的总称**\n比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP/IP 族内的协议。\n\n**TCP/IP模型**是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。\n\n- 应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。\n\n- 传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。\n\n- 网络层：负责路由以及把分组报文发送给目标网络或主机。\n\n- 链路层：负责封装和解封装IP报文，发送和接受ARP/RARP报文等。\n\n### 4.2 UDP协议 用户数据报协议\nUDP协议全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。\n\n它有以下几个特点：\n\n1. 面向无连接\n\n   首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。 并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。\n\n   具体来说就是： \n   - 在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了\n   - 在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作\n\n\n2. 有单播，多播，广播的功能\n\n   UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。\n\n\n3. UDP是面向报文的\n\n   发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分， 而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文\n\n\n4. 不可靠性\n\n   首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。 并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。\n\n   再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。\n\n   这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。\n\n\n5. 头部开销小，传输数据报文时是很高效的。\n   ![UDP Header](/img/http-note/udp-header.png)\n   UDP 头部包含了以下几个数据：\n\n   * 两个十六位的端口号，分别为源端口（可选字段）和目标端口\n   \n   * 整个数据报文的长度\n\n   * 整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误\n\n   因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的\n   \n udp特点：面向无连接不需要向tcp一样三次握手建立链接（加UDP头、去IP头就可以发送接受数据）、 \n 面向报文（对应用层下发的数据包加上UDP头就发给IP层，不会对数据包进行合并和拆分）、 \n 单播多播广播都可、 \n 不可靠性 不需要建立链接 随时可以发送和接受数据，没用拥堵控制不会考虑网络条件好坏，造成弊端是在网络条件差的时候存在丢包现象\n 优点是速率高，适用于实时性要求高的场景。\n\n### 4.3 TCP\n\nTCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。\nTCP 是面向连接的、可靠的流协议。\n流就是指不间断的数据结构，你可以把它想象成排水管中的水流。\n\n#### [TCP 三次握手 四次挥手](https://cloud.tencent.com/developer/article/1874945#:~:text=%E5%8E%9F%E5%9B%A0%EF%BC%9A%20%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D%E8%BF%9E%E6%8E%A5%20%E5%85%B6%E5%AE%9E%E5%9C%A8RFC%20793%20Transmission%20Control%20Protocol%E9%87%8C%E5%B0%B1%E6%9C%89%E6%8C%87%E5%87%BA%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%E5%8E%9F%E5%9B%A0%20The,prevent%20old%20duplicate%20connection%20initiations%20from%20causing%20confusion.)\n```\nCLIENT                        SERVER\n\nCLOSED                        CLOSED\n\nLISTEN        \n\nSYN_SEND     -> SYN ->\n\n            <- SYN、ACK <-   SYN_RCVD\n\nESTABLISED   -> ACK ->       ESTABLISED\n```\n关键字说明：\n\n- SYN：Synchronize Sequence Numbers，同步序列编号\n- ACK：Acknowledge Character，确认字符\n- SEQ：Sequence Number，序列号\n\nTCP三次握手执行过程：\n\n1. 首先，服务端和客户端都是处于CLOSED状态的，然后服务端启动，监听端口，状态变为LISTEN(监听)状态\n2. 客户端为了请求资源，发送连接，发送同步序列号SYN，此时客户端就变成了SYN-SEND状态\n3. 服务端接收到客户端请求之后，发送SYN和ACK，然后服务端状态就变成SYN-RCVD状态\n4. 客户端接收到信息之后，再次发送ACK，然后变成ESTABLISHED(已确认)状态，服务端接收到返回信息后，状态也变成ESTABLISHED(已确认)状态\n\nTCP协议为什么需要三次握手？为什么不设计成两次握手就可以？\n\n   原因：避免重复连接\n   \n   主要原因是为了防止旧的重复连接引起连接混乱问题\n   \n   比如在网络环境比较复杂的情况，客户端可能会连续发送多次请求。如果只设计成两次握手的情况，服务端只能一直接收请求，然后返回请求信息，\n   也不知道客户端是否请求成功。这些过期请求的话就会造成网络连接的混乱。\n   \n   所以设计成三次握手的情况，客户端在接收到服务端SEQ+1的返回消息之后，就会知道这个连接是历史连接，所以会发送报文给服务端，告诉服务端。\n   \n   所以TCP设计成三次握手的目的就是为了避免重复连接。为了节省资源，三次握手就可以符合实际情况，所以就没必要设计成四次握手、五次握手等等情况\n\n\n\n","source":"_posts/http-note.md","raw":"---\ntitle: HTTP笔记\ndate: 2022-08-13 15:21:43\ncategories: \n - note\n---\n\n# HTTP\n\n## 1、[TCP/IP 的分层管理及主要协议](https://cloud.tencent.com/developer/article/2015535?from=article.detail.1884646)\n\n1. 应用层：应用层决定了向用户提供应用服务时通信的活动。（HTTP、DNS、FTP）\n\n\n2. 传输层：传输层对上层应用层，提供处于网络连接中两台计算机之间的数据传输。（TCP）\n\n\n3. 网络层: 网络层用来处理在网络上流动的数据包，数据包是网络传输的最小数据单位。规定了通过怎样的路径到达对方计算机，并把数据包传送给对方。（IP、ARP）\n\n\n4. 链路层: 网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。\n\n\n5. 物理层: 考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。\n\n### 1.1 划分层次\n当两台主机之间传送文件时，是一项非常复杂的工作。\n\n可以将工作划分为三类：\n\n1. 与传送文件直接有关，例如发送端的文件传送应用程序应当确定接收端的文件管理程序已做好接收和存储文件的准备。这就需要一个文件传送模块来完成。\n\n2. 为了保证文件和文件传送命令可靠地在两个系统之间交换，可以再设立一个通信服务模块。\n\n3. 再构造一个网络接入模块,让这个模块负责做与网络接口细节有关的工作，并向上层提供服务，使上面的通信服务模块能够完成可靠通信的任务。\n\n### 1.2 分层带来的好处：\n\n1. 各层之间是独立的。某一层并不需要它的下一层是如何实现的，而仅仅需要知道该层接口所提供的服务。\n\n2. 灵活性好。当任何一层发生变化时，只需要层间接口关系保持不变，则在这层以上或以下各层均不受影响。\n\n3. 结构上可分割开。各层都可以采用最适合的技术来实现。\n\n4. 易于实现和维护。整个系统被分解为若干个相对独立的子系统，更方便维护。\n\n5. 能促进标准化工作。每一层的功能及其所提供的服务都有了明确说明。通常各层所要完成的功能主要有以下一些：\n\n　　1）差错控制，使相对应层次对等方的通信更加可靠。\n\n　　2）流量控制，发送端的发送速率必须使接收端来得及接收。\n\n　　3）分段和重装，发送端将要发送的数据块划分为更小的单位，在接收端将其还原。\n\n　　4）复用和分用，发送端几个高层会话复用一条低层的连接，在接收端再进行分用。\n\n　　5）连接建立和释放，交换数据前先建立一条逻辑连接，数据传送结束后释放连接。\n\n\n\n## [2、在浏览器中输入url地址后发生的所有过程](https://www.jianshu.com/p/c1dfc6caa520)\n\n1. DNS: 通过DNS将域名解析为目标服务器的IP地址\n2. TCP: 获取到目标服务器的IP地址后，发起TCP的三次握手，与目标服务器建立TCP连接。\n3. HTTP: 建立TCP连接后，发送HTTP报文向服务器请求资源，TCP会将HTTP请求报文按序号分割成多个报文段，并把每个报文段可靠的传给对方\n4. 服务器接受并处理完请求后，返回 HTTP 响应给浏览器客户端。\n5. 完成一次 HTTP 请求后，服务器会根据是否是长连接，来决定是不是断开TCP连接。在 HTTP/1.1 中，Connection: keep-alive 是默认启用的，表示持久连接。\n在服务器持久连接设定的超时时间（默认75秒）内没有新到达的请求，则断开与客户端的连接。而，浏览器客户端每隔 45 秒会向服务器发送 TCP keep-alive 探测包，\n来判断 TCP 连接状况，如果没有收到 ACK 应答，则主动断开与服务器的连接。HTTP keep-alive 和 TCP keep-alive 虽然都是一种保活机制，但是它们完全不相同，\n一个作用于应用层，一个作用于传输层。\n6. 断开TCP连接 四次挥手\n7. 浏览器解析htm代码,并请求htm代码中的资源(如js、css图片等)\n8. 浏览器将返回的数据按顺序解析html文件，构建DOM树和CSS规则树生成渲染树。 遇到外部CSS链接时，以异步方式来获取资源，不会产生阻塞并继续加载解析HTML。当 CSS 下载完毕后，主线程在合适的时机解析 CSS 内容。\n   但在解析执行JS脚本时，会停止解析后续HTML，可能会出现阻塞问题。\n9. 渲染树构建完毕后，根据渲染树的布局，在页面显示的过程中会多次进行Reflow和Repaint操作，计算每个节点在页面中的大小和位置等几何信息。HTML默认是流式布局的，CSS和js会打破这种布局，\n改变DOM的外观样式以及大小和位置。\n\nreplaint：屏幕的一部分重画，不影响整体布局，比如某个CSS的背景色变了，但元素的几何尺寸和位置不变。\nreflow： 意味着元件的几何尺寸变了，我们需要重新验证并计算渲染树。是渲染树的一部分或全部发生了变化。这就是Reflow，或是Layout。\n\n浏览器解析css，形成CSS规则树，当DOM树构建完成后，浏览器引擎通过DOM树和CSS规则树构造出渲染树。\n渲染树中包含可视节点的样式信息（不可见节点将不会被添加到渲染树中，如：head元素和display值为none的元素）\n\n## 3、URI和URL区别\n1）URL是URI的子集，我们所看到的URL是一种特殊的URI，它是URI的一种实现形式，也即一个URL一定是一个URI，但URI不一定是URL\n2）URL是绝对的，于整个网络而言，一个提供访问到确切资源的链接是一个URL（也属于URI）\n3）URI既有相对性又有绝对性\nURI(Identifier) 指定某个资源的唯一识别编号，用身份证号来唯一标识一个人。每个人都有自己的身份证号，对应每个资源有每个资源的URI来作为该资源的标识\n知道该资源的唯一标识，并不一定知道该资源的具体位置。每个协议有自己的规范来给该协议下的资源做标识。\nURL(Locator)   指定这个资源的路径，类似于具体的身份证卡片，可以通过身份证上的地址来找到每个人的位置。\n\n##  [4、TCP和UDP的区别](https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html#:~:text=%E6%80%BB%E7%BB%93%201%20TCP%E5%90%91%E4%B8%8A%E5%B1%82%E6%8F%90%E4%BE%9B%E9%9D%A2%E5%90%91%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%9C%8D%E5%8A%A1%20%EF%BC%8CUDP%E5%90%91%E4%B8%8A%E5%B1%82%E6%8F%90%E4%BE%9B%E6%97%A0%E8%BF%9E%E6%8E%A5%E4%B8%8D%E5%8F%AF%E9%9D%A0%E6%9C%8D%E5%8A%A1%E3%80%82%202%20%E8%99%BD%E7%84%B6,UDP%20%E5%B9%B6%E6%B2%A1%E6%9C%89%20TCP%20%E4%BC%A0%E8%BE%93%E6%9D%A5%E7%9A%84%E5%87%86%E7%A1%AE%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B9%9F%E8%83%BD%E5%9C%A8%E5%BE%88%E5%A4%9A%E5%AE%9E%E6%97%B6%E6%80%A7%E8%A6%81%E6%B1%82%E9%AB%98%E7%9A%84%E5%9C%B0%E6%96%B9%E6%9C%89%E6%89%80%E4%BD%9C%E4%B8%BA%203%20%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%87%86%E7%A1%AE%E6%80%A7%E8%A6%81%E6%B1%82%E9%AB%98%EF%BC%8C%E9%80%9F%E5%BA%A6%E5%8F%AF%E4%BB%A5%E7%9B%B8%E5%AF%B9%E8%BE%83%E6%85%A2%E7%9A%84%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%89%E7%94%A8TCP)\n\n### 4.1 **TCP/IP 是互联网相关的各类协议族的总称**\n比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP/IP 族内的协议。\n\n**TCP/IP模型**是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。\n\n- 应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。\n\n- 传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。\n\n- 网络层：负责路由以及把分组报文发送给目标网络或主机。\n\n- 链路层：负责封装和解封装IP报文，发送和接受ARP/RARP报文等。\n\n### 4.2 UDP协议 用户数据报协议\nUDP协议全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。\n\n它有以下几个特点：\n\n1. 面向无连接\n\n   首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。 并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。\n\n   具体来说就是： \n   - 在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了\n   - 在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作\n\n\n2. 有单播，多播，广播的功能\n\n   UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。\n\n\n3. UDP是面向报文的\n\n   发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分， 而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文\n\n\n4. 不可靠性\n\n   首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。 并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。\n\n   再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。\n\n   这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。\n\n\n5. 头部开销小，传输数据报文时是很高效的。\n   ![UDP Header](/img/http-note/udp-header.png)\n   UDP 头部包含了以下几个数据：\n\n   * 两个十六位的端口号，分别为源端口（可选字段）和目标端口\n   \n   * 整个数据报文的长度\n\n   * 整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误\n\n   因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的\n   \n udp特点：面向无连接不需要向tcp一样三次握手建立链接（加UDP头、去IP头就可以发送接受数据）、 \n 面向报文（对应用层下发的数据包加上UDP头就发给IP层，不会对数据包进行合并和拆分）、 \n 单播多播广播都可、 \n 不可靠性 不需要建立链接 随时可以发送和接受数据，没用拥堵控制不会考虑网络条件好坏，造成弊端是在网络条件差的时候存在丢包现象\n 优点是速率高，适用于实时性要求高的场景。\n\n### 4.3 TCP\n\nTCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。\nTCP 是面向连接的、可靠的流协议。\n流就是指不间断的数据结构，你可以把它想象成排水管中的水流。\n\n#### [TCP 三次握手 四次挥手](https://cloud.tencent.com/developer/article/1874945#:~:text=%E5%8E%9F%E5%9B%A0%EF%BC%9A%20%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D%E8%BF%9E%E6%8E%A5%20%E5%85%B6%E5%AE%9E%E5%9C%A8RFC%20793%20Transmission%20Control%20Protocol%E9%87%8C%E5%B0%B1%E6%9C%89%E6%8C%87%E5%87%BA%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%E5%8E%9F%E5%9B%A0%20The,prevent%20old%20duplicate%20connection%20initiations%20from%20causing%20confusion.)\n```\nCLIENT                        SERVER\n\nCLOSED                        CLOSED\n\nLISTEN        \n\nSYN_SEND     -> SYN ->\n\n            <- SYN、ACK <-   SYN_RCVD\n\nESTABLISED   -> ACK ->       ESTABLISED\n```\n关键字说明：\n\n- SYN：Synchronize Sequence Numbers，同步序列编号\n- ACK：Acknowledge Character，确认字符\n- SEQ：Sequence Number，序列号\n\nTCP三次握手执行过程：\n\n1. 首先，服务端和客户端都是处于CLOSED状态的，然后服务端启动，监听端口，状态变为LISTEN(监听)状态\n2. 客户端为了请求资源，发送连接，发送同步序列号SYN，此时客户端就变成了SYN-SEND状态\n3. 服务端接收到客户端请求之后，发送SYN和ACK，然后服务端状态就变成SYN-RCVD状态\n4. 客户端接收到信息之后，再次发送ACK，然后变成ESTABLISHED(已确认)状态，服务端接收到返回信息后，状态也变成ESTABLISHED(已确认)状态\n\nTCP协议为什么需要三次握手？为什么不设计成两次握手就可以？\n\n   原因：避免重复连接\n   \n   主要原因是为了防止旧的重复连接引起连接混乱问题\n   \n   比如在网络环境比较复杂的情况，客户端可能会连续发送多次请求。如果只设计成两次握手的情况，服务端只能一直接收请求，然后返回请求信息，\n   也不知道客户端是否请求成功。这些过期请求的话就会造成网络连接的混乱。\n   \n   所以设计成三次握手的情况，客户端在接收到服务端SEQ+1的返回消息之后，就会知道这个连接是历史连接，所以会发送报文给服务端，告诉服务端。\n   \n   所以TCP设计成三次握手的目的就是为了避免重复连接。为了节省资源，三次握手就可以符合实际情况，所以就没必要设计成四次握手、五次握手等等情况\n\n\n\n","slug":"http-note","published":1,"updated":"2022-09-07T12:59:15.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdkd0007i3wu7kjsf55k","content":"<h1 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h1><h2 id=\"1、TCP-x2F-IP-的分层管理及主要协议\"><a href=\"#1、TCP-x2F-IP-的分层管理及主要协议\" class=\"headerlink\" title=\"1、TCP&#x2F;IP 的分层管理及主要协议\"></a>1、<a href=\"https://cloud.tencent.com/developer/article/2015535?from=article.detail.1884646\">TCP&#x2F;IP 的分层管理及主要协议</a></h2><ol>\n<li><p>应用层：应用层决定了向用户提供应用服务时通信的活动。（HTTP、DNS、FTP）</p>\n</li>\n<li><p>传输层：传输层对上层应用层，提供处于网络连接中两台计算机之间的数据传输。（TCP）</p>\n</li>\n<li><p>网络层: 网络层用来处理在网络上流动的数据包，数据包是网络传输的最小数据单位。规定了通过怎样的路径到达对方计算机，并把数据包传送给对方。（IP、ARP）</p>\n</li>\n<li><p>链路层: 网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。</p>\n</li>\n<li><p>物理层: 考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。</p>\n</li>\n</ol>\n<h3 id=\"1-1-划分层次\"><a href=\"#1-1-划分层次\" class=\"headerlink\" title=\"1.1 划分层次\"></a>1.1 划分层次</h3><p>当两台主机之间传送文件时，是一项非常复杂的工作。</p>\n<p>可以将工作划分为三类：</p>\n<ol>\n<li><p>与传送文件直接有关，例如发送端的文件传送应用程序应当确定接收端的文件管理程序已做好接收和存储文件的准备。这就需要一个文件传送模块来完成。</p>\n</li>\n<li><p>为了保证文件和文件传送命令可靠地在两个系统之间交换，可以再设立一个通信服务模块。</p>\n</li>\n<li><p>再构造一个网络接入模块,让这个模块负责做与网络接口细节有关的工作，并向上层提供服务，使上面的通信服务模块能够完成可靠通信的任务。</p>\n</li>\n</ol>\n<h3 id=\"1-2-分层带来的好处：\"><a href=\"#1-2-分层带来的好处：\" class=\"headerlink\" title=\"1.2 分层带来的好处：\"></a>1.2 分层带来的好处：</h3><ol>\n<li><p>各层之间是独立的。某一层并不需要它的下一层是如何实现的，而仅仅需要知道该层接口所提供的服务。</p>\n</li>\n<li><p>灵活性好。当任何一层发生变化时，只需要层间接口关系保持不变，则在这层以上或以下各层均不受影响。</p>\n</li>\n<li><p>结构上可分割开。各层都可以采用最适合的技术来实现。</p>\n</li>\n<li><p>易于实现和维护。整个系统被分解为若干个相对独立的子系统，更方便维护。</p>\n</li>\n<li><p>能促进标准化工作。每一层的功能及其所提供的服务都有了明确说明。通常各层所要完成的功能主要有以下一些：</p>\n</li>\n</ol>\n<p>　　1）差错控制，使相对应层次对等方的通信更加可靠。</p>\n<p>　　2）流量控制，发送端的发送速率必须使接收端来得及接收。</p>\n<p>　　3）分段和重装，发送端将要发送的数据块划分为更小的单位，在接收端将其还原。</p>\n<p>　　4）复用和分用，发送端几个高层会话复用一条低层的连接，在接收端再进行分用。</p>\n<p>　　5）连接建立和释放，交换数据前先建立一条逻辑连接，数据传送结束后释放连接。</p>\n<h2 id=\"2、在浏览器中输入url地址后发生的所有过程\"><a href=\"#2、在浏览器中输入url地址后发生的所有过程\" class=\"headerlink\" title=\"2、在浏览器中输入url地址后发生的所有过程\"></a><a href=\"https://www.jianshu.com/p/c1dfc6caa520\">2、在浏览器中输入url地址后发生的所有过程</a></h2><ol>\n<li>DNS: 通过DNS将域名解析为目标服务器的IP地址</li>\n<li>TCP: 获取到目标服务器的IP地址后，发起TCP的三次握手，与目标服务器建立TCP连接。</li>\n<li>HTTP: 建立TCP连接后，发送HTTP报文向服务器请求资源，TCP会将HTTP请求报文按序号分割成多个报文段，并把每个报文段可靠的传给对方</li>\n<li>服务器接受并处理完请求后，返回 HTTP 响应给浏览器客户端。</li>\n<li>完成一次 HTTP 请求后，服务器会根据是否是长连接，来决定是不是断开TCP连接。在 HTTP&#x2F;1.1 中，Connection: keep-alive 是默认启用的，表示持久连接。<br>在服务器持久连接设定的超时时间（默认75秒）内没有新到达的请求，则断开与客户端的连接。而，浏览器客户端每隔 45 秒会向服务器发送 TCP keep-alive 探测包，<br>来判断 TCP 连接状况，如果没有收到 ACK 应答，则主动断开与服务器的连接。HTTP keep-alive 和 TCP keep-alive 虽然都是一种保活机制，但是它们完全不相同，<br>一个作用于应用层，一个作用于传输层。</li>\n<li>断开TCP连接 四次挥手</li>\n<li>浏览器解析htm代码,并请求htm代码中的资源(如js、css图片等)</li>\n<li>浏览器将返回的数据按顺序解析html文件，构建DOM树和CSS规则树生成渲染树。 遇到外部CSS链接时，以异步方式来获取资源，不会产生阻塞并继续加载解析HTML。当 CSS 下载完毕后，主线程在合适的时机解析 CSS 内容。<br>但在解析执行JS脚本时，会停止解析后续HTML，可能会出现阻塞问题。</li>\n<li>渲染树构建完毕后，根据渲染树的布局，在页面显示的过程中会多次进行Reflow和Repaint操作，计算每个节点在页面中的大小和位置等几何信息。HTML默认是流式布局的，CSS和js会打破这种布局，<br>改变DOM的外观样式以及大小和位置。</li>\n</ol>\n<p>replaint：屏幕的一部分重画，不影响整体布局，比如某个CSS的背景色变了，但元素的几何尺寸和位置不变。<br>reflow： 意味着元件的几何尺寸变了，我们需要重新验证并计算渲染树。是渲染树的一部分或全部发生了变化。这就是Reflow，或是Layout。</p>\n<p>浏览器解析css，形成CSS规则树，当DOM树构建完成后，浏览器引擎通过DOM树和CSS规则树构造出渲染树。<br>渲染树中包含可视节点的样式信息（不可见节点将不会被添加到渲染树中，如：head元素和display值为none的元素）</p>\n<h2 id=\"3、URI和URL区别\"><a href=\"#3、URI和URL区别\" class=\"headerlink\" title=\"3、URI和URL区别\"></a>3、URI和URL区别</h2><p>1）URL是URI的子集，我们所看到的URL是一种特殊的URI，它是URI的一种实现形式，也即一个URL一定是一个URI，但URI不一定是URL<br>2）URL是绝对的，于整个网络而言，一个提供访问到确切资源的链接是一个URL（也属于URI）<br>3）URI既有相对性又有绝对性<br>URI(Identifier) 指定某个资源的唯一识别编号，用身份证号来唯一标识一个人。每个人都有自己的身份证号，对应每个资源有每个资源的URI来作为该资源的标识<br>知道该资源的唯一标识，并不一定知道该资源的具体位置。每个协议有自己的规范来给该协议下的资源做标识。<br>URL(Locator)   指定这个资源的路径，类似于具体的身份证卡片，可以通过身份证上的地址来找到每个人的位置。</p>\n<h2 id=\"4、TCP和UDP的区别\"><a href=\"#4、TCP和UDP的区别\" class=\"headerlink\" title=\"4、TCP和UDP的区别\"></a><a href=\"https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html#:~:text=%E6%80%BB%E7%BB%93%201%20TCP%E5%90%91%E4%B8%8A%E5%B1%82%E6%8F%90%E4%BE%9B%E9%9D%A2%E5%90%91%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%9C%8D%E5%8A%A1%20%EF%BC%8CUDP%E5%90%91%E4%B8%8A%E5%B1%82%E6%8F%90%E4%BE%9B%E6%97%A0%E8%BF%9E%E6%8E%A5%E4%B8%8D%E5%8F%AF%E9%9D%A0%E6%9C%8D%E5%8A%A1%E3%80%82%202%20%E8%99%BD%E7%84%B6,UDP%20%E5%B9%B6%E6%B2%A1%E6%9C%89%20TCP%20%E4%BC%A0%E8%BE%93%E6%9D%A5%E7%9A%84%E5%87%86%E7%A1%AE%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B9%9F%E8%83%BD%E5%9C%A8%E5%BE%88%E5%A4%9A%E5%AE%9E%E6%97%B6%E6%80%A7%E8%A6%81%E6%B1%82%E9%AB%98%E7%9A%84%E5%9C%B0%E6%96%B9%E6%9C%89%E6%89%80%E4%BD%9C%E4%B8%BA%203%20%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%87%86%E7%A1%AE%E6%80%A7%E8%A6%81%E6%B1%82%E9%AB%98%EF%BC%8C%E9%80%9F%E5%BA%A6%E5%8F%AF%E4%BB%A5%E7%9B%B8%E5%AF%B9%E8%BE%83%E6%85%A2%E7%9A%84%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%89%E7%94%A8TCP\">4、TCP和UDP的区别</a></h2><h3 id=\"4-1-TCP-x2F-IP-是互联网相关的各类协议族的总称\"><a href=\"#4-1-TCP-x2F-IP-是互联网相关的各类协议族的总称\" class=\"headerlink\" title=\"4.1 TCP&#x2F;IP 是互联网相关的各类协议族的总称\"></a>4.1 <strong>TCP&#x2F;IP 是互联网相关的各类协议族的总称</strong></h3><p>比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP&#x2F;IP 族内的协议。</p>\n<p><strong>TCP&#x2F;IP模型</strong>是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。</p>\n<ul>\n<li><p>应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。</p>\n</li>\n<li><p>传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。</p>\n</li>\n<li><p>网络层：负责路由以及把分组报文发送给目标网络或主机。</p>\n</li>\n<li><p>链路层：负责封装和解封装IP报文，发送和接受ARP&#x2F;RARP报文等。</p>\n</li>\n</ul>\n<h3 id=\"4-2-UDP协议-用户数据报协议\"><a href=\"#4-2-UDP协议-用户数据报协议\" class=\"headerlink\" title=\"4.2 UDP协议 用户数据报协议\"></a>4.2 UDP协议 用户数据报协议</h3><p>UDP协议全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p>\n<p>它有以下几个特点：</p>\n<ol>\n<li><p>面向无连接</p>\n<p>首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。 并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。</p>\n<p>具体来说就是： </p>\n<ul>\n<li>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了</li>\n<li>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</li>\n</ul>\n</li>\n<li><p>有单播，多播，广播的功能</p>\n<p>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</p>\n</li>\n<li><p>UDP是面向报文的</p>\n<p>发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分， 而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文</p>\n</li>\n<li><p>不可靠性</p>\n<p>首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。 并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。</p>\n<p>再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。</p>\n<p>这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p>\n</li>\n<li><p>头部开销小，传输数据报文时是很高效的。<br><img src=\"/img/http-note/udp-header.png\" alt=\"UDP Header\"><br>UDP 头部包含了以下几个数据：</p>\n<ul>\n<li><p>两个十六位的端口号，分别为源端口（可选字段）和目标端口</p>\n</li>\n<li><p>整个数据报文的长度</p>\n</li>\n<li><p>整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误</p>\n</li>\n</ul>\n<p>因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的</p>\n</li>\n</ol>\n<p> udp特点：面向无连接不需要向tcp一样三次握手建立链接（加UDP头、去IP头就可以发送接受数据）、<br> 面向报文（对应用层下发的数据包加上UDP头就发给IP层，不会对数据包进行合并和拆分）、<br> 单播多播广播都可、<br> 不可靠性 不需要建立链接 随时可以发送和接受数据，没用拥堵控制不会考虑网络条件好坏，造成弊端是在网络条件差的时候存在丢包现象<br> 优点是速率高，适用于实时性要求高的场景。</p>\n<h3 id=\"4-3-TCP\"><a href=\"#4-3-TCP\" class=\"headerlink\" title=\"4.3 TCP\"></a>4.3 TCP</h3><p>TCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。<br>TCP 是面向连接的、可靠的流协议。<br>流就是指不间断的数据结构，你可以把它想象成排水管中的水流。</p>\n<h4 id=\"TCP-三次握手-四次挥手\"><a href=\"#TCP-三次握手-四次挥手\" class=\"headerlink\" title=\"TCP 三次握手 四次挥手\"></a><a href=\"https://cloud.tencent.com/developer/article/1874945#:~:text=%E5%8E%9F%E5%9B%A0%EF%BC%9A%20%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D%E8%BF%9E%E6%8E%A5%20%E5%85%B6%E5%AE%9E%E5%9C%A8RFC%20793%20Transmission%20Control%20Protocol%E9%87%8C%E5%B0%B1%E6%9C%89%E6%8C%87%E5%87%BA%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%E5%8E%9F%E5%9B%A0%20The,prevent%20old%20duplicate%20connection%20initiations%20from%20causing%20confusion.\">TCP 三次握手 四次挥手</a></h4><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">CLIENT                        SERVER<br><br>CLOSED                        CLOSED<br><br>LISTEN        <br><br>SYN_SEND     -&gt; SYN -&gt;<br><br>            &lt;- SYN、ACK &lt;-   SYN_RCVD<br><br>ESTABLISED   -&gt; ACK -&gt;       ESTABLISED<br></code></pre></td></tr></table></figure>\n<p>关键字说明：</p>\n<ul>\n<li>SYN：Synchronize Sequence Numbers，同步序列编号</li>\n<li>ACK：Acknowledge Character，确认字符</li>\n<li>SEQ：Sequence Number，序列号</li>\n</ul>\n<p>TCP三次握手执行过程：</p>\n<ol>\n<li>首先，服务端和客户端都是处于CLOSED状态的，然后服务端启动，监听端口，状态变为LISTEN(监听)状态</li>\n<li>客户端为了请求资源，发送连接，发送同步序列号SYN，此时客户端就变成了SYN-SEND状态</li>\n<li>服务端接收到客户端请求之后，发送SYN和ACK，然后服务端状态就变成SYN-RCVD状态</li>\n<li>客户端接收到信息之后，再次发送ACK，然后变成ESTABLISHED(已确认)状态，服务端接收到返回信息后，状态也变成ESTABLISHED(已确认)状态</li>\n</ol>\n<p>TCP协议为什么需要三次握手？为什么不设计成两次握手就可以？</p>\n<p>   原因：避免重复连接</p>\n<p>   主要原因是为了防止旧的重复连接引起连接混乱问题</p>\n<p>   比如在网络环境比较复杂的情况，客户端可能会连续发送多次请求。如果只设计成两次握手的情况，服务端只能一直接收请求，然后返回请求信息，<br>   也不知道客户端是否请求成功。这些过期请求的话就会造成网络连接的混乱。</p>\n<p>   所以设计成三次握手的情况，客户端在接收到服务端SEQ+1的返回消息之后，就会知道这个连接是历史连接，所以会发送报文给服务端，告诉服务端。</p>\n<p>   所以TCP设计成三次握手的目的就是为了避免重复连接。为了节省资源，三次握手就可以符合实际情况，所以就没必要设计成四次握手、五次握手等等情况</p>\n","site":{"data":{}},"wordcount":4516,"excerpt":"","more":"<h1 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h1><h2 id=\"1、TCP-x2F-IP-的分层管理及主要协议\"><a href=\"#1、TCP-x2F-IP-的分层管理及主要协议\" class=\"headerlink\" title=\"1、TCP&#x2F;IP 的分层管理及主要协议\"></a>1、<a href=\"https://cloud.tencent.com/developer/article/2015535?from=article.detail.1884646\">TCP&#x2F;IP 的分层管理及主要协议</a></h2><ol>\n<li><p>应用层：应用层决定了向用户提供应用服务时通信的活动。（HTTP、DNS、FTP）</p>\n</li>\n<li><p>传输层：传输层对上层应用层，提供处于网络连接中两台计算机之间的数据传输。（TCP）</p>\n</li>\n<li><p>网络层: 网络层用来处理在网络上流动的数据包，数据包是网络传输的最小数据单位。规定了通过怎样的路径到达对方计算机，并把数据包传送给对方。（IP、ARP）</p>\n</li>\n<li><p>链路层: 网络层针对的还是主机之间的数据传输服务，而主机之间可以有很多链路，链路层协议就是为同一链路的主机提供数据传输服务。数据链路层把网络层传下来的分组封装成帧。</p>\n</li>\n<li><p>物理层: 考虑的是怎样在传输媒体上传输数据比特流，而不是指具体的传输媒体。物理层的作用是尽可能屏蔽传输媒体和通信手段的差异，使数据链路层感觉不到这些差异。</p>\n</li>\n</ol>\n<h3 id=\"1-1-划分层次\"><a href=\"#1-1-划分层次\" class=\"headerlink\" title=\"1.1 划分层次\"></a>1.1 划分层次</h3><p>当两台主机之间传送文件时，是一项非常复杂的工作。</p>\n<p>可以将工作划分为三类：</p>\n<ol>\n<li><p>与传送文件直接有关，例如发送端的文件传送应用程序应当确定接收端的文件管理程序已做好接收和存储文件的准备。这就需要一个文件传送模块来完成。</p>\n</li>\n<li><p>为了保证文件和文件传送命令可靠地在两个系统之间交换，可以再设立一个通信服务模块。</p>\n</li>\n<li><p>再构造一个网络接入模块,让这个模块负责做与网络接口细节有关的工作，并向上层提供服务，使上面的通信服务模块能够完成可靠通信的任务。</p>\n</li>\n</ol>\n<h3 id=\"1-2-分层带来的好处：\"><a href=\"#1-2-分层带来的好处：\" class=\"headerlink\" title=\"1.2 分层带来的好处：\"></a>1.2 分层带来的好处：</h3><ol>\n<li><p>各层之间是独立的。某一层并不需要它的下一层是如何实现的，而仅仅需要知道该层接口所提供的服务。</p>\n</li>\n<li><p>灵活性好。当任何一层发生变化时，只需要层间接口关系保持不变，则在这层以上或以下各层均不受影响。</p>\n</li>\n<li><p>结构上可分割开。各层都可以采用最适合的技术来实现。</p>\n</li>\n<li><p>易于实现和维护。整个系统被分解为若干个相对独立的子系统，更方便维护。</p>\n</li>\n<li><p>能促进标准化工作。每一层的功能及其所提供的服务都有了明确说明。通常各层所要完成的功能主要有以下一些：</p>\n</li>\n</ol>\n<p>　　1）差错控制，使相对应层次对等方的通信更加可靠。</p>\n<p>　　2）流量控制，发送端的发送速率必须使接收端来得及接收。</p>\n<p>　　3）分段和重装，发送端将要发送的数据块划分为更小的单位，在接收端将其还原。</p>\n<p>　　4）复用和分用，发送端几个高层会话复用一条低层的连接，在接收端再进行分用。</p>\n<p>　　5）连接建立和释放，交换数据前先建立一条逻辑连接，数据传送结束后释放连接。</p>\n<h2 id=\"2、在浏览器中输入url地址后发生的所有过程\"><a href=\"#2、在浏览器中输入url地址后发生的所有过程\" class=\"headerlink\" title=\"2、在浏览器中输入url地址后发生的所有过程\"></a><a href=\"https://www.jianshu.com/p/c1dfc6caa520\">2、在浏览器中输入url地址后发生的所有过程</a></h2><ol>\n<li>DNS: 通过DNS将域名解析为目标服务器的IP地址</li>\n<li>TCP: 获取到目标服务器的IP地址后，发起TCP的三次握手，与目标服务器建立TCP连接。</li>\n<li>HTTP: 建立TCP连接后，发送HTTP报文向服务器请求资源，TCP会将HTTP请求报文按序号分割成多个报文段，并把每个报文段可靠的传给对方</li>\n<li>服务器接受并处理完请求后，返回 HTTP 响应给浏览器客户端。</li>\n<li>完成一次 HTTP 请求后，服务器会根据是否是长连接，来决定是不是断开TCP连接。在 HTTP&#x2F;1.1 中，Connection: keep-alive 是默认启用的，表示持久连接。<br>在服务器持久连接设定的超时时间（默认75秒）内没有新到达的请求，则断开与客户端的连接。而，浏览器客户端每隔 45 秒会向服务器发送 TCP keep-alive 探测包，<br>来判断 TCP 连接状况，如果没有收到 ACK 应答，则主动断开与服务器的连接。HTTP keep-alive 和 TCP keep-alive 虽然都是一种保活机制，但是它们完全不相同，<br>一个作用于应用层，一个作用于传输层。</li>\n<li>断开TCP连接 四次挥手</li>\n<li>浏览器解析htm代码,并请求htm代码中的资源(如js、css图片等)</li>\n<li>浏览器将返回的数据按顺序解析html文件，构建DOM树和CSS规则树生成渲染树。 遇到外部CSS链接时，以异步方式来获取资源，不会产生阻塞并继续加载解析HTML。当 CSS 下载完毕后，主线程在合适的时机解析 CSS 内容。<br>但在解析执行JS脚本时，会停止解析后续HTML，可能会出现阻塞问题。</li>\n<li>渲染树构建完毕后，根据渲染树的布局，在页面显示的过程中会多次进行Reflow和Repaint操作，计算每个节点在页面中的大小和位置等几何信息。HTML默认是流式布局的，CSS和js会打破这种布局，<br>改变DOM的外观样式以及大小和位置。</li>\n</ol>\n<p>replaint：屏幕的一部分重画，不影响整体布局，比如某个CSS的背景色变了，但元素的几何尺寸和位置不变。<br>reflow： 意味着元件的几何尺寸变了，我们需要重新验证并计算渲染树。是渲染树的一部分或全部发生了变化。这就是Reflow，或是Layout。</p>\n<p>浏览器解析css，形成CSS规则树，当DOM树构建完成后，浏览器引擎通过DOM树和CSS规则树构造出渲染树。<br>渲染树中包含可视节点的样式信息（不可见节点将不会被添加到渲染树中，如：head元素和display值为none的元素）</p>\n<h2 id=\"3、URI和URL区别\"><a href=\"#3、URI和URL区别\" class=\"headerlink\" title=\"3、URI和URL区别\"></a>3、URI和URL区别</h2><p>1）URL是URI的子集，我们所看到的URL是一种特殊的URI，它是URI的一种实现形式，也即一个URL一定是一个URI，但URI不一定是URL<br>2）URL是绝对的，于整个网络而言，一个提供访问到确切资源的链接是一个URL（也属于URI）<br>3）URI既有相对性又有绝对性<br>URI(Identifier) 指定某个资源的唯一识别编号，用身份证号来唯一标识一个人。每个人都有自己的身份证号，对应每个资源有每个资源的URI来作为该资源的标识<br>知道该资源的唯一标识，并不一定知道该资源的具体位置。每个协议有自己的规范来给该协议下的资源做标识。<br>URL(Locator)   指定这个资源的路径，类似于具体的身份证卡片，可以通过身份证上的地址来找到每个人的位置。</p>\n<h2 id=\"4、TCP和UDP的区别\"><a href=\"#4、TCP和UDP的区别\" class=\"headerlink\" title=\"4、TCP和UDP的区别\"></a><a href=\"https://www.cnblogs.com/fundebug/p/differences-of-tcp-and-udp.html#:~:text=%E6%80%BB%E7%BB%93%201%20TCP%E5%90%91%E4%B8%8A%E5%B1%82%E6%8F%90%E4%BE%9B%E9%9D%A2%E5%90%91%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8F%AF%E9%9D%A0%E6%9C%8D%E5%8A%A1%20%EF%BC%8CUDP%E5%90%91%E4%B8%8A%E5%B1%82%E6%8F%90%E4%BE%9B%E6%97%A0%E8%BF%9E%E6%8E%A5%E4%B8%8D%E5%8F%AF%E9%9D%A0%E6%9C%8D%E5%8A%A1%E3%80%82%202%20%E8%99%BD%E7%84%B6,UDP%20%E5%B9%B6%E6%B2%A1%E6%9C%89%20TCP%20%E4%BC%A0%E8%BE%93%E6%9D%A5%E7%9A%84%E5%87%86%E7%A1%AE%EF%BC%8C%E4%BD%86%E6%98%AF%E4%B9%9F%E8%83%BD%E5%9C%A8%E5%BE%88%E5%A4%9A%E5%AE%9E%E6%97%B6%E6%80%A7%E8%A6%81%E6%B1%82%E9%AB%98%E7%9A%84%E5%9C%B0%E6%96%B9%E6%9C%89%E6%89%80%E4%BD%9C%E4%B8%BA%203%20%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%87%86%E7%A1%AE%E6%80%A7%E8%A6%81%E6%B1%82%E9%AB%98%EF%BC%8C%E9%80%9F%E5%BA%A6%E5%8F%AF%E4%BB%A5%E7%9B%B8%E5%AF%B9%E8%BE%83%E6%85%A2%E7%9A%84%EF%BC%8C%E5%8F%AF%E4%BB%A5%E9%80%89%E7%94%A8TCP\">4、TCP和UDP的区别</a></h2><h3 id=\"4-1-TCP-x2F-IP-是互联网相关的各类协议族的总称\"><a href=\"#4-1-TCP-x2F-IP-是互联网相关的各类协议族的总称\" class=\"headerlink\" title=\"4.1 TCP&#x2F;IP 是互联网相关的各类协议族的总称\"></a>4.1 <strong>TCP&#x2F;IP 是互联网相关的各类协议族的总称</strong></h3><p>比如：TCP，UDP，IP，FTP，HTTP，ICMP，SMTP 等都属于 TCP&#x2F;IP 族内的协议。</p>\n<p><strong>TCP&#x2F;IP模型</strong>是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。</p>\n<ul>\n<li><p>应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。</p>\n</li>\n<li><p>传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。</p>\n</li>\n<li><p>网络层：负责路由以及把分组报文发送给目标网络或主机。</p>\n</li>\n<li><p>链路层：负责封装和解封装IP报文，发送和接受ARP&#x2F;RARP报文等。</p>\n</li>\n</ul>\n<h3 id=\"4-2-UDP协议-用户数据报协议\"><a href=\"#4-2-UDP协议-用户数据报协议\" class=\"headerlink\" title=\"4.2 UDP协议 用户数据报协议\"></a>4.2 UDP协议 用户数据报协议</h3><p>UDP协议全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在第四层——传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p>\n<p>它有以下几个特点：</p>\n<ol>\n<li><p>面向无连接</p>\n<p>首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。 并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。</p>\n<p>具体来说就是： </p>\n<ul>\n<li>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了</li>\n<li>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</li>\n</ul>\n</li>\n<li><p>有单播，多播，广播的功能</p>\n<p>UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</p>\n</li>\n<li><p>UDP是面向报文的</p>\n<p>发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分， 而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文</p>\n</li>\n<li><p>不可靠性</p>\n<p>首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。 并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。</p>\n<p>再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。</p>\n<p>这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p>\n</li>\n<li><p>头部开销小，传输数据报文时是很高效的。<br><img src=\"/img/http-note/udp-header.png\" alt=\"UDP Header\"><br>UDP 头部包含了以下几个数据：</p>\n<ul>\n<li><p>两个十六位的端口号，分别为源端口（可选字段）和目标端口</p>\n</li>\n<li><p>整个数据报文的长度</p>\n</li>\n<li><p>整个数据报文的检验和（IPv4 可选 字段），该字段用于发现头部信息和数据中的错误</p>\n</li>\n</ul>\n<p>因此 UDP 的头部开销小，只有八字节，相比 TCP 的至少二十字节要少得多，在传输数据报文时是很高效的</p>\n</li>\n</ol>\n<p> udp特点：面向无连接不需要向tcp一样三次握手建立链接（加UDP头、去IP头就可以发送接受数据）、<br> 面向报文（对应用层下发的数据包加上UDP头就发给IP层，不会对数据包进行合并和拆分）、<br> 单播多播广播都可、<br> 不可靠性 不需要建立链接 随时可以发送和接受数据，没用拥堵控制不会考虑网络条件好坏，造成弊端是在网络条件差的时候存在丢包现象<br> 优点是速率高，适用于实时性要求高的场景。</p>\n<h3 id=\"4-3-TCP\"><a href=\"#4-3-TCP\" class=\"headerlink\" title=\"4.3 TCP\"></a>4.3 TCP</h3><p>TCP协议全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的RFC 793定义。<br>TCP 是面向连接的、可靠的流协议。<br>流就是指不间断的数据结构，你可以把它想象成排水管中的水流。</p>\n<h4 id=\"TCP-三次握手-四次挥手\"><a href=\"#TCP-三次握手-四次挥手\" class=\"headerlink\" title=\"TCP 三次握手 四次挥手\"></a><a href=\"https://cloud.tencent.com/developer/article/1874945#:~:text=%E5%8E%9F%E5%9B%A0%EF%BC%9A%20%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D%E8%BF%9E%E6%8E%A5%20%E5%85%B6%E5%AE%9E%E5%9C%A8RFC%20793%20Transmission%20Control%20Protocol%E9%87%8C%E5%B0%B1%E6%9C%89%E6%8C%87%E5%87%BA%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E7%9A%84%E5%8E%9F%E5%9B%A0%20The,prevent%20old%20duplicate%20connection%20initiations%20from%20causing%20confusion.\">TCP 三次握手 四次挥手</a></h4><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">CLIENT                        SERVER<br><br>CLOSED                        CLOSED<br><br>LISTEN        <br><br>SYN_SEND     -&gt; SYN -&gt;<br><br>            &lt;- SYN、ACK &lt;-   SYN_RCVD<br><br>ESTABLISED   -&gt; ACK -&gt;       ESTABLISED<br></code></pre></td></tr></table></figure>\n<p>关键字说明：</p>\n<ul>\n<li>SYN：Synchronize Sequence Numbers，同步序列编号</li>\n<li>ACK：Acknowledge Character，确认字符</li>\n<li>SEQ：Sequence Number，序列号</li>\n</ul>\n<p>TCP三次握手执行过程：</p>\n<ol>\n<li>首先，服务端和客户端都是处于CLOSED状态的，然后服务端启动，监听端口，状态变为LISTEN(监听)状态</li>\n<li>客户端为了请求资源，发送连接，发送同步序列号SYN，此时客户端就变成了SYN-SEND状态</li>\n<li>服务端接收到客户端请求之后，发送SYN和ACK，然后服务端状态就变成SYN-RCVD状态</li>\n<li>客户端接收到信息之后，再次发送ACK，然后变成ESTABLISHED(已确认)状态，服务端接收到返回信息后，状态也变成ESTABLISHED(已确认)状态</li>\n</ol>\n<p>TCP协议为什么需要三次握手？为什么不设计成两次握手就可以？</p>\n<p>   原因：避免重复连接</p>\n<p>   主要原因是为了防止旧的重复连接引起连接混乱问题</p>\n<p>   比如在网络环境比较复杂的情况，客户端可能会连续发送多次请求。如果只设计成两次握手的情况，服务端只能一直接收请求，然后返回请求信息，<br>   也不知道客户端是否请求成功。这些过期请求的话就会造成网络连接的混乱。</p>\n<p>   所以设计成三次握手的情况，客户端在接收到服务端SEQ+1的返回消息之后，就会知道这个连接是历史连接，所以会发送报文给服务端，告诉服务端。</p>\n<p>   所以TCP设计成三次握手的目的就是为了避免重复连接。为了节省资源，三次握手就可以符合实际情况，所以就没必要设计成四次握手、五次握手等等情况</p>\n"},{"title":"About Hexo","date":"2022-06-21T07:21:00.000Z","_content":"# 有关Hexo-fluid主题的各种配置\n\n##  一、页脚增加网站运行时长 \n\n**只需要在主题配置中的 footer: content 添加：**\n```yaml\nfooter:\n  content: '\n    <a href=\"https://hexo.io\" target=\"_blank\" rel=\"nofollow noopener\"><span>Hexo</span></a>\n    <i class=\"iconfont icon-love\"></i>\n    <a href=\"https://github.com/fluid-dev/hexo-theme-fluid\" target=\"_blank\" rel=\"nofollow noopener\"><span>Fluid</span></a>\n    <div style=\"font-size: 0.85rem\">\n      <span id=\"timeDate\">载入天数...</span>\n      <span id=\"times\">载入时分秒...</span>\n      <script src=\"/js/duration.js\"></script>\n    </div>\n  '\n```\n**content 前三行是 Fluid 原有的页脚内容，建议不要删除，可稍作修改，保留 Fluid 的超链接，用于向更多人推广主题。**\n\n**duration.js 包含的才是功能代码，我们在博客目录下创建 source/js/duration.js，内容如下：**\n``` javasrcipt\n    !(function() {\n    /** 计时起始时间，自行修改 **/\n    var start = new Date(\"2020/01/01 00:00:00\");\n\n    function update() {\n        var now = new Date();\n        now.setTime(now.getTime()+250);\n        days = (now - start) / 1000 / 60 / 60 / 24;\n        dnum = Math.floor(days);\n        hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);\n        hnum = Math.floor(hours);\n        if(String(hnum).length === 1 ){\n        hnum = \"0\" + hnum;\n        }\n        minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n        mnum = Math.floor(minutes);\n        if(String(mnum).length === 1 ){\n        mnum = \"0\" + mnum;\n        }\n        seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n        snum = Math.round(seconds);\n        if(String(snum).length === 1 ){\n        snum = \"0\" + snum;\n        }\n        document.getElementById(\"timeDate\").innerHTML = \"本站安全运行&nbsp\"+dnum+\"&nbsp天\";\n        document.getElementById(\"times\").innerHTML = hnum + \"&nbsp小时&nbsp\" + mnum + \"&nbsp分&nbsp\" + snum + \"&nbsp秒\";\n    }\n\n    update();\n    setInterval(update, 1000);\n    })();\n```\n**不要忘记把上面注释的时间改为自己的时间，至此这项功能引入了。**\n\n## 二、博客阅读量统计\n\n这里我使用一个第三方服务Leancloud来统计文章的阅读量。\n\n首先需要打开 Leancloud 的官网，注册一个账号，注册好账号之后，点击左上角的按钮，创建一个应用。\n\n创建时「应用名称」可以随你自由命名，下方的「应用计价方案」选择「开发版」就好，不需要花钱，接着点击右下角的蓝色按钮「创建」。\n\n创建好应用之后，打开应用的「设置 >> 应用凭证」，页面中有两个参数，一个是AppID，一个是AppKey。\n\n这两个参数下方的值等会要用到，暂时不要把网页关掉。\n\n在主题 _config.yaml 中 leancloud 下方有两个需要配置的参数，一个是app_id，一个是app_key，这两个参数的值就分别对应上面说到的AppID和AppKey。\n\n接着我们还要开启每篇博客的数据统计的功能，在博客主题配置文件中搜索关键字 view。\n\n每篇博客的数据统计 views 下方有两个参数，一个是 enable，将其设置为 enable 或 true 都可以；一个是统计的来源 source，设置为 leancloud。","source":"_posts/hello-world.md","raw":"---\ntitle: About Hexo\ndate: 2022-06-21 15:21:00\ncategories: \n - Hexo\n---\n# 有关Hexo-fluid主题的各种配置\n\n##  一、页脚增加网站运行时长 \n\n**只需要在主题配置中的 footer: content 添加：**\n```yaml\nfooter:\n  content: '\n    <a href=\"https://hexo.io\" target=\"_blank\" rel=\"nofollow noopener\"><span>Hexo</span></a>\n    <i class=\"iconfont icon-love\"></i>\n    <a href=\"https://github.com/fluid-dev/hexo-theme-fluid\" target=\"_blank\" rel=\"nofollow noopener\"><span>Fluid</span></a>\n    <div style=\"font-size: 0.85rem\">\n      <span id=\"timeDate\">载入天数...</span>\n      <span id=\"times\">载入时分秒...</span>\n      <script src=\"/js/duration.js\"></script>\n    </div>\n  '\n```\n**content 前三行是 Fluid 原有的页脚内容，建议不要删除，可稍作修改，保留 Fluid 的超链接，用于向更多人推广主题。**\n\n**duration.js 包含的才是功能代码，我们在博客目录下创建 source/js/duration.js，内容如下：**\n``` javasrcipt\n    !(function() {\n    /** 计时起始时间，自行修改 **/\n    var start = new Date(\"2020/01/01 00:00:00\");\n\n    function update() {\n        var now = new Date();\n        now.setTime(now.getTime()+250);\n        days = (now - start) / 1000 / 60 / 60 / 24;\n        dnum = Math.floor(days);\n        hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);\n        hnum = Math.floor(hours);\n        if(String(hnum).length === 1 ){\n        hnum = \"0\" + hnum;\n        }\n        minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);\n        mnum = Math.floor(minutes);\n        if(String(mnum).length === 1 ){\n        mnum = \"0\" + mnum;\n        }\n        seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);\n        snum = Math.round(seconds);\n        if(String(snum).length === 1 ){\n        snum = \"0\" + snum;\n        }\n        document.getElementById(\"timeDate\").innerHTML = \"本站安全运行&nbsp\"+dnum+\"&nbsp天\";\n        document.getElementById(\"times\").innerHTML = hnum + \"&nbsp小时&nbsp\" + mnum + \"&nbsp分&nbsp\" + snum + \"&nbsp秒\";\n    }\n\n    update();\n    setInterval(update, 1000);\n    })();\n```\n**不要忘记把上面注释的时间改为自己的时间，至此这项功能引入了。**\n\n## 二、博客阅读量统计\n\n这里我使用一个第三方服务Leancloud来统计文章的阅读量。\n\n首先需要打开 Leancloud 的官网，注册一个账号，注册好账号之后，点击左上角的按钮，创建一个应用。\n\n创建时「应用名称」可以随你自由命名，下方的「应用计价方案」选择「开发版」就好，不需要花钱，接着点击右下角的蓝色按钮「创建」。\n\n创建好应用之后，打开应用的「设置 >> 应用凭证」，页面中有两个参数，一个是AppID，一个是AppKey。\n\n这两个参数下方的值等会要用到，暂时不要把网页关掉。\n\n在主题 _config.yaml 中 leancloud 下方有两个需要配置的参数，一个是app_id，一个是app_key，这两个参数的值就分别对应上面说到的AppID和AppKey。\n\n接着我们还要开启每篇博客的数据统计的功能，在博客主题配置文件中搜索关键字 view。\n\n每篇博客的数据统计 views 下方有两个参数，一个是 enable，将其设置为 enable 或 true 都可以；一个是统计的来源 source，设置为 leancloud。","slug":"hello-world","published":1,"updated":"2022-08-19T13:35:34.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdke0009i3wuf50yb27l","content":"<h1 id=\"有关Hexo-fluid主题的各种配置\"><a href=\"#有关Hexo-fluid主题的各种配置\" class=\"headerlink\" title=\"有关Hexo-fluid主题的各种配置\"></a>有关Hexo-fluid主题的各种配置</h1><h2 id=\"一、页脚增加网站运行时长\"><a href=\"#一、页脚增加网站运行时长\" class=\"headerlink\" title=\"一、页脚增加网站运行时长\"></a>一、页脚增加网站运行时长</h2><p><strong>只需要在主题配置中的 footer: content 添加：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">footer:</span><br>  <span class=\"hljs-attr\">content:</span> <span class=\"hljs-string\">&#x27;</span><br><span class=\"hljs-string\">    &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span><br><span class=\"hljs-string\">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span><br><span class=\"hljs-string\">    &lt;a href=&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span><br><span class=\"hljs-string\">    &lt;div style=&quot;font-size: 0.85rem&quot;&gt;</span><br><span class=\"hljs-string\">      &lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class=\"hljs-string\">      &lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class=\"hljs-string\">      &lt;script src=&quot;/js/duration.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"hljs-string\">    &lt;/div&gt;</span><br><span class=\"hljs-string\">  &#x27;</span><br></code></pre></td></tr></table></figure>\n<p><strong>content 前三行是 Fluid 原有的页脚内容，建议不要删除，可稍作修改，保留 Fluid 的超链接，用于向更多人推广主题。</strong></p>\n<p><strong>duration.js 包含的才是功能代码，我们在博客目录下创建 source&#x2F;js&#x2F;duration.js，内容如下：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javasrcipt\">!(function() &#123;<br>/** 计时起始时间，自行修改 **/<br>var start = new Date(&quot;2020/01/01 00:00:00&quot;);<br><br>function update() &#123;<br>    var now = new Date();<br>    now.setTime(now.getTime()+250);<br>    days = (now - start) / 1000 / 60 / 60 / 24;<br>    dnum = Math.floor(days);<br>    hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);<br>    hnum = Math.floor(hours);<br>    if(String(hnum).length === 1 )&#123;<br>    hnum = &quot;0&quot; + hnum;<br>    &#125;<br>    minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);<br>    mnum = Math.floor(minutes);<br>    if(String(mnum).length === 1 )&#123;<br>    mnum = &quot;0&quot; + mnum;<br>    &#125;<br>    seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);<br>    snum = Math.round(seconds);<br>    if(String(snum).length === 1 )&#123;<br>    snum = &quot;0&quot; + snum;<br>    &#125;<br>    document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;本站安全运行&amp;nbsp&quot;+dnum+&quot;&amp;nbsp天&quot;;<br>    document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot;&amp;nbsp小时&amp;nbsp&quot; + mnum + &quot;&amp;nbsp分&amp;nbsp&quot; + snum + &quot;&amp;nbsp秒&quot;;<br>&#125;<br><br>update();<br>setInterval(update, 1000);<br>&#125;)();<br></code></pre></td></tr></table></figure>\n<p><strong>不要忘记把上面注释的时间改为自己的时间，至此这项功能引入了。</strong></p>\n<h2 id=\"二、博客阅读量统计\"><a href=\"#二、博客阅读量统计\" class=\"headerlink\" title=\"二、博客阅读量统计\"></a>二、博客阅读量统计</h2><p>这里我使用一个第三方服务Leancloud来统计文章的阅读量。</p>\n<p>首先需要打开 Leancloud 的官网，注册一个账号，注册好账号之后，点击左上角的按钮，创建一个应用。</p>\n<p>创建时「应用名称」可以随你自由命名，下方的「应用计价方案」选择「开发版」就好，不需要花钱，接着点击右下角的蓝色按钮「创建」。</p>\n<p>创建好应用之后，打开应用的「设置 &gt;&gt; 应用凭证」，页面中有两个参数，一个是AppID，一个是AppKey。</p>\n<p>这两个参数下方的值等会要用到，暂时不要把网页关掉。</p>\n<p>在主题 _config.yaml 中 leancloud 下方有两个需要配置的参数，一个是app_id，一个是app_key，这两个参数的值就分别对应上面说到的AppID和AppKey。</p>\n<p>接着我们还要开启每篇博客的数据统计的功能，在博客主题配置文件中搜索关键字 view。</p>\n<p>每篇博客的数据统计 views 下方有两个参数，一个是 enable，将其设置为 enable 或 true 都可以；一个是统计的来源 source，设置为 leancloud。</p>\n","site":{"data":{}},"wordcount":2280,"excerpt":"","more":"<h1 id=\"有关Hexo-fluid主题的各种配置\"><a href=\"#有关Hexo-fluid主题的各种配置\" class=\"headerlink\" title=\"有关Hexo-fluid主题的各种配置\"></a>有关Hexo-fluid主题的各种配置</h1><h2 id=\"一、页脚增加网站运行时长\"><a href=\"#一、页脚增加网站运行时长\" class=\"headerlink\" title=\"一、页脚增加网站运行时长\"></a>一、页脚增加网站运行时长</h2><p><strong>只需要在主题配置中的 footer: content 添加：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">footer:</span><br>  <span class=\"hljs-attr\">content:</span> <span class=\"hljs-string\">&#x27;</span><br><span class=\"hljs-string\">    &lt;a href=&quot;https://hexo.io&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Hexo&lt;/span&gt;&lt;/a&gt;</span><br><span class=\"hljs-string\">    &lt;i class=&quot;iconfont icon-love&quot;&gt;&lt;/i&gt;</span><br><span class=\"hljs-string\">    &lt;a href=&quot;https://github.com/fluid-dev/hexo-theme-fluid&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;&lt;span&gt;Fluid&lt;/span&gt;&lt;/a&gt;</span><br><span class=\"hljs-string\">    &lt;div style=&quot;font-size: 0.85rem&quot;&gt;</span><br><span class=\"hljs-string\">      &lt;span id=&quot;timeDate&quot;&gt;载入天数...&lt;/span&gt;</span><br><span class=\"hljs-string\">      &lt;span id=&quot;times&quot;&gt;载入时分秒...&lt;/span&gt;</span><br><span class=\"hljs-string\">      &lt;script src=&quot;/js/duration.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"hljs-string\">    &lt;/div&gt;</span><br><span class=\"hljs-string\">  &#x27;</span><br></code></pre></td></tr></table></figure>\n<p><strong>content 前三行是 Fluid 原有的页脚内容，建议不要删除，可稍作修改，保留 Fluid 的超链接，用于向更多人推广主题。</strong></p>\n<p><strong>duration.js 包含的才是功能代码，我们在博客目录下创建 source&#x2F;js&#x2F;duration.js，内容如下：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javasrcipt\">!(function() &#123;<br>/** 计时起始时间，自行修改 **/<br>var start = new Date(&quot;2020/01/01 00:00:00&quot;);<br><br>function update() &#123;<br>    var now = new Date();<br>    now.setTime(now.getTime()+250);<br>    days = (now - start) / 1000 / 60 / 60 / 24;<br>    dnum = Math.floor(days);<br>    hours = (now - start) / 1000 / 60 / 60 - (24 * dnum);<br>    hnum = Math.floor(hours);<br>    if(String(hnum).length === 1 )&#123;<br>    hnum = &quot;0&quot; + hnum;<br>    &#125;<br>    minutes = (now - start) / 1000 /60 - (24 * 60 * dnum) - (60 * hnum);<br>    mnum = Math.floor(minutes);<br>    if(String(mnum).length === 1 )&#123;<br>    mnum = &quot;0&quot; + mnum;<br>    &#125;<br>    seconds = (now - start) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);<br>    snum = Math.round(seconds);<br>    if(String(snum).length === 1 )&#123;<br>    snum = &quot;0&quot; + snum;<br>    &#125;<br>    document.getElementById(&quot;timeDate&quot;).innerHTML = &quot;本站安全运行&amp;nbsp&quot;+dnum+&quot;&amp;nbsp天&quot;;<br>    document.getElementById(&quot;times&quot;).innerHTML = hnum + &quot;&amp;nbsp小时&amp;nbsp&quot; + mnum + &quot;&amp;nbsp分&amp;nbsp&quot; + snum + &quot;&amp;nbsp秒&quot;;<br>&#125;<br><br>update();<br>setInterval(update, 1000);<br>&#125;)();<br></code></pre></td></tr></table></figure>\n<p><strong>不要忘记把上面注释的时间改为自己的时间，至此这项功能引入了。</strong></p>\n<h2 id=\"二、博客阅读量统计\"><a href=\"#二、博客阅读量统计\" class=\"headerlink\" title=\"二、博客阅读量统计\"></a>二、博客阅读量统计</h2><p>这里我使用一个第三方服务Leancloud来统计文章的阅读量。</p>\n<p>首先需要打开 Leancloud 的官网，注册一个账号，注册好账号之后，点击左上角的按钮，创建一个应用。</p>\n<p>创建时「应用名称」可以随你自由命名，下方的「应用计价方案」选择「开发版」就好，不需要花钱，接着点击右下角的蓝色按钮「创建」。</p>\n<p>创建好应用之后，打开应用的「设置 &gt;&gt; 应用凭证」，页面中有两个参数，一个是AppID，一个是AppKey。</p>\n<p>这两个参数下方的值等会要用到，暂时不要把网页关掉。</p>\n<p>在主题 _config.yaml 中 leancloud 下方有两个需要配置的参数，一个是app_id，一个是app_key，这两个参数的值就分别对应上面说到的AppID和AppKey。</p>\n<p>接着我们还要开启每篇博客的数据统计的功能，在博客主题配置文件中搜索关键字 view。</p>\n<p>每篇博客的数据统计 views 下方有两个参数，一个是 enable，将其设置为 enable 或 true 都可以；一个是统计的来源 source，设置为 leancloud。</p>\n"},{"title":"linux部署clash服务","date":"2022-06-27T07:21:43.000Z","_content":"\n安装：\n\n查找相应版本\nhttps://github.com/Dreamacro/clash/releases\n\nwget 相应版本下载链接\n\ngzip -d clash-linux-amd64-v1.11.0.gz\n\nchmod +x clash-linux-amd64-v1.11.0\n\nmkdir /opt/clash\nmv clash-linux-amd64-v1.11.0 /opt/clash/clash\n\n\n下载配置信息等\ncd ~/.config/clash\nsudo wget -O config.yaml [订阅链接]\nsudo wget -O Country.mmdb https://www.sub-speeder.com/client-download/Country.mmdb\n\n\n配置clash.service服务\n\nsudo vim /etc/systemd/system/clash.service\n\n```\n[Unit] \nDescription=clash\nAfter=network-online.target\nWants=network-online.target systemd-networkd-wait-online.service\n​\n[Service]\nType=simple\nUser=root\nGroup=root\nDynamicUser=true\nExecStart=/opt/clash/clash -d /etc/clash/\nRestart=always\nLimitNOFILE=512000\n​\n[Install]\nWantedBy=multi-user.target\n```\n\n重新加载systemctl daemon\n\nsudo systemctl daemon-reload\n启动Clash\n\nsudo systemctl start clash.service\n\n设置Clash开机自启动\n\nsudo systemctl enable clash.service\n以下为Clash相关的管理命令\n\n启动Clash\nsudo systemctl start clash.service\n重启Clash\nsudo systemctl restart clash.service\n查看Clash运行状态\nsudo systemctl status clash.service\n\n然后通过浏览器访问 http://clash.razord.top 进行策略组设置。\n\n随后系统设置，网络设置中添加http代理，IP 127.0.0.1 端口 7890 socks代理，IP 127.0.0.1 端口 7891。\n\n即可完成，也可以设置开机自启动，这样的话，不用每天自己运行/usr/bin/clash -d /etc/clash/命令了。\n\n\n#!/usr/bin/env bash\n# cd GOPATH\ncd $GOPATH/src/\n\n# remove codes\nrm -rf coredns\nrm -rf nacos-coredns-plugin\n\n# clone current codes\ngit clone https://github.com/coredns/coredns.git\n\ngit clone https://github.com/nacos-group/nacos-coredns-plugin.git\n\n# cdl nacos-coredns-plugin directory\ncd $GOPATH/src/nacos-coredns-plugin\n\ngit checkout -b v1.6.7 origin/v1.6.7\n# cd coredns directory\ncd $GOPATH/src/coredns\ngit checkout -b v1.6.7 v1.6.7\ngo get github.com/cihub/seelog\n\n# copy nacos plugin to coredns\ncp -r ../nacos-coredns-plugin/nacos plugin/\ncp -r ../nacos-coredns-plugin/forward/setup.go plugin/forward\n\n# insert nacos into plugin\nsed -i '/hosts/a\\\\t\"nacos\",' core/dnsserver/zdirectives.go\nsed -i '/coredns\\/plugin\\/hosts/a\\\\t_ \"coredns/plugin/nacos\"' core/plugin/zplugin.go\nsed -i '/hosts:hosts/a\\nacos:nacos' plugin.cfg\n\n# build\nmake","source":"_posts/linux-clash.md","raw":"---\ntitle: linux部署clash服务 \ndate: 2022-06-27 15:21:43\ncategories:\n- linux\n---\n\n安装：\n\n查找相应版本\nhttps://github.com/Dreamacro/clash/releases\n\nwget 相应版本下载链接\n\ngzip -d clash-linux-amd64-v1.11.0.gz\n\nchmod +x clash-linux-amd64-v1.11.0\n\nmkdir /opt/clash\nmv clash-linux-amd64-v1.11.0 /opt/clash/clash\n\n\n下载配置信息等\ncd ~/.config/clash\nsudo wget -O config.yaml [订阅链接]\nsudo wget -O Country.mmdb https://www.sub-speeder.com/client-download/Country.mmdb\n\n\n配置clash.service服务\n\nsudo vim /etc/systemd/system/clash.service\n\n```\n[Unit] \nDescription=clash\nAfter=network-online.target\nWants=network-online.target systemd-networkd-wait-online.service\n​\n[Service]\nType=simple\nUser=root\nGroup=root\nDynamicUser=true\nExecStart=/opt/clash/clash -d /etc/clash/\nRestart=always\nLimitNOFILE=512000\n​\n[Install]\nWantedBy=multi-user.target\n```\n\n重新加载systemctl daemon\n\nsudo systemctl daemon-reload\n启动Clash\n\nsudo systemctl start clash.service\n\n设置Clash开机自启动\n\nsudo systemctl enable clash.service\n以下为Clash相关的管理命令\n\n启动Clash\nsudo systemctl start clash.service\n重启Clash\nsudo systemctl restart clash.service\n查看Clash运行状态\nsudo systemctl status clash.service\n\n然后通过浏览器访问 http://clash.razord.top 进行策略组设置。\n\n随后系统设置，网络设置中添加http代理，IP 127.0.0.1 端口 7890 socks代理，IP 127.0.0.1 端口 7891。\n\n即可完成，也可以设置开机自启动，这样的话，不用每天自己运行/usr/bin/clash -d /etc/clash/命令了。\n\n\n#!/usr/bin/env bash\n# cd GOPATH\ncd $GOPATH/src/\n\n# remove codes\nrm -rf coredns\nrm -rf nacos-coredns-plugin\n\n# clone current codes\ngit clone https://github.com/coredns/coredns.git\n\ngit clone https://github.com/nacos-group/nacos-coredns-plugin.git\n\n# cdl nacos-coredns-plugin directory\ncd $GOPATH/src/nacos-coredns-plugin\n\ngit checkout -b v1.6.7 origin/v1.6.7\n# cd coredns directory\ncd $GOPATH/src/coredns\ngit checkout -b v1.6.7 v1.6.7\ngo get github.com/cihub/seelog\n\n# copy nacos plugin to coredns\ncp -r ../nacos-coredns-plugin/nacos plugin/\ncp -r ../nacos-coredns-plugin/forward/setup.go plugin/forward\n\n# insert nacos into plugin\nsed -i '/hosts/a\\\\t\"nacos\",' core/dnsserver/zdirectives.go\nsed -i '/coredns\\/plugin\\/hosts/a\\\\t_ \"coredns/plugin/nacos\"' core/plugin/zplugin.go\nsed -i '/hosts:hosts/a\\nacos:nacos' plugin.cfg\n\n# build\nmake","slug":"linux-clash","published":1,"updated":"2022-08-19T13:35:34.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdkg000bi3wuawz835t4","content":"<p>安装：</p>\n<p>查找相应版本<br><a href=\"https://github.com/Dreamacro/clash/releases\">https://github.com/Dreamacro/clash/releases</a></p>\n<p>wget 相应版本下载链接</p>\n<p>gzip -d clash-linux-amd64-v1.11.0.gz</p>\n<p>chmod +x clash-linux-amd64-v1.11.0</p>\n<p>mkdir &#x2F;opt&#x2F;clash<br>mv clash-linux-amd64-v1.11.0 &#x2F;opt&#x2F;clash&#x2F;clash</p>\n<p>下载配置信息等<br>cd ~&#x2F;.config&#x2F;clash<br>sudo wget -O config.yaml [订阅链接]<br>sudo wget -O Country.mmdb <a href=\"https://www.sub-speeder.com/client-download/Country.mmdb\">https://www.sub-speeder.com/client-download/Country.mmdb</a></p>\n<p>配置clash.service服务</p>\n<p>sudo vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;clash.service</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">[Unit] <br><span class=\"hljs-attribute\">Description</span><span class=\"hljs-operator\">=</span>clash<br><span class=\"hljs-attribute\">After</span><span class=\"hljs-operator\">=</span>network-online.target<br><span class=\"hljs-attribute\">Wants</span><span class=\"hljs-operator\">=</span>network-online.target systemd-networkd-wait-online.service<br>​<br>[Service]<br><span class=\"hljs-attribute\">Type</span><span class=\"hljs-operator\">=</span>simple<br><span class=\"hljs-attribute\">User</span><span class=\"hljs-operator\">=</span>root<br><span class=\"hljs-attribute\">Group</span><span class=\"hljs-operator\">=</span>root<br><span class=\"hljs-attribute\">DynamicUser</span><span class=\"hljs-operator\">=</span>true<br><span class=\"hljs-attribute\">ExecStart</span><span class=\"hljs-operator\">=/</span>opt/clash/clash -d /etc/clash/<br><span class=\"hljs-attribute\">Restart</span><span class=\"hljs-operator\">=</span>always<br><span class=\"hljs-attribute\">LimitNOFILE</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">512000</span><br>​<br>[Install]<br><span class=\"hljs-attribute\">WantedBy</span><span class=\"hljs-operator\">=</span>multi-user.target<br></code></pre></td></tr></table></figure>\n\n<p>重新加载systemctl daemon</p>\n<p>sudo systemctl daemon-reload<br>启动Clash</p>\n<p>sudo systemctl start clash.service</p>\n<p>设置Clash开机自启动</p>\n<p>sudo systemctl enable clash.service<br>以下为Clash相关的管理命令</p>\n<p>启动Clash<br>sudo systemctl start clash.service<br>重启Clash<br>sudo systemctl restart clash.service<br>查看Clash运行状态<br>sudo systemctl status clash.service</p>\n<p>然后通过浏览器访问 <a href=\"http://clash.razord.top/\">http://clash.razord.top</a> 进行策略组设置。</p>\n<p>随后系统设置，网络设置中添加http代理，IP 127.0.0.1 端口 7890 socks代理，IP 127.0.0.1 端口 7891。</p>\n<p>即可完成，也可以设置开机自启动，这样的话，不用每天自己运行&#x2F;usr&#x2F;bin&#x2F;clash -d &#x2F;etc&#x2F;clash&#x2F;命令了。</p>\n<p>#!&#x2F;usr&#x2F;bin&#x2F;env bash</p>\n<h1 id=\"cd-GOPATH\"><a href=\"#cd-GOPATH\" class=\"headerlink\" title=\"cd GOPATH\"></a>cd GOPATH</h1><p>cd $GOPATH&#x2F;src&#x2F;</p>\n<h1 id=\"remove-codes\"><a href=\"#remove-codes\" class=\"headerlink\" title=\"remove codes\"></a>remove codes</h1><p>rm -rf coredns<br>rm -rf nacos-coredns-plugin</p>\n<h1 id=\"clone-current-codes\"><a href=\"#clone-current-codes\" class=\"headerlink\" title=\"clone current codes\"></a>clone current codes</h1><p>git clone <a href=\"https://github.com/coredns/coredns.git\">https://github.com/coredns/coredns.git</a></p>\n<p>git clone <a href=\"https://github.com/nacos-group/nacos-coredns-plugin.git\">https://github.com/nacos-group/nacos-coredns-plugin.git</a></p>\n<h1 id=\"cdl-nacos-coredns-plugin-directory\"><a href=\"#cdl-nacos-coredns-plugin-directory\" class=\"headerlink\" title=\"cdl nacos-coredns-plugin directory\"></a>cdl nacos-coredns-plugin directory</h1><p>cd $GOPATH&#x2F;src&#x2F;nacos-coredns-plugin</p>\n<p>git checkout -b v1.6.7 origin&#x2F;v1.6.7</p>\n<h1 id=\"cd-coredns-directory\"><a href=\"#cd-coredns-directory\" class=\"headerlink\" title=\"cd coredns directory\"></a>cd coredns directory</h1><p>cd $GOPATH&#x2F;src&#x2F;coredns<br>git checkout -b v1.6.7 v1.6.7<br>go get github.com&#x2F;cihub&#x2F;seelog</p>\n<h1 id=\"copy-nacos-plugin-to-coredns\"><a href=\"#copy-nacos-plugin-to-coredns\" class=\"headerlink\" title=\"copy nacos plugin to coredns\"></a>copy nacos plugin to coredns</h1><p>cp -r ..&#x2F;nacos-coredns-plugin&#x2F;nacos plugin&#x2F;<br>cp -r ..&#x2F;nacos-coredns-plugin&#x2F;forward&#x2F;setup.go plugin&#x2F;forward</p>\n<h1 id=\"insert-nacos-into-plugin\"><a href=\"#insert-nacos-into-plugin\" class=\"headerlink\" title=\"insert nacos into plugin\"></a>insert nacos into plugin</h1><p>sed -i ‘&#x2F;hosts&#x2F;a\\t”nacos”,’ core&#x2F;dnsserver&#x2F;zdirectives.go<br>sed -i ‘&#x2F;coredns/plugin/hosts&#x2F;a\\t_ “coredns&#x2F;plugin&#x2F;nacos”‘ core&#x2F;plugin&#x2F;zplugin.go<br>sed -i ‘&#x2F;hosts:hosts&#x2F;a\\nacos:nacos’ plugin.cfg</p>\n<h1 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h1><p>make</p>\n","site":{"data":{}},"wordcount":2070,"excerpt":"","more":"<p>安装：</p>\n<p>查找相应版本<br><a href=\"https://github.com/Dreamacro/clash/releases\">https://github.com/Dreamacro/clash/releases</a></p>\n<p>wget 相应版本下载链接</p>\n<p>gzip -d clash-linux-amd64-v1.11.0.gz</p>\n<p>chmod +x clash-linux-amd64-v1.11.0</p>\n<p>mkdir &#x2F;opt&#x2F;clash<br>mv clash-linux-amd64-v1.11.0 &#x2F;opt&#x2F;clash&#x2F;clash</p>\n<p>下载配置信息等<br>cd ~&#x2F;.config&#x2F;clash<br>sudo wget -O config.yaml [订阅链接]<br>sudo wget -O Country.mmdb <a href=\"https://www.sub-speeder.com/client-download/Country.mmdb\">https://www.sub-speeder.com/client-download/Country.mmdb</a></p>\n<p>配置clash.service服务</p>\n<p>sudo vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;clash.service</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs abnf\">[Unit] <br><span class=\"hljs-attribute\">Description</span><span class=\"hljs-operator\">=</span>clash<br><span class=\"hljs-attribute\">After</span><span class=\"hljs-operator\">=</span>network-online.target<br><span class=\"hljs-attribute\">Wants</span><span class=\"hljs-operator\">=</span>network-online.target systemd-networkd-wait-online.service<br>​<br>[Service]<br><span class=\"hljs-attribute\">Type</span><span class=\"hljs-operator\">=</span>simple<br><span class=\"hljs-attribute\">User</span><span class=\"hljs-operator\">=</span>root<br><span class=\"hljs-attribute\">Group</span><span class=\"hljs-operator\">=</span>root<br><span class=\"hljs-attribute\">DynamicUser</span><span class=\"hljs-operator\">=</span>true<br><span class=\"hljs-attribute\">ExecStart</span><span class=\"hljs-operator\">=/</span>opt/clash/clash -d /etc/clash/<br><span class=\"hljs-attribute\">Restart</span><span class=\"hljs-operator\">=</span>always<br><span class=\"hljs-attribute\">LimitNOFILE</span><span class=\"hljs-operator\">=</span><span class=\"hljs-number\">512000</span><br>​<br>[Install]<br><span class=\"hljs-attribute\">WantedBy</span><span class=\"hljs-operator\">=</span>multi-user.target<br></code></pre></td></tr></table></figure>\n\n<p>重新加载systemctl daemon</p>\n<p>sudo systemctl daemon-reload<br>启动Clash</p>\n<p>sudo systemctl start clash.service</p>\n<p>设置Clash开机自启动</p>\n<p>sudo systemctl enable clash.service<br>以下为Clash相关的管理命令</p>\n<p>启动Clash<br>sudo systemctl start clash.service<br>重启Clash<br>sudo systemctl restart clash.service<br>查看Clash运行状态<br>sudo systemctl status clash.service</p>\n<p>然后通过浏览器访问 <a href=\"http://clash.razord.top/\">http://clash.razord.top</a> 进行策略组设置。</p>\n<p>随后系统设置，网络设置中添加http代理，IP 127.0.0.1 端口 7890 socks代理，IP 127.0.0.1 端口 7891。</p>\n<p>即可完成，也可以设置开机自启动，这样的话，不用每天自己运行&#x2F;usr&#x2F;bin&#x2F;clash -d &#x2F;etc&#x2F;clash&#x2F;命令了。</p>\n<p>#!&#x2F;usr&#x2F;bin&#x2F;env bash</p>\n<h1 id=\"cd-GOPATH\"><a href=\"#cd-GOPATH\" class=\"headerlink\" title=\"cd GOPATH\"></a>cd GOPATH</h1><p>cd $GOPATH&#x2F;src&#x2F;</p>\n<h1 id=\"remove-codes\"><a href=\"#remove-codes\" class=\"headerlink\" title=\"remove codes\"></a>remove codes</h1><p>rm -rf coredns<br>rm -rf nacos-coredns-plugin</p>\n<h1 id=\"clone-current-codes\"><a href=\"#clone-current-codes\" class=\"headerlink\" title=\"clone current codes\"></a>clone current codes</h1><p>git clone <a href=\"https://github.com/coredns/coredns.git\">https://github.com/coredns/coredns.git</a></p>\n<p>git clone <a href=\"https://github.com/nacos-group/nacos-coredns-plugin.git\">https://github.com/nacos-group/nacos-coredns-plugin.git</a></p>\n<h1 id=\"cdl-nacos-coredns-plugin-directory\"><a href=\"#cdl-nacos-coredns-plugin-directory\" class=\"headerlink\" title=\"cdl nacos-coredns-plugin directory\"></a>cdl nacos-coredns-plugin directory</h1><p>cd $GOPATH&#x2F;src&#x2F;nacos-coredns-plugin</p>\n<p>git checkout -b v1.6.7 origin&#x2F;v1.6.7</p>\n<h1 id=\"cd-coredns-directory\"><a href=\"#cd-coredns-directory\" class=\"headerlink\" title=\"cd coredns directory\"></a>cd coredns directory</h1><p>cd $GOPATH&#x2F;src&#x2F;coredns<br>git checkout -b v1.6.7 v1.6.7<br>go get github.com&#x2F;cihub&#x2F;seelog</p>\n<h1 id=\"copy-nacos-plugin-to-coredns\"><a href=\"#copy-nacos-plugin-to-coredns\" class=\"headerlink\" title=\"copy nacos plugin to coredns\"></a>copy nacos plugin to coredns</h1><p>cp -r ..&#x2F;nacos-coredns-plugin&#x2F;nacos plugin&#x2F;<br>cp -r ..&#x2F;nacos-coredns-plugin&#x2F;forward&#x2F;setup.go plugin&#x2F;forward</p>\n<h1 id=\"insert-nacos-into-plugin\"><a href=\"#insert-nacos-into-plugin\" class=\"headerlink\" title=\"insert nacos into plugin\"></a>insert nacos into plugin</h1><p>sed -i ‘&#x2F;hosts&#x2F;a\\t”nacos”,’ core&#x2F;dnsserver&#x2F;zdirectives.go<br>sed -i ‘&#x2F;coredns/plugin/hosts&#x2F;a\\t_ “coredns&#x2F;plugin&#x2F;nacos”‘ core&#x2F;plugin&#x2F;zplugin.go<br>sed -i ‘&#x2F;hosts:hosts&#x2F;a\\nacos:nacos’ plugin.cfg</p>\n<h1 id=\"build\"><a href=\"#build\" class=\"headerlink\" title=\"build\"></a>build</h1><p>make</p>\n"},{"title":"Hexo部署到腾讯云（Ubuntu 20.04）","date":"2022-06-25T08:07:00.000Z","_content":"# Hexo部署到腾讯云\n\n## git配置\n\n**创建一个名为blog的用户，用于管理Hexo项目**\n```bash\n    adduser blog\n```\n\n### 给blog用户添加文件的写权限\n```bash\n    vim /etc/sudoers\n\n    #找到User privilege specification部分，添加如下内容：\n    blog    ALL=(ALL:ALL) AL\n```\n![](/img/hexo-bt-tcCloud/add-blog-su.png)\n\n### 切换至blog用户\n```bash\n    su blog\n```\n**退回到根路径（cd /），在/var/repo下创建名为hexo_static的裸仓库**\n```bash\n    sudo mkdir /var/repo/\n    sudo chown -R $USER:$USER /var/repo/\n    sudo chmod -R 755 /var/repo/\n\n    cd /var/repo/\n    git init --bare hexo_static.git\n```\n![](/img/hexo-bt-tcCloud/init-hexo-git.png)\n\n## 创建Git钩子\n\n**在之前创建的hexo_static裸仓库下有一个hooks文件夹，在其中创建一个名为post-receive的钩子文件：**\n```bash\n    vim /var/repo/hexo_static.git/hooks/post-receive\n```\n**在其中写入如下内容：**\n```shell\n    #!/bin/bash\n    git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f\n```\n**让该文件变为可执行文件**\n```bash\n    chmod +x /var/repo/hexo_static.git/hooks/post-receive\n```\n\n## nginx 配置\n\n### 安装Nginx\n```bash\n    sudo apt-get install nginx -y\n```\n\n### 创建/var/www/hexo目录，用于Nginx托管，修改目录所有权和权限\n```shell\n    sudo mkdir -p /var/www/hexo\n    sudo chown -R $USER:$USER /var/www/hexo\n    sudo chmod -R 755 /var/www/hexo\n```\n\n### 使用vim修改/etc/nginx/sites-enabled/default，使root指向hexo目录\n\n```shell\n    sudo vim /etc/nginx/sites-enabled/default\n\n    #找到server部分，修改如下内容\n    root /var/www/hexo;\n```\n![](/img/hexo-bt-tcCloud/change-nginx-server.png)\n\n### 重启Nginx服务，使得改动生效\n```shell\n    sudo service nginx restart\n```\n\n## 本地搭建hexo客户端（Windows）\n\n- 首先安装git，这里不再过多赘述\n- 使用命令ssh-keygen -t rsa在windons用户下/.ssh文件夹中生成密钥\n- 将生成的公钥 .pub 文件内容拷贝到ubuntu服务器的/home/blog/.ssh/authorized_keys上\n\n### 部署Hexo项目\n**编辑hexo的config.yml文件，在deploy处修改repo项：**\n```yaml\ndeploy:\n  type: git\n  repo: blog@server_ip:/var/repo/hexo_static.git\n  branch: master\n```\n**执行命令部署Hexo项目**\n```shell\n    hexo clean\n    hexo generate\n    hexo deploy\n```\n\n**进入目录var/www/hexo/下，可以看到静态文件已全部上传**\n```\nroot@VM-8-16-ubuntu:/var/www/hexo# ll\ntotal 96\ndrwxr-xr-x 12 blog blog  4096 Jun 25 19:59 ./\ndrwxr-xr-x  4 root root  4096 Jun 25 19:52 ../\ndrwxrwxr-x  3 blog blog  4096 Jun 25 19:59 2022/\n-rw-rw-r--  1 blog blog  9178 Jun 25 19:59 404.html\ndrwxrwxr-x  2 blog blog  4096 Jun 25 19:59 about/\ndrwxrwxr-x  3 blog blog  4096 Jun 25 19:59 archives/\ndrwxrwxr-x  4 blog blog  4096 Jun 25 19:59 categories/\ndrwxrwxr-x  2 blog blog  4096 Jun 25 19:59 css/\ndrwxrwxr-x  2 blog blog  4096 Jun 25 19:59 img/\n-rw-rw-r--  1 blog blog 15098 Jun 25 19:59 index.html\ndrwxrwxr-x  2 blog blog  4096 Jun 25 19:59 js/\ndrwxrwxr-x  2 blog blog  4096 Jun 25 19:59 links/\n-rw-rw-r--  1 blog blog 20259 Jun 25 19:59 local-search.xml\ndrwxrwxr-x  2 blog blog  4096 Jun 25 19:59 tags/\ndrwxrwxr-x  2 blog blog  4096 Jun 25 19:59 xml/\n\n```\n### 访问测试\n**打开浏览器，输入Ubuntu服务器的IP地址，就可以看到博客页面啦**","source":"_posts/hexo-bt-tcCloud.md","raw":"---\ntitle: Hexo部署到腾讯云（Ubuntu 20.04）\ndate: 2022-06-25 16:07:00\ncategories: \n - Hexo\n---\n# Hexo部署到腾讯云\n\n## git配置\n\n**创建一个名为blog的用户，用于管理Hexo项目**\n```bash\n    adduser blog\n```\n\n### 给blog用户添加文件的写权限\n```bash\n    vim /etc/sudoers\n\n    #找到User privilege specification部分，添加如下内容：\n    blog    ALL=(ALL:ALL) AL\n```\n![](/img/hexo-bt-tcCloud/add-blog-su.png)\n\n### 切换至blog用户\n```bash\n    su blog\n```\n**退回到根路径（cd /），在/var/repo下创建名为hexo_static的裸仓库**\n```bash\n    sudo mkdir /var/repo/\n    sudo chown -R $USER:$USER /var/repo/\n    sudo chmod -R 755 /var/repo/\n\n    cd /var/repo/\n    git init --bare hexo_static.git\n```\n![](/img/hexo-bt-tcCloud/init-hexo-git.png)\n\n## 创建Git钩子\n\n**在之前创建的hexo_static裸仓库下有一个hooks文件夹，在其中创建一个名为post-receive的钩子文件：**\n```bash\n    vim /var/repo/hexo_static.git/hooks/post-receive\n```\n**在其中写入如下内容：**\n```shell\n    #!/bin/bash\n    git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f\n```\n**让该文件变为可执行文件**\n```bash\n    chmod +x /var/repo/hexo_static.git/hooks/post-receive\n```\n\n## nginx 配置\n\n### 安装Nginx\n```bash\n    sudo apt-get install nginx -y\n```\n\n### 创建/var/www/hexo目录，用于Nginx托管，修改目录所有权和权限\n```shell\n    sudo mkdir -p /var/www/hexo\n    sudo chown -R $USER:$USER /var/www/hexo\n    sudo chmod -R 755 /var/www/hexo\n```\n\n### 使用vim修改/etc/nginx/sites-enabled/default，使root指向hexo目录\n\n```shell\n    sudo vim /etc/nginx/sites-enabled/default\n\n    #找到server部分，修改如下内容\n    root /var/www/hexo;\n```\n![](/img/hexo-bt-tcCloud/change-nginx-server.png)\n\n### 重启Nginx服务，使得改动生效\n```shell\n    sudo service nginx restart\n```\n\n## 本地搭建hexo客户端（Windows）\n\n- 首先安装git，这里不再过多赘述\n- 使用命令ssh-keygen -t rsa在windons用户下/.ssh文件夹中生成密钥\n- 将生成的公钥 .pub 文件内容拷贝到ubuntu服务器的/home/blog/.ssh/authorized_keys上\n\n### 部署Hexo项目\n**编辑hexo的config.yml文件，在deploy处修改repo项：**\n```yaml\ndeploy:\n  type: git\n  repo: blog@server_ip:/var/repo/hexo_static.git\n  branch: master\n```\n**执行命令部署Hexo项目**\n```shell\n    hexo clean\n    hexo generate\n    hexo deploy\n```\n\n**进入目录var/www/hexo/下，可以看到静态文件已全部上传**\n```\nroot@VM-8-16-ubuntu:/var/www/hexo# ll\ntotal 96\ndrwxr-xr-x 12 blog blog  4096 Jun 25 19:59 ./\ndrwxr-xr-x  4 root root  4096 Jun 25 19:52 ../\ndrwxrwxr-x  3 blog blog  4096 Jun 25 19:59 2022/\n-rw-rw-r--  1 blog blog  9178 Jun 25 19:59 404.html\ndrwxrwxr-x  2 blog blog  4096 Jun 25 19:59 about/\ndrwxrwxr-x  3 blog blog  4096 Jun 25 19:59 archives/\ndrwxrwxr-x  4 blog blog  4096 Jun 25 19:59 categories/\ndrwxrwxr-x  2 blog blog  4096 Jun 25 19:59 css/\ndrwxrwxr-x  2 blog blog  4096 Jun 25 19:59 img/\n-rw-rw-r--  1 blog blog 15098 Jun 25 19:59 index.html\ndrwxrwxr-x  2 blog blog  4096 Jun 25 19:59 js/\ndrwxrwxr-x  2 blog blog  4096 Jun 25 19:59 links/\n-rw-rw-r--  1 blog blog 20259 Jun 25 19:59 local-search.xml\ndrwxrwxr-x  2 blog blog  4096 Jun 25 19:59 tags/\ndrwxrwxr-x  2 blog blog  4096 Jun 25 19:59 xml/\n\n```\n### 访问测试\n**打开浏览器，输入Ubuntu服务器的IP地址，就可以看到博客页面啦**","slug":"hexo-bt-tcCloud","published":1,"updated":"2022-08-19T13:35:34.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdkj000di3wud42oezxx","content":"<h1 id=\"Hexo部署到腾讯云\"><a href=\"#Hexo部署到腾讯云\" class=\"headerlink\" title=\"Hexo部署到腾讯云\"></a>Hexo部署到腾讯云</h1><h2 id=\"git配置\"><a href=\"#git配置\" class=\"headerlink\" title=\"git配置\"></a>git配置</h2><p><strong>创建一个名为blog的用户，用于管理Hexo项目</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">adduser blog<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"给blog用户添加文件的写权限\"><a href=\"#给blog用户添加文件的写权限\" class=\"headerlink\" title=\"给blog用户添加文件的写权限\"></a>给blog用户添加文件的写权限</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">vim /etc/sudoers<br><br><span class=\"hljs-comment\">#找到User privilege specification部分，添加如下内容：</span><br>blog    ALL=(ALL:ALL) AL<br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/hexo-bt-tcCloud/add-blog-su.png\"></p>\n<h3 id=\"切换至blog用户\"><a href=\"#切换至blog用户\" class=\"headerlink\" title=\"切换至blog用户\"></a>切换至blog用户</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">su blog<br></code></pre></td></tr></table></figure>\n<p><strong>退回到根路径（cd &#x2F;），在&#x2F;var&#x2F;repo下创建名为hexo_static的裸仓库</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo <span class=\"hljs-built_in\">mkdir</span> /var/repo/<br>sudo <span class=\"hljs-built_in\">chown</span> -R <span class=\"hljs-variable\">$USER</span>:<span class=\"hljs-variable\">$USER</span> /var/repo/<br>sudo <span class=\"hljs-built_in\">chmod</span> -R 755 /var/repo/<br><br><span class=\"hljs-built_in\">cd</span> /var/repo/<br>git init --bare hexo_static.git<br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/hexo-bt-tcCloud/init-hexo-git.png\"></p>\n<h2 id=\"创建Git钩子\"><a href=\"#创建Git钩子\" class=\"headerlink\" title=\"创建Git钩子\"></a>创建Git钩子</h2><p><strong>在之前创建的hexo_static裸仓库下有一个hooks文件夹，在其中创建一个名为post-receive的钩子文件：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">vim /var/repo/hexo_static.git/hooks/post-receive<br></code></pre></td></tr></table></figure>\n<p><strong>在其中写入如下内容：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f<br></code></pre></td></tr></table></figure>\n<p><strong>让该文件变为可执行文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">chmod</span> +x /var/repo/hexo_static.git/hooks/post-receive<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"nginx-配置\"><a href=\"#nginx-配置\" class=\"headerlink\" title=\"nginx 配置\"></a>nginx 配置</h2><h3 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo apt-get install nginx -y<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建-x2F-var-x2F-www-x2F-hexo目录，用于Nginx托管，修改目录所有权和权限\"><a href=\"#创建-x2F-var-x2F-www-x2F-hexo目录，用于Nginx托管，修改目录所有权和权限\" class=\"headerlink\" title=\"创建&#x2F;var&#x2F;www&#x2F;hexo目录，用于Nginx托管，修改目录所有权和权限\"></a>创建&#x2F;var&#x2F;www&#x2F;hexo目录，用于Nginx托管，修改目录所有权和权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mkdir -p /var/www/hexo<br>sudo chown -R $USER:$USER /var/www/hexo<br>sudo chmod -R 755 /var/www/hexo<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用vim修改-x2F-etc-x2F-nginx-x2F-sites-enabled-x2F-default，使root指向hexo目录\"><a href=\"#使用vim修改-x2F-etc-x2F-nginx-x2F-sites-enabled-x2F-default，使root指向hexo目录\" class=\"headerlink\" title=\"使用vim修改&#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default，使root指向hexo目录\"></a>使用vim修改&#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default，使root指向hexo目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo vim /etc/nginx/sites-enabled/default<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">找到server部分，修改如下内容</span><br>root /var/www/hexo;<br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/hexo-bt-tcCloud/change-nginx-server.png\"></p>\n<h3 id=\"重启Nginx服务，使得改动生效\"><a href=\"#重启Nginx服务，使得改动生效\" class=\"headerlink\" title=\"重启Nginx服务，使得改动生效\"></a>重启Nginx服务，使得改动生效</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo service nginx restart<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"本地搭建hexo客户端（Windows）\"><a href=\"#本地搭建hexo客户端（Windows）\" class=\"headerlink\" title=\"本地搭建hexo客户端（Windows）\"></a>本地搭建hexo客户端（Windows）</h2><ul>\n<li>首先安装git，这里不再过多赘述</li>\n<li>使用命令ssh-keygen -t rsa在windons用户下&#x2F;.ssh文件夹中生成密钥</li>\n<li>将生成的公钥 .pub 文件内容拷贝到ubuntu服务器的&#x2F;home&#x2F;blog&#x2F;.ssh&#x2F;authorized_keys上</li>\n</ul>\n<h3 id=\"部署Hexo项目\"><a href=\"#部署Hexo项目\" class=\"headerlink\" title=\"部署Hexo项目\"></a>部署Hexo项目</h3><p><strong>编辑hexo的config.yml文件，在deploy处修改repo项：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">blog@server_ip:/var/repo/hexo_static.git</span><br>  <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">master</span><br></code></pre></td></tr></table></figure>\n<p><strong>执行命令部署Hexo项目</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p><strong>进入目录var&#x2F;www&#x2F;hexo&#x2F;下，可以看到静态文件已全部上传</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">root@VM-8-16-ubuntu:/var/www/hexo<span class=\"hljs-comment\"># ll</span><br>total 96<br>drwxr-xr-x<span class=\"hljs-number\"> 12 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 ./<br>drwxr-xr-x <span class=\"hljs-number\"> 4 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:52 ../<br>drwxrwxr-x <span class=\"hljs-number\"> 3 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 2022/<br>-rw-rw-r-- <span class=\"hljs-number\"> 1 </span>blog blog <span class=\"hljs-number\"> 9178 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 404.html<br>drwxrwxr-x <span class=\"hljs-number\"> 2 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 about/<br>drwxrwxr-x <span class=\"hljs-number\"> 3 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 archives/<br>drwxrwxr-x <span class=\"hljs-number\"> 4 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 categories/<br>drwxrwxr-x <span class=\"hljs-number\"> 2 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 css/<br>drwxrwxr-x <span class=\"hljs-number\"> 2 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 img/<br>-rw-rw-r-- <span class=\"hljs-number\"> 1 </span>blog blog<span class=\"hljs-number\"> 15098 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 index.html<br>drwxrwxr-x <span class=\"hljs-number\"> 2 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 js/<br>drwxrwxr-x <span class=\"hljs-number\"> 2 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 links/<br>-rw-rw-r-- <span class=\"hljs-number\"> 1 </span>blog blog<span class=\"hljs-number\"> 20259 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 local-search.xml<br>drwxrwxr-x <span class=\"hljs-number\"> 2 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 tags/<br>drwxrwxr-x <span class=\"hljs-number\"> 2 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 xml/<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"访问测试\"><a href=\"#访问测试\" class=\"headerlink\" title=\"访问测试\"></a>访问测试</h3><p><strong>打开浏览器，输入Ubuntu服务器的IP地址，就可以看到博客页面啦</strong></p>\n","site":{"data":{}},"wordcount":2063,"excerpt":"","more":"<h1 id=\"Hexo部署到腾讯云\"><a href=\"#Hexo部署到腾讯云\" class=\"headerlink\" title=\"Hexo部署到腾讯云\"></a>Hexo部署到腾讯云</h1><h2 id=\"git配置\"><a href=\"#git配置\" class=\"headerlink\" title=\"git配置\"></a>git配置</h2><p><strong>创建一个名为blog的用户，用于管理Hexo项目</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">adduser blog<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"给blog用户添加文件的写权限\"><a href=\"#给blog用户添加文件的写权限\" class=\"headerlink\" title=\"给blog用户添加文件的写权限\"></a>给blog用户添加文件的写权限</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">vim /etc/sudoers<br><br><span class=\"hljs-comment\">#找到User privilege specification部分，添加如下内容：</span><br>blog    ALL=(ALL:ALL) AL<br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/hexo-bt-tcCloud/add-blog-su.png\"></p>\n<h3 id=\"切换至blog用户\"><a href=\"#切换至blog用户\" class=\"headerlink\" title=\"切换至blog用户\"></a>切换至blog用户</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">su blog<br></code></pre></td></tr></table></figure>\n<p><strong>退回到根路径（cd &#x2F;），在&#x2F;var&#x2F;repo下创建名为hexo_static的裸仓库</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo <span class=\"hljs-built_in\">mkdir</span> /var/repo/<br>sudo <span class=\"hljs-built_in\">chown</span> -R <span class=\"hljs-variable\">$USER</span>:<span class=\"hljs-variable\">$USER</span> /var/repo/<br>sudo <span class=\"hljs-built_in\">chmod</span> -R 755 /var/repo/<br><br><span class=\"hljs-built_in\">cd</span> /var/repo/<br>git init --bare hexo_static.git<br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/hexo-bt-tcCloud/init-hexo-git.png\"></p>\n<h2 id=\"创建Git钩子\"><a href=\"#创建Git钩子\" class=\"headerlink\" title=\"创建Git钩子\"></a>创建Git钩子</h2><p><strong>在之前创建的hexo_static裸仓库下有一个hooks文件夹，在其中创建一个名为post-receive的钩子文件：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">vim /var/repo/hexo_static.git/hooks/post-receive<br></code></pre></td></tr></table></figure>\n<p><strong>在其中写入如下内容：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span><br>git --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f<br></code></pre></td></tr></table></figure>\n<p><strong>让该文件变为可执行文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">chmod</span> +x /var/repo/hexo_static.git/hooks/post-receive<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"nginx-配置\"><a href=\"#nginx-配置\" class=\"headerlink\" title=\"nginx 配置\"></a>nginx 配置</h2><h3 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">sudo apt-get install nginx -y<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建-x2F-var-x2F-www-x2F-hexo目录，用于Nginx托管，修改目录所有权和权限\"><a href=\"#创建-x2F-var-x2F-www-x2F-hexo目录，用于Nginx托管，修改目录所有权和权限\" class=\"headerlink\" title=\"创建&#x2F;var&#x2F;www&#x2F;hexo目录，用于Nginx托管，修改目录所有权和权限\"></a>创建&#x2F;var&#x2F;www&#x2F;hexo目录，用于Nginx托管，修改目录所有权和权限</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo mkdir -p /var/www/hexo<br>sudo chown -R $USER:$USER /var/www/hexo<br>sudo chmod -R 755 /var/www/hexo<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"使用vim修改-x2F-etc-x2F-nginx-x2F-sites-enabled-x2F-default，使root指向hexo目录\"><a href=\"#使用vim修改-x2F-etc-x2F-nginx-x2F-sites-enabled-x2F-default，使root指向hexo目录\" class=\"headerlink\" title=\"使用vim修改&#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default，使root指向hexo目录\"></a>使用vim修改&#x2F;etc&#x2F;nginx&#x2F;sites-enabled&#x2F;default，使root指向hexo目录</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo vim /etc/nginx/sites-enabled/default<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">找到server部分，修改如下内容</span><br>root /var/www/hexo;<br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/hexo-bt-tcCloud/change-nginx-server.png\"></p>\n<h3 id=\"重启Nginx服务，使得改动生效\"><a href=\"#重启Nginx服务，使得改动生效\" class=\"headerlink\" title=\"重启Nginx服务，使得改动生效\"></a>重启Nginx服务，使得改动生效</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo service nginx restart<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"本地搭建hexo客户端（Windows）\"><a href=\"#本地搭建hexo客户端（Windows）\" class=\"headerlink\" title=\"本地搭建hexo客户端（Windows）\"></a>本地搭建hexo客户端（Windows）</h2><ul>\n<li>首先安装git，这里不再过多赘述</li>\n<li>使用命令ssh-keygen -t rsa在windons用户下&#x2F;.ssh文件夹中生成密钥</li>\n<li>将生成的公钥 .pub 文件内容拷贝到ubuntu服务器的&#x2F;home&#x2F;blog&#x2F;.ssh&#x2F;authorized_keys上</li>\n</ul>\n<h3 id=\"部署Hexo项目\"><a href=\"#部署Hexo项目\" class=\"headerlink\" title=\"部署Hexo项目\"></a>部署Hexo项目</h3><p><strong>编辑hexo的config.yml文件，在deploy处修改repo项：</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repo:</span> <span class=\"hljs-string\">blog@server_ip:/var/repo/hexo_static.git</span><br>  <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">master</span><br></code></pre></td></tr></table></figure>\n<p><strong>执行命令部署Hexo项目</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">hexo clean<br>hexo generate<br>hexo deploy<br></code></pre></td></tr></table></figure>\n\n<p><strong>进入目录var&#x2F;www&#x2F;hexo&#x2F;下，可以看到静态文件已全部上传</strong></p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">root@VM-8-16-ubuntu:/var/www/hexo<span class=\"hljs-comment\"># ll</span><br>total 96<br>drwxr-xr-x<span class=\"hljs-number\"> 12 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 ./<br>drwxr-xr-x <span class=\"hljs-number\"> 4 </span>root root <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:52 ../<br>drwxrwxr-x <span class=\"hljs-number\"> 3 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 2022/<br>-rw-rw-r-- <span class=\"hljs-number\"> 1 </span>blog blog <span class=\"hljs-number\"> 9178 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 404.html<br>drwxrwxr-x <span class=\"hljs-number\"> 2 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 about/<br>drwxrwxr-x <span class=\"hljs-number\"> 3 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 archives/<br>drwxrwxr-x <span class=\"hljs-number\"> 4 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 categories/<br>drwxrwxr-x <span class=\"hljs-number\"> 2 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 css/<br>drwxrwxr-x <span class=\"hljs-number\"> 2 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 img/<br>-rw-rw-r-- <span class=\"hljs-number\"> 1 </span>blog blog<span class=\"hljs-number\"> 15098 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 index.html<br>drwxrwxr-x <span class=\"hljs-number\"> 2 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 js/<br>drwxrwxr-x <span class=\"hljs-number\"> 2 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 links/<br>-rw-rw-r-- <span class=\"hljs-number\"> 1 </span>blog blog<span class=\"hljs-number\"> 20259 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 local-search.xml<br>drwxrwxr-x <span class=\"hljs-number\"> 2 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 tags/<br>drwxrwxr-x <span class=\"hljs-number\"> 2 </span>blog blog <span class=\"hljs-number\"> 4096 </span>Jun<span class=\"hljs-number\"> 25 </span>19:59 xml/<br><br></code></pre></td></tr></table></figure>\n<h3 id=\"访问测试\"><a href=\"#访问测试\" class=\"headerlink\" title=\"访问测试\"></a>访问测试</h3><p><strong>打开浏览器，输入Ubuntu服务器的IP地址，就可以看到博客页面啦</strong></p>\n"},{"title":"linux部署nacos-coredns-plugin","date":"2022-06-21T11:53:43.000Z","_content":"\n## nacos-coredns-plugin部署 (golang<=1.14)\n\n目前nacos-coredns-plugin的master分支使用的是 coredns v1.2.6 版本，里面的依赖由于时间太久没有更新，导入的时候会报错，所以需要切换到v1.6.7的分支。 coredns v1.6.7支持Go的modules模块功能，可以更好地管理项目依赖的导入。\n\n### 1.切换v1.6.7分支\n```shell\n    cd $GOPATH/src/\n    git clone https://github.com/nacos-group/nacos-coredns-plugin.git\n    cd nacos-coredns-plugin\n    git checkout -b v1.6.7 origin/v1.6.7\n    vi bin/build.sh\n```\n### 2.将build.sh脚本修改为以下内容：\n```shell\n    #!/usr/bin/env bash\n    # cd GOPATH\n    cd $GOPATH/src/\n\n    # remove codes\n    rm -rf coredns\n    rm -rf nacos-coredns-plugin\n\n    # clone current codes\n    git clone https://github.com/coredns/coredns.git\n    git clone https://github.com/nacos-group/nacos-coredns-plugin.git\n\n    # cd coredns directory\n    cd $GOPATHgit /src/nacos-coredns-plugin\n    git checkout -b v1.6.7 origin/v1.6.7\n    cd $GOPATH/src/coredns\n    git checkout -b v1.6.7 v1.6.7\n    go get github.com/cihub/seelog\n\n    # copy nacos plugin to coredns\n    cp -r ../nacos-coredns-plugin/nacos plugin/\n    cp -r ../nacos-coredns-plugin/forward/setup.go plugin/forward\n\n    # insert nacos into plugin\n    sed -i '/hosts/a\\\\t\"nacos\",' core/dnsserver/zdirectives.go\n    sed -i '/coredns\\/plugin\\/hosts/a\\\\t_ \"coredns/plugin/nacos\"' core/plugin/zplugin.go\n    sed -i '/hosts:hosts/a\\nacos:nacos' plugin.cfg\n\n    # build\n    make\n```\n\n### 3.运行脚本编译nacos-coredns\n```shell\n    cp bin/build.sh ~/\n    cd ~/\n    sh build.sh\n```\n\n### 4.创建nacos-coredns配置文件\n```shell\n    cd $GOPATH/src/coredns\n    mkdir conf\n    vi conf/nacos-coredns.cfg\n```\n配置文件内容为：\n```shell\n. {\n    log\n    nacos {\n        nacos_server 127.0.0.1\n        nacos_server_port 8848\n   }\n   forward . /etc/resolv.conf\n }\n```\n* nacos_server: Nacos服务器的ip，如果有两个或多个Nacos服务器，用逗号分隔\n* nacos_server_port: Nacos服务器端口\n* forward: 未在 Nacos 中注册的域名将被转发到上游。\n\n### 5.在coredns模块下运行nacos-coredns-plugin\n```shell\n    cd $GOPATH/src/coredns\n    ./coredns -conf conf/nacos-coredns.cfg -dns.port 1053\n```\n\n### 6.测试dig $nacos_service_name @127.0.0.1 -p $dns_port\n在终端中输入： \n```shell\n    dig hello123 @127.0.0.1 -p 1053\n```\n![nacos-coredns-test](/img/nacos-coredns-plugin/nacos-coredns-test.png)","source":"_posts/nacos-coredns-plugin.md","raw":"---\ntitle: linux部署nacos-coredns-plugin\ndate: 2022-06-21 19:53:43\ncategories: \n - nacos\n---\n\n## nacos-coredns-plugin部署 (golang<=1.14)\n\n目前nacos-coredns-plugin的master分支使用的是 coredns v1.2.6 版本，里面的依赖由于时间太久没有更新，导入的时候会报错，所以需要切换到v1.6.7的分支。 coredns v1.6.7支持Go的modules模块功能，可以更好地管理项目依赖的导入。\n\n### 1.切换v1.6.7分支\n```shell\n    cd $GOPATH/src/\n    git clone https://github.com/nacos-group/nacos-coredns-plugin.git\n    cd nacos-coredns-plugin\n    git checkout -b v1.6.7 origin/v1.6.7\n    vi bin/build.sh\n```\n### 2.将build.sh脚本修改为以下内容：\n```shell\n    #!/usr/bin/env bash\n    # cd GOPATH\n    cd $GOPATH/src/\n\n    # remove codes\n    rm -rf coredns\n    rm -rf nacos-coredns-plugin\n\n    # clone current codes\n    git clone https://github.com/coredns/coredns.git\n    git clone https://github.com/nacos-group/nacos-coredns-plugin.git\n\n    # cd coredns directory\n    cd $GOPATHgit /src/nacos-coredns-plugin\n    git checkout -b v1.6.7 origin/v1.6.7\n    cd $GOPATH/src/coredns\n    git checkout -b v1.6.7 v1.6.7\n    go get github.com/cihub/seelog\n\n    # copy nacos plugin to coredns\n    cp -r ../nacos-coredns-plugin/nacos plugin/\n    cp -r ../nacos-coredns-plugin/forward/setup.go plugin/forward\n\n    # insert nacos into plugin\n    sed -i '/hosts/a\\\\t\"nacos\",' core/dnsserver/zdirectives.go\n    sed -i '/coredns\\/plugin\\/hosts/a\\\\t_ \"coredns/plugin/nacos\"' core/plugin/zplugin.go\n    sed -i '/hosts:hosts/a\\nacos:nacos' plugin.cfg\n\n    # build\n    make\n```\n\n### 3.运行脚本编译nacos-coredns\n```shell\n    cp bin/build.sh ~/\n    cd ~/\n    sh build.sh\n```\n\n### 4.创建nacos-coredns配置文件\n```shell\n    cd $GOPATH/src/coredns\n    mkdir conf\n    vi conf/nacos-coredns.cfg\n```\n配置文件内容为：\n```shell\n. {\n    log\n    nacos {\n        nacos_server 127.0.0.1\n        nacos_server_port 8848\n   }\n   forward . /etc/resolv.conf\n }\n```\n* nacos_server: Nacos服务器的ip，如果有两个或多个Nacos服务器，用逗号分隔\n* nacos_server_port: Nacos服务器端口\n* forward: 未在 Nacos 中注册的域名将被转发到上游。\n\n### 5.在coredns模块下运行nacos-coredns-plugin\n```shell\n    cd $GOPATH/src/coredns\n    ./coredns -conf conf/nacos-coredns.cfg -dns.port 1053\n```\n\n### 6.测试dig $nacos_service_name @127.0.0.1 -p $dns_port\n在终端中输入： \n```shell\n    dig hello123 @127.0.0.1 -p 1053\n```\n![nacos-coredns-test](/img/nacos-coredns-plugin/nacos-coredns-test.png)","slug":"nacos-coredns-plugin","published":1,"updated":"2022-08-19T13:35:34.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdkl000fi3wu7tl1668t","content":"<h2 id=\"nacos-coredns-plugin部署-golang-lt-x3D-1-14\"><a href=\"#nacos-coredns-plugin部署-golang-lt-x3D-1-14\" class=\"headerlink\" title=\"nacos-coredns-plugin部署 (golang&lt;&#x3D;1.14)\"></a>nacos-coredns-plugin部署 (golang&lt;&#x3D;1.14)</h2><p>目前nacos-coredns-plugin的master分支使用的是 coredns v1.2.6 版本，里面的依赖由于时间太久没有更新，导入的时候会报错，所以需要切换到v1.6.7的分支。 coredns v1.6.7支持Go的modules模块功能，可以更好地管理项目依赖的导入。</p>\n<h3 id=\"1-切换v1-6-7分支\"><a href=\"#1-切换v1-6-7分支\" class=\"headerlink\" title=\"1.切换v1.6.7分支\"></a>1.切换v1.6.7分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd $GOPATH/src/<br>git clone https://github.com/nacos-group/nacos-coredns-plugin.git<br>cd nacos-coredns-plugin<br>git checkout -b v1.6.7 origin/v1.6.7<br>vi bin/build.sh<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-将build-sh脚本修改为以下内容：\"><a href=\"#2-将build-sh脚本修改为以下内容：\" class=\"headerlink\" title=\"2.将build.sh脚本修改为以下内容：\"></a>2.将build.sh脚本修改为以下内容：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/env bash</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> GOPATH</span><br>cd $GOPATH/src/<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">remove codes</span><br>rm -rf coredns<br>rm -rf nacos-coredns-plugin<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">clone</span> current codes</span><br>git clone https://github.com/coredns/coredns.git<br>git clone https://github.com/nacos-group/nacos-coredns-plugin.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> coredns directory</span><br>cd $GOPATHgit /src/nacos-coredns-plugin<br>git checkout -b v1.6.7 origin/v1.6.7<br>cd $GOPATH/src/coredns<br>git checkout -b v1.6.7 v1.6.7<br>go get github.com/cihub/seelog<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">copy nacos plugin to coredns</span><br>cp -r ../nacos-coredns-plugin/nacos plugin/<br>cp -r ../nacos-coredns-plugin/forward/setup.go plugin/forward<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">insert nacos into plugin</span><br>sed -i &#x27;/hosts/a\\\\t&quot;nacos&quot;,&#x27; core/dnsserver/zdirectives.go<br>sed -i &#x27;/coredns\\/plugin\\/hosts/a\\\\t_ &quot;coredns/plugin/nacos&quot;&#x27; core/plugin/zplugin.go<br>sed -i &#x27;/hosts:hosts/a\\nacos:nacos&#x27; plugin.cfg<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">build</span><br>make<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-运行脚本编译nacos-coredns\"><a href=\"#3-运行脚本编译nacos-coredns\" class=\"headerlink\" title=\"3.运行脚本编译nacos-coredns\"></a>3.运行脚本编译nacos-coredns</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cp bin/build.sh ~/<br>cd ~/<br>sh build.sh<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-创建nacos-coredns配置文件\"><a href=\"#4-创建nacos-coredns配置文件\" class=\"headerlink\" title=\"4.创建nacos-coredns配置文件\"></a>4.创建nacos-coredns配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd $GOPATH/src/coredns<br>mkdir conf<br>vi conf/nacos-coredns.cfg<br></code></pre></td></tr></table></figure>\n<p>配置文件内容为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">. &#123;<br>    log<br>    nacos &#123;<br>        nacos_server 127.0.0.1<br>        nacos_server_port 8848<br>   &#125;<br>   forward . /etc/resolv.conf<br> &#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>nacos_server: Nacos服务器的ip，如果有两个或多个Nacos服务器，用逗号分隔</li>\n<li>nacos_server_port: Nacos服务器端口</li>\n<li>forward: 未在 Nacos 中注册的域名将被转发到上游。</li>\n</ul>\n<h3 id=\"5-在coredns模块下运行nacos-coredns-plugin\"><a href=\"#5-在coredns模块下运行nacos-coredns-plugin\" class=\"headerlink\" title=\"5.在coredns模块下运行nacos-coredns-plugin\"></a>5.在coredns模块下运行nacos-coredns-plugin</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd $GOPATH/src/coredns<br>./coredns -conf conf/nacos-coredns.cfg -dns.port 1053<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-测试dig-nacos-service-name-127-0-0-1-p-dns-port\"><a href=\"#6-测试dig-nacos-service-name-127-0-0-1-p-dns-port\" class=\"headerlink\" title=\"6.测试dig $nacos_service_name @127.0.0.1 -p $dns_port\"></a>6.测试dig $nacos_service_name @127.0.0.1 -p $dns_port</h3><p>在终端中输入： </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">dig hello123 @127.0.0.1 -p 1053<br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/nacos-coredns-plugin/nacos-coredns-test.png\" alt=\"nacos-coredns-test\"></p>\n","site":{"data":{}},"wordcount":1718,"excerpt":"","more":"<h2 id=\"nacos-coredns-plugin部署-golang-lt-x3D-1-14\"><a href=\"#nacos-coredns-plugin部署-golang-lt-x3D-1-14\" class=\"headerlink\" title=\"nacos-coredns-plugin部署 (golang&lt;&#x3D;1.14)\"></a>nacos-coredns-plugin部署 (golang&lt;&#x3D;1.14)</h2><p>目前nacos-coredns-plugin的master分支使用的是 coredns v1.2.6 版本，里面的依赖由于时间太久没有更新，导入的时候会报错，所以需要切换到v1.6.7的分支。 coredns v1.6.7支持Go的modules模块功能，可以更好地管理项目依赖的导入。</p>\n<h3 id=\"1-切换v1-6-7分支\"><a href=\"#1-切换v1-6-7分支\" class=\"headerlink\" title=\"1.切换v1.6.7分支\"></a>1.切换v1.6.7分支</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd $GOPATH/src/<br>git clone https://github.com/nacos-group/nacos-coredns-plugin.git<br>cd nacos-coredns-plugin<br>git checkout -b v1.6.7 origin/v1.6.7<br>vi bin/build.sh<br></code></pre></td></tr></table></figure>\n<h3 id=\"2-将build-sh脚本修改为以下内容：\"><a href=\"#2-将build-sh脚本修改为以下内容：\" class=\"headerlink\" title=\"2.将build.sh脚本修改为以下内容：\"></a>2.将build.sh脚本修改为以下内容：</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/usr/bin/env bash</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> GOPATH</span><br>cd $GOPATH/src/<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">remove codes</span><br>rm -rf coredns<br>rm -rf nacos-coredns-plugin<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">clone</span> current codes</span><br>git clone https://github.com/coredns/coredns.git<br>git clone https://github.com/nacos-group/nacos-coredns-plugin.git<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cd</span> coredns directory</span><br>cd $GOPATHgit /src/nacos-coredns-plugin<br>git checkout -b v1.6.7 origin/v1.6.7<br>cd $GOPATH/src/coredns<br>git checkout -b v1.6.7 v1.6.7<br>go get github.com/cihub/seelog<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">copy nacos plugin to coredns</span><br>cp -r ../nacos-coredns-plugin/nacos plugin/<br>cp -r ../nacos-coredns-plugin/forward/setup.go plugin/forward<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">insert nacos into plugin</span><br>sed -i &#x27;/hosts/a\\\\t&quot;nacos&quot;,&#x27; core/dnsserver/zdirectives.go<br>sed -i &#x27;/coredns\\/plugin\\/hosts/a\\\\t_ &quot;coredns/plugin/nacos&quot;&#x27; core/plugin/zplugin.go<br>sed -i &#x27;/hosts:hosts/a\\nacos:nacos&#x27; plugin.cfg<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">build</span><br>make<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-运行脚本编译nacos-coredns\"><a href=\"#3-运行脚本编译nacos-coredns\" class=\"headerlink\" title=\"3.运行脚本编译nacos-coredns\"></a>3.运行脚本编译nacos-coredns</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cp bin/build.sh ~/<br>cd ~/<br>sh build.sh<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-创建nacos-coredns配置文件\"><a href=\"#4-创建nacos-coredns配置文件\" class=\"headerlink\" title=\"4.创建nacos-coredns配置文件\"></a>4.创建nacos-coredns配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd $GOPATH/src/coredns<br>mkdir conf<br>vi conf/nacos-coredns.cfg<br></code></pre></td></tr></table></figure>\n<p>配置文件内容为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">. &#123;<br>    log<br>    nacos &#123;<br>        nacos_server 127.0.0.1<br>        nacos_server_port 8848<br>   &#125;<br>   forward . /etc/resolv.conf<br> &#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>nacos_server: Nacos服务器的ip，如果有两个或多个Nacos服务器，用逗号分隔</li>\n<li>nacos_server_port: Nacos服务器端口</li>\n<li>forward: 未在 Nacos 中注册的域名将被转发到上游。</li>\n</ul>\n<h3 id=\"5-在coredns模块下运行nacos-coredns-plugin\"><a href=\"#5-在coredns模块下运行nacos-coredns-plugin\" class=\"headerlink\" title=\"5.在coredns模块下运行nacos-coredns-plugin\"></a>5.在coredns模块下运行nacos-coredns-plugin</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd $GOPATH/src/coredns<br>./coredns -conf conf/nacos-coredns.cfg -dns.port 1053<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-测试dig-nacos-service-name-127-0-0-1-p-dns-port\"><a href=\"#6-测试dig-nacos-service-name-127-0-0-1-p-dns-port\" class=\"headerlink\" title=\"6.测试dig $nacos_service_name @127.0.0.1 -p $dns_port\"></a>6.测试dig $nacos_service_name @127.0.0.1 -p $dns_port</h3><p>在终端中输入： </p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">dig hello123 @127.0.0.1 -p 1053<br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/nacos-coredns-plugin/nacos-coredns-test.png\" alt=\"nacos-coredns-test\"></p>\n"},{"title":"gRPC+protobuf搭建的简单服务端注册到nacos中,并进行负载均衡测试","date":"2022-07-05T07:10:43.000Z","_content":"\n**![项目代码来源](https://gitee.com/xiaonqedu/nacos-grpc-gotest?_from=gitee_search)**\n## protobuf生成的简单服务端\n```\n    #生成protobuf文件\n    cd pb\n    protoc --go_out=plugins=grpc:./ *.proto\n\n    #运行命令安装包\n    go mod init nacos_person\n    go mod tidy\n\n    #运行两个服务instance\n    cd nacos-server8800\n    go run nacos_server.go\n\n    cd nacos-server8801\n    go run nacos_server.go\n```\n\n## 查看nacos服务注册的状态\n![](/img/nacos_grpc_service_list.png)\n\n## 查看“服务详情” sdk获取服务信息\n![](/img/nacos_grpc_service_detail.png)\n\n## 启动客户端测试负载均衡\n```\n    // 运行第一次访问的是 127.0.0.1:8800\n    go run nacos_client.go \n    127.0.0.1:8800\n\n    // 运行第一次访问的是 127.0.0.1:8801\n    go run nacos_client.go \n    127.0.0.1:8801\n```\n\n\n\n\n","source":"_posts/nacos_grpc_service.md","raw":"---\ntitle: gRPC+protobuf搭建的简单服务端注册到nacos中,并进行负载均衡测试\ndate: 2022-07-05 15:10:43\ncategories: \n - nacos\n---\n\n**![项目代码来源](https://gitee.com/xiaonqedu/nacos-grpc-gotest?_from=gitee_search)**\n## protobuf生成的简单服务端\n```\n    #生成protobuf文件\n    cd pb\n    protoc --go_out=plugins=grpc:./ *.proto\n\n    #运行命令安装包\n    go mod init nacos_person\n    go mod tidy\n\n    #运行两个服务instance\n    cd nacos-server8800\n    go run nacos_server.go\n\n    cd nacos-server8801\n    go run nacos_server.go\n```\n\n## 查看nacos服务注册的状态\n![](/img/nacos_grpc_service_list.png)\n\n## 查看“服务详情” sdk获取服务信息\n![](/img/nacos_grpc_service_detail.png)\n\n## 启动客户端测试负载均衡\n```\n    // 运行第一次访问的是 127.0.0.1:8800\n    go run nacos_client.go \n    127.0.0.1:8800\n\n    // 运行第一次访问的是 127.0.0.1:8801\n    go run nacos_client.go \n    127.0.0.1:8801\n```\n\n\n\n\n","slug":"nacos_grpc_service","published":1,"updated":"2022-08-19T13:35:34.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdkn000hi3wu3iev8jan","content":"<p><strong><img src=\"https://gitee.com/xiaonqedu/nacos-grpc-gotest?_from=gitee_search\" alt=\"项目代码来源\"></strong></p>\n<h2 id=\"protobuf生成的简单服务端\"><a href=\"#protobuf生成的简单服务端\" class=\"headerlink\" title=\"protobuf生成的简单服务端\"></a>protobuf生成的简单服务端</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">#生成protobuf文件<br><span class=\"hljs-keyword\">cd</span> pb<br>protoc --go_out=plugins=grpc:./ *.proto<br><br>#运行命令安装包<br><span class=\"hljs-keyword\">go</span> <span class=\"hljs-keyword\">mod</span> init nacos_person<br><span class=\"hljs-keyword\">go</span> <span class=\"hljs-keyword\">mod</span> tidy<br><br>#运行两个服务instance<br><span class=\"hljs-keyword\">cd</span> nacos-server8800<br><span class=\"hljs-keyword\">go</span> run nacos_server.<span class=\"hljs-keyword\">go</span><br><br><span class=\"hljs-keyword\">cd</span> nacos-server8801<br><span class=\"hljs-keyword\">go</span> run nacos_server.<span class=\"hljs-keyword\">go</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查看nacos服务注册的状态\"><a href=\"#查看nacos服务注册的状态\" class=\"headerlink\" title=\"查看nacos服务注册的状态\"></a>查看nacos服务注册的状态</h2><p><img src=\"/img/nacos_grpc_service_list.png\"></p>\n<h2 id=\"查看“服务详情”-sdk获取服务信息\"><a href=\"#查看“服务详情”-sdk获取服务信息\" class=\"headerlink\" title=\"查看“服务详情” sdk获取服务信息\"></a>查看“服务详情” sdk获取服务信息</h2><p><img src=\"/img/nacos_grpc_service_detail.png\"></p>\n<h2 id=\"启动客户端测试负载均衡\"><a href=\"#启动客户端测试负载均衡\" class=\"headerlink\" title=\"启动客户端测试负载均衡\"></a>启动客户端测试负载均衡</h2><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs accesslog\">// 运行第一次访问的是 <span class=\"hljs-number\">127</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">8800</span><br>go run nacos_client.go <br><span class=\"hljs-number\">127.0.0.1:8800</span><br><br>// 运行第一次访问的是 <span class=\"hljs-number\">127</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">8801</span><br>go run nacos_client.go <br><span class=\"hljs-number\">127.0.0.1:8801</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n","site":{"data":{}},"wordcount":385,"excerpt":"","more":"<p><strong><img src=\"https://gitee.com/xiaonqedu/nacos-grpc-gotest?_from=gitee_search\" alt=\"项目代码来源\"></strong></p>\n<h2 id=\"protobuf生成的简单服务端\"><a href=\"#protobuf生成的简单服务端\" class=\"headerlink\" title=\"protobuf生成的简单服务端\"></a>protobuf生成的简单服务端</h2><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">#生成protobuf文件<br><span class=\"hljs-keyword\">cd</span> pb<br>protoc --go_out=plugins=grpc:./ *.proto<br><br>#运行命令安装包<br><span class=\"hljs-keyword\">go</span> <span class=\"hljs-keyword\">mod</span> init nacos_person<br><span class=\"hljs-keyword\">go</span> <span class=\"hljs-keyword\">mod</span> tidy<br><br>#运行两个服务instance<br><span class=\"hljs-keyword\">cd</span> nacos-server8800<br><span class=\"hljs-keyword\">go</span> run nacos_server.<span class=\"hljs-keyword\">go</span><br><br><span class=\"hljs-keyword\">cd</span> nacos-server8801<br><span class=\"hljs-keyword\">go</span> run nacos_server.<span class=\"hljs-keyword\">go</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查看nacos服务注册的状态\"><a href=\"#查看nacos服务注册的状态\" class=\"headerlink\" title=\"查看nacos服务注册的状态\"></a>查看nacos服务注册的状态</h2><p><img src=\"/img/nacos_grpc_service_list.png\"></p>\n<h2 id=\"查看“服务详情”-sdk获取服务信息\"><a href=\"#查看“服务详情”-sdk获取服务信息\" class=\"headerlink\" title=\"查看“服务详情” sdk获取服务信息\"></a>查看“服务详情” sdk获取服务信息</h2><p><img src=\"/img/nacos_grpc_service_detail.png\"></p>\n<h2 id=\"启动客户端测试负载均衡\"><a href=\"#启动客户端测试负载均衡\" class=\"headerlink\" title=\"启动客户端测试负载均衡\"></a>启动客户端测试负载均衡</h2><figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs accesslog\">// 运行第一次访问的是 <span class=\"hljs-number\">127</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">8800</span><br>go run nacos_client.go <br><span class=\"hljs-number\">127.0.0.1:8800</span><br><br>// 运行第一次访问的是 <span class=\"hljs-number\">127</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">8801</span><br>go run nacos_client.go <br><span class=\"hljs-number\">127.0.0.1:8801</span><br></code></pre></td></tr></table></figure>\n\n\n\n\n"},{"title":"ospp记录(一)","date":"2022-07-04T14:18:43.000Z","_content":"## 工作进展\n目前完成了nacos环境的搭建(vmware-ubuntu20.0.4 、nacos-docker v2.1.0 (mysql8.0.18)、 nacos-coredns-plugin v1.6.7)\n\n使用nacos-go-sdkv2.0搭建的go客户端，可以跟nacos v2.1.0服务器进行grpc连接。 然后在测试nacos-coredns插件与nacos服务器连接的时候返回空结果，发现 nacos-coredns 与 nacos 服务端通信的 api（/nacos/v1/ns/api/allDomNames、/nacos/v1/ns/api/srvIPXT）在 nacos2.x 版本被移除了。\n\n请教了老师后发现这些都是很老的接口，v2里被下掉了。同时在导师提醒后，发现可以利用目前go-sdk中实现的nacos client和server通信，从nacos client获取数据转成对应的数据结构就可以，不需要api来进行数据传输。\n\n例如，通过nacos-client来调用GetAllServicesInfo、GetService等方法，就能获取所有服务或某个具体服务的信息（ip、port...），这些数据看可以覆盖旧api获取的数据，因此只需要对从nacos client获取数据转成对应coredns插件需要的数据结构即可。\n\n目前的方案为：\n\n1、通过在coredns插件中导入nacos-go-sdk/v2包，搭建一个能跟nacos服务器通信的客户端\n\n2、利用sdk里提供的方法从nacos服务器请求数据\n\n3、将从nacos服务器里获取到的数据转成对应coredns插件需要的数据结构\n\n","source":"_posts/ospp-0704.md","raw":"---\ntitle: ospp记录(一)\ndate: 2022-07-04 22:18:43\ncategories: \n - nacos\n---\n## 工作进展\n目前完成了nacos环境的搭建(vmware-ubuntu20.0.4 、nacos-docker v2.1.0 (mysql8.0.18)、 nacos-coredns-plugin v1.6.7)\n\n使用nacos-go-sdkv2.0搭建的go客户端，可以跟nacos v2.1.0服务器进行grpc连接。 然后在测试nacos-coredns插件与nacos服务器连接的时候返回空结果，发现 nacos-coredns 与 nacos 服务端通信的 api（/nacos/v1/ns/api/allDomNames、/nacos/v1/ns/api/srvIPXT）在 nacos2.x 版本被移除了。\n\n请教了老师后发现这些都是很老的接口，v2里被下掉了。同时在导师提醒后，发现可以利用目前go-sdk中实现的nacos client和server通信，从nacos client获取数据转成对应的数据结构就可以，不需要api来进行数据传输。\n\n例如，通过nacos-client来调用GetAllServicesInfo、GetService等方法，就能获取所有服务或某个具体服务的信息（ip、port...），这些数据看可以覆盖旧api获取的数据，因此只需要对从nacos client获取数据转成对应coredns插件需要的数据结构即可。\n\n目前的方案为：\n\n1、通过在coredns插件中导入nacos-go-sdk/v2包，搭建一个能跟nacos服务器通信的客户端\n\n2、利用sdk里提供的方法从nacos服务器请求数据\n\n3、将从nacos服务器里获取到的数据转成对应coredns插件需要的数据结构\n\n","slug":"ospp-0704","published":1,"updated":"2022-08-19T13:35:34.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdkp000ji3wu7ecv2rkk","content":"<h2 id=\"工作进展\"><a href=\"#工作进展\" class=\"headerlink\" title=\"工作进展\"></a>工作进展</h2><p>目前完成了nacos环境的搭建(vmware-ubuntu20.0.4 、nacos-docker v2.1.0 (mysql8.0.18)、 nacos-coredns-plugin v1.6.7)</p>\n<p>使用nacos-go-sdkv2.0搭建的go客户端，可以跟nacos v2.1.0服务器进行grpc连接。 然后在测试nacos-coredns插件与nacos服务器连接的时候返回空结果，发现 nacos-coredns 与 nacos 服务端通信的 api（&#x2F;nacos&#x2F;v1&#x2F;ns&#x2F;api&#x2F;allDomNames、&#x2F;nacos&#x2F;v1&#x2F;ns&#x2F;api&#x2F;srvIPXT）在 nacos2.x 版本被移除了。</p>\n<p>请教了老师后发现这些都是很老的接口，v2里被下掉了。同时在导师提醒后，发现可以利用目前go-sdk中实现的nacos client和server通信，从nacos client获取数据转成对应的数据结构就可以，不需要api来进行数据传输。</p>\n<p>例如，通过nacos-client来调用GetAllServicesInfo、GetService等方法，就能获取所有服务或某个具体服务的信息（ip、port…），这些数据看可以覆盖旧api获取的数据，因此只需要对从nacos client获取数据转成对应coredns插件需要的数据结构即可。</p>\n<p>目前的方案为：</p>\n<p>1、通过在coredns插件中导入nacos-go-sdk&#x2F;v2包，搭建一个能跟nacos服务器通信的客户端</p>\n<p>2、利用sdk里提供的方法从nacos服务器请求数据</p>\n<p>3、将从nacos服务器里获取到的数据转成对应coredns插件需要的数据结构</p>\n","site":{"data":{}},"wordcount":737,"excerpt":"","more":"<h2 id=\"工作进展\"><a href=\"#工作进展\" class=\"headerlink\" title=\"工作进展\"></a>工作进展</h2><p>目前完成了nacos环境的搭建(vmware-ubuntu20.0.4 、nacos-docker v2.1.0 (mysql8.0.18)、 nacos-coredns-plugin v1.6.7)</p>\n<p>使用nacos-go-sdkv2.0搭建的go客户端，可以跟nacos v2.1.0服务器进行grpc连接。 然后在测试nacos-coredns插件与nacos服务器连接的时候返回空结果，发现 nacos-coredns 与 nacos 服务端通信的 api（&#x2F;nacos&#x2F;v1&#x2F;ns&#x2F;api&#x2F;allDomNames、&#x2F;nacos&#x2F;v1&#x2F;ns&#x2F;api&#x2F;srvIPXT）在 nacos2.x 版本被移除了。</p>\n<p>请教了老师后发现这些都是很老的接口，v2里被下掉了。同时在导师提醒后，发现可以利用目前go-sdk中实现的nacos client和server通信，从nacos client获取数据转成对应的数据结构就可以，不需要api来进行数据传输。</p>\n<p>例如，通过nacos-client来调用GetAllServicesInfo、GetService等方法，就能获取所有服务或某个具体服务的信息（ip、port…），这些数据看可以覆盖旧api获取的数据，因此只需要对从nacos client获取数据转成对应coredns插件需要的数据结构即可。</p>\n<p>目前的方案为：</p>\n<p>1、通过在coredns插件中导入nacos-go-sdk&#x2F;v2包，搭建一个能跟nacos服务器通信的客户端</p>\n<p>2、利用sdk里提供的方法从nacos服务器请求数据</p>\n<p>3、将从nacos服务器里获取到的数据转成对应coredns插件需要的数据结构</p>\n"},{"title":"项目报告","date":"2022-09-09T11:47:43.000Z","_content":"\n\n[Nacos-CoreDNS模块支持以长连接访问Nacos服务端](https://summer-ospp.ac.cn/#/org/prodetail/22ab10318)\n## 项目信息\n### 项目名称：Nacos-CoreDNS模块支持以长连接访问Nacos服务端\n### 项目产出：\n\n- [x]  1. 设计出Nacos CoreDNS模块支持gRPC的方案，输出详细设计文档； \n- [x]  2. 根据设计文档，对Nacos CoreDNS模块进行开发；\n- [x]  3. 提供新Nacos CoreDNS模块的使用示例和文档。 \n### 方案描述：\n当前 Nacos-CoreDNS-Plugin 插件是通过HTTP短连接方式调用Nacos服务端的 API 来请求获取nacos服务端的资源信息。 而在nacos版本v2.x后，原来v1.x版本的API已经被移除，替换成了建立gRPC连接的方式通过gRPC请求来访问获取nacos服务端的资源信息。\n因此本项目的方案可以参考Nacos-go-sdk与Nacos服务器的通信方式，在Nacos-coredns-plugin内导入Nacos-sdk-go相关功能，封装成新的grpc通信模块，实现nacos-coredns插件与nacos服务器的通信。\n例如，通过nacos-go-sdk来调用GetAllServicesInfo、GetService等方法，就能获取所有服务或某个具体服务的信息（ip、port...），这些数据可以覆盖nacos v1版本api传输的数据，因此只需要对从nacos服务端获取的数据转成对应coredns插件需要的数据结构即可。\n#### 核心方法\n\n1.  构建客户端：通过在coredns插件中导入nacos-go-sdk/v2包，搭建一个nacos-coredns插件和nacos服务通信的客户端 \n2.  根据插件的资源需求，封装sdk方法， 完成通信中的数据交换：\n   - GetAllServicesInfo: 请求获取Nacos服务端里注册的所有服务名\n   - GetService:  请求获取Nacos服务端某个服务的具体信息\n   - Subscribe:   订阅Nacos服务端某个服务\n   - Unsubsrcibe: 取消订阅Nacos服务端某个服务\n   - Callback:    当Nacos服务端的订阅服务发生改变时，通过回调函数更新客户端的服务数据\n   - HasSubcribed: 记录当前服务是否订阅，避免重复订阅\n3.  替换原来插件的数据结构：原来的nacos-coredns插件的数据结构与新版nacos服务端gRPC请求返回的数据结构冲突不兼容，需要放弃原来的数据结构，更新为新版的数据结构。\n\n**grpc客户端的类设计图**\n![NacosGrpcClient.drawio.png](https://cdn.nlark.com/yuque/0/2022/png/29425667/1664196977944-f4258097-3823-4984-8814-4cae3ed8cdb1.png#clientId=u4ceca8f8-239f-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=ui&id=n1TAW&name=NacosGrpcClient.drawio.png&originHeight=277&originWidth=922&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26579&status=error&style=none&taskId=uc9eeb30f-459a-4007-af54-8999825ae82&title=)\n#### grpc通信流程设计\n![grpc-design.png](https://cdn.nlark.com/yuque/0/2022/png/29425667/1664196982731-98f47454-b143-4968-a2e8-223d287d106e.png#clientId=u4ceca8f8-239f-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=ui&id=ua814f7c3&name=grpc-design.png&originHeight=373&originWidth=1053&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42662&status=error&style=none&taskId=ubb61ba78-774d-4f31-b5f6-4763e61ae42&title=)\n1、启动nacos-coredns插件时，同时启动插件与nacos服务器的grpc通信客户端（nacos_grpc_client）。\n2、grpc通信客户端调用了Nacos-go-sdk/v2中实现的方法，从nacos服务器集群中获取一个服务器的IP地址和端口并建立TCP连接。HTTP/2下，同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应。\n3、nacos-coredns插件向Nacos服务器请求资源时，通过grpc通信客户端来调用nacos-go-sdk/v2封装的GetAllServicesInfo、GetService等方法来获取所有服务或某个具体服务的信息详情（ip、port...）。\n4、grpc通信客户端将从nacos服务器里获取到的数据存入nacos-coredns插件的数据缓存中，待插件处理DNS请求时输出数据。\n5、对grpc通信客户端设置 超时时间 与 重试次数 等措施来避免调用超时、 阻塞等情况。\n\n### 方案具体实现：\n#### 一、 构建客户端\n在 Nacos-CoreDNS-Plugin 插件中导入nacos-go-sdk/v2包， 来与要访问的nacos服务端集群建立gRPC连接。\n与nacos服务端建立gRPC需要两个参数  **clientConfig** 和  **serverConfig**. \n\n- clientConfig 是针对本项目作为向服务端请求资源的客户端 来配置 对nacos服务端的 NamespaceId 请求超时TimeoutMs 日志目录LogDir 数据缓存目录CacheDir\n```go\nnacosGrpcClient.clientConfig = *constant.NewClientConfig(\n        constant.WithNamespaceId(namespaceId),\n        constant.WithTimeoutMs(5000),\n        constant.WithLogDir(LogPath),\n        constant.WithCacheDir(CachePath),\n        constant.WithNotLoadCacheAtStart(true),\n        constant.WithUpdateCacheWhenEmpty(true),\n        constant.WithLogLevel(\"debug\"),\n)\n```\n\n- serverConfig 指定服务端集群的Ip地址和端口\n```go\nserverConfigs := make([]constant.ServerConfig, len(serverHosts))\nfor i, serverHost := range serverHosts {\n        serverIp := strings.Split(serverHost, \":\")[0]\n        serverPort, err := strconv.Atoi(strings.Split(serverHost, \":\")[1])\n        if err != nil {\n            NacosClientLogger.Error(\"nacos server host config error!\", err)\n        }\n        serverConfigs[i] = *constant.NewServerConfig(\n            serverIp,\n            uint64(serverPort),\n            constant.WithScheme(\"http\"),\n            constant.WithContextPath(\"/nacos\"),\n        )\n\n    }\nnacosGrpcClient.serverConfigs = serverConfigs\n```\n\n- 配置完成后， 连接建立， 通过此客户端来进行通信\n```go\nnacosGrpcClient.grpcClient, err = clients.NewNamingClient(\n    vo.NacosClientParam{\n        ClientConfig:  &nacosGrpcClient.clientConfig,\n        ServerConfigs: nacosGrpcClient.serverConfigs,\n    },\n)\n```\n#### 二、 客户端的主要功能\n#### 根据插件的资源需求，封装sdk方法， 完成通信中的数据交换。\n\n1. GetAllServicesInfo:  对应v1版本的API(/v1/ns/api/allDomNames)，通过封装sdk的方法，获取在nacos里注册的所有服务名。\t\t\t \n```go\nfunc (ngc *NacosGrpcClient) GetAllServicesInfo() []string {\n    var pageNo = uint32(1)\n    var pageSize = uint32(100)\n    var services []string\n\n    pageServiceList, _ := ngc.grpcClient.GetAllServicesInfo(vo.GetAllServiceInfoParam{\n        NameSpace: ngc.namespaceId,\n        PageNo:    pageNo,\n        PageSize:  pageSize,\n    })\n    services = append(services, pageServiceList.Doms...)\n\n    // 如果当前页数服务数满了, 继续查找添加下一页\n\tfor pageNo++; len(pageServiceList.Doms) >= int(pageSize); pageNo++ {\n        pageServiceList, _ = ngc.grpcClient.GetAllServicesInfo(vo.GetAllServiceInfoParam{\n            NameSpace: ngc.namespaceId,\n            PageNo:    pageNo,\n            PageSize:  pageSize,\n        })\n        services = append(services, pageServiceList.Doms...)\n    }\n    return services\n}\n```\n\n2. GetService:  对应v1版本的API(/v1/ns/api/srvIPXT)，输入服务名，通过gRPC请求获该服务的具体信息。\n```go\nfunc (ngc *NacosGrpcClient) GetService(serviceName string) model.Service {\n    service, _ := ngc.grpcClient.GetService(vo.GetServiceParam{\n        ServiceName: serviceName,\n    })\n    if service.Hosts == nil {\n        NacosClientLogger.Warn(\"empty result from server, dom:\" + serviceName)\n    }\n    return service\n}\n```\n\n3. Subscribe:  订阅Nacos服务端某个服务， 封装sdk中订阅服务的方法，输入服务名，通过gRPC连接完成对该服务的订阅来更新服务数据。\n```go\nfunc (ngc *NacosGrpcClient) Subscribe(serviceName string) error {\n    if ngc.HasSubcribed(serviceName) {\n        NacosClientLogger.Info(\"service \" + serviceName + \" already subsrcibed.\")\n        return nil\n    }\n    param := &vo.SubscribeParam{\n        ServiceName:       serviceName,\n        GroupName:         \"\",\n        SubscribeCallback: ngc.Callback,\n    }\n    if err := ngc.grpcClient.Subscribe(param); err != nil {\n        NacosClientLogger.Error(\"service subscribe error \" + serviceName)\n        return err\n    }\n\n    defer ngc.SubscribeMap.DLock.Unlock()\n    ngc.SubscribeMap.DLock.Lock()\n    ngc.SubscribeMap.Data[serviceName] = true\n\n    return nil\n}\n```\n\n4. Unsubsrcibe:  取消订阅Nacos服务端某个服务， 封装了sdk中取消订阅服务的方法。当服务下线时，通过gRPC连接来取消该服务的订阅。\n```go\nfunc (ngc *NacosGrpcClient) Unsubsrcibe(serviceName string) error {\n    if !ngc.HasSubcribed(serviceName) {\n        NacosClientLogger.Info(\"service \" + serviceName + \" already unsubsrcibed.\")\n        return nil\n    }\n    param := &vo.SubscribeParam{\n        ServiceName:       serviceName,\n        GroupName:         \"\",\n        SubscribeCallback: ngc.Callback,\n    }\n    if err := ngc.grpcClient.Unsubscribe(param); err != nil {\n        NacosClientLogger.Error(\"service unsubscribe error \" + serviceName)\n        return err\n    }\n\n    defer ngc.SubscribeMap.DLock.Unlock()\n    ngc.SubscribeMap.DLock.Lock()\n    ngc.SubscribeMap.Data[serviceName] = false\n\n    return nil\n}\n```\n\n5. Callback:  当Nacos服务端的订阅服务发生改变时，通过回调函数更新客户端的服务数据。\n```go\nfunc (ngc *NacosGrpcClient) Callback(instances []model.Instance, err error) {\n    //服务下线,更新实例数量为0\n    if len(instances) == 0 {\n        for serviceName, _ := range AllDoms.Data {\n            if service := ngc.GetService(serviceName); len(service.Hosts) == 0 {\n                ngc.nacosClient.GetDomainCache().Set(serviceName, service)\n                ngc.Unsubsrcibe(serviceName)\n            }\n        }\n        return\n    }\n    serviceName := strings.Split(instances[0].ServiceName, SEPERATOR)[1]\n    oldService, ok := ngc.nacosClient.GetDomainCache().Get(serviceName)\n    if !ok {\n        NacosClientLogger.Info(\"service not found in cache \" + serviceName)\n        service := ngc.GetService(serviceName)\n        ngc.nacosClient.GetDomainCache().Set(serviceName, service)\n    } else {\n        service := oldService.(model.Service)\n        service.Hosts = instances\n        service.LastRefTime = uint64(CurrentMillis())\n        ngc.nacosClient.GetDomainCache().Set(serviceName, service)\n    }\n    NacosClientLogger.Info(\"serviceName: \"+serviceName+\" was updated to: \", instances)\n}\n```\n\n6. HasSubcribed:  记录当前服务是否订阅，避免重复订阅。\n```go\nfunc (ngc *NacosGrpcClient) HasSubcribed(serviceName string) bool {\n    defer ngc.SubscribeMap.DLock.RUnlock()\n    ngc.SubscribeMap.DLock.RLock()\n    return ngc.SubscribeMap.Data[serviceName]\n}\n```\n#### 三、 替换原来插件的数据结构\n将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构\n将v1版本的数据结构 Domain替换为Service, 并更新 Instance 的结构。\n旧的定义：\n```go\ntype Domain struct {\n    Name          string `json:\"dom\"`\n    Clusters      string\n    CacheMillis   int64\n    LastRefMillis int64\n    Instances     []Instance `json:\"hosts\"`\n    Env           string\n    TTL           int\n}\n```\n```go\ntype Instance struct {\n    IP         string\n    Port       int\n    Weight     float64\n    Valid      bool\n    Unit       string\n    AppUseType string\n    Site       string\n}\n```\n新的替换：\n```go\ntype Service struct {\n    CacheMillis              uint64     `json:\"cacheMillis\"`\n    Hosts                    []Instance `json:\"hosts\"`\n    Checksum                 string     `json:\"checksum\"`\n    LastRefTime              uint64     `json:\"lastRefTime\"`\n    Clusters                 string     `json:\"clusters\"`\n    Name                     string     `json:\"name\"`\n    GroupName                string     `json:\"groupName\"`\n    Valid                    bool       `json:\"valid\"`\n    AllIPs                   bool       `json:\"allIPs\"`\n    ReachProtectionThreshold bool       `json:\"reachProtectionThreshold\"`\n}\n```\n```go\ntype Instance struct {\n    InstanceId                string            `json:\"instanceId\"`\n    Ip                        string            `json:\"ip\"`\n    Port                      uint64            `json:\"port\"`\n    Weight                    float64           `json:\"weight\"`\n    Healthy                   bool              `json:\"healthy\"`\n    Enable                    bool              `json:\"enabled\"`\n    Ephemeral                 bool              `json:\"ephemeral\"`\n    ClusterName               string            `json:\"clusterName\"`\n    ServiceName               string            `json:\"serviceName\"`\n    Metadata                  map[string]string `json:\"metadata\"`\n    InstanceHeartBeatInterval int               `json:\"instanceHeartBeatInterval\"`\n    IpDeleteTimeout           int               `json:\"ipDeleteTimeout\"`\n    InstanceHeartBeatTimeOut  int               `json:\"instanceHeartBeatTimeOut\"`\n}\n```\n### 时间规划\n\n- [x] 7.01 - 7.14  复用Nacos-Sdk-Go，构建一个简易的Nacos-go客户端与Nacos服务器实现gRPC的通信方式，来熟悉Nacos的go开发，改进设计文档。  \n- [x] 7.15 - 7.31  借助前面的开发文档和经验，尝试在Nacos-CoreDNS-plugin中添加 grpc客户端模块，建立与 Nacos服务端的gRPC通信。\n- [x] 8.01 - 8.14  对 Nacos-CoreDNS 插件与Nacos服务端的连接进行细节的优化，保证连接的稳定性。\n- [x] 8.15 - 8.30  编写单元测试，对新的连接进行性能测试，主要是对比同一个接口在gRPC连接和短连接两种模式下的响应时间和吞吐量进行压力测试。  \n- [x] 9.01 - 9.14  编写新Nacos CoreDNS模块的使用示例和文档。  \n- [x] 9.15 - 9.30  对整个项目进行梳理，提交PR，编写项目终期报告。\n## 项目总结\n### 遇到的问题及解决方案：\n#### 1. nacos旧版本升级到新版本后，原来的API被移除了。\n原来的 Nacos-CoreDNS-Plugin 插件是通过HTTP短连接方式调用Nacos服务端的 API 来请求获取nacos服务端的资源信息。 而在nacos版本v2.x后，原来v1.x版本的API已经被移除，替换成了建立gRPC连接的方式通过gRPC请求来访问获取nacos服务端的资源信息。 因此，可以参考Nacos-go-sdk提供的与Nacos服务器的通信方法，在Nacos-coredns-plugin内导入Nacos-sdk-go相关功能，封装成新的grpc通信模块，实现nacos-coredns插件与nacos服务器的通信。\n####  2. 数据缓存问题\n原来coredns插件的服务数据是缓存在 /root/nacos-go-client-cache/ 目录中，且每次更新数据都会将数据写入到文件中，造成的io资源消耗较大。\n而nacos-sdk-go中自带了对服务的缓存默认是在 /tmp/nacos/cache/ 目录中，这些缓存的数据都是在插件启动的时候加载的，两者的功能产生了重叠。因此，将原来的nacos-coredns-plugin的缓存功能移除，让nacos-sdk-go管理服务数据的缓存。 \n#### 3. 数据更新问题\n目前nacos-coredns-plugin数据的更新是通过两个goruntime定时向服务器请求来更新数据, 当服务数据频繁变化时，无法及时更新客户端的数据。\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1658123188046-9eba3156-f960-415f-bd84-68a586dbc189.png#crop=0&crop=0&crop=1&crop=1&id=GKReH&originHeight=711&originWidth=841&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\nnacos-sdk-go中提供了Subscribe服务订阅的功能。对某个服务进行订阅后，服务的实例发生改变时会调用客户端定义的回调函数callback。因此，将数据更新的流程调整为：定时从服务器获取所有服务名, 当某个服务接受到DNS请求时，对此服务进行订阅。 当Nacos服务端的订阅服务发生改变时，通过回调函数更新客户端的服务数据。 \n####  4. 编译问题\ncoredns v1.6.7 与 nacos-sdk-go/v2 的grpc版本不兼容， 编译时会产生报错。\n将 nacos-coredns-plugin 原来的 coredns v1.6.7 版本更新到最新的v1.9.3版本，解决原来coredns与nacos-sdk-go的 gRPC版本冲突问题。 \n\n### 项目测试：\n#### 测试用例\n在原来的v1.6.7分支上，修改2个测试用例，新增5个测试用例\n\n1. 测试用例一：TestNacosClient_getAllServiceNames\n● 预期结果：获取Nacos服务端里注册的所有服务名并存入AllDoms\n● 实际结果：成功获取Nacos服务端里注册的所有服务名并存入AllDoms\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235900753-b4c1b719-bd97-484d-85c3-7b4cc2857858.png#crop=0&crop=0&crop=1&crop=1&id=o7c3j&originHeight=100&originWidth=800&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n2. 测试用例二：TestNacosClient_getDomNow\n● 预期结果：获取Nacos服务端里某个服务的具体信息并存入缓存中\n● 实际结果：成功获取Nacos服务端里某个服务的具体信息并存入缓存中\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235907742-ff276893-12f7-422d-b68b-11de9009295f.png#crop=0&crop=0&crop=1&crop=1&id=SWIpv&originHeight=105&originWidth=799&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n3. 测试用例三：TestGetAllServicesInfo\n● 预期结果：gRPC请求获取Nacos服务端里注册的所有服务名\n● 实际结果：成功通过gRPC请求获取Nacos服务端里注册的所有服务名\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235912610-bb19fa61-93a4-4e7e-a426-883ec6ac702d.png#crop=0&crop=0&crop=1&crop=1&id=IZjR3&originHeight=101&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n4. 测试用例四：TestGetService\n● 预期结果：gRPC请求获取Nacos服务端某个服务的具体信息\n● 实际结果：成功通过gRPC请求获取Nacos服务端某个服务的具体信息\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235917042-499d4924-c2b3-4f08-9cc3-7f7439904553.png#crop=0&crop=0&crop=1&crop=1&id=MH0ma&originHeight=95&originWidth=799&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n5. 测试用例五：TestSubscribe\n● 预期结果：gRPC订阅Nacos服务端某个服务\n● 实际结果：成功通过gRPC订阅Nacos服务端某个服务\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235925262-741dbe46-6a47-47dc-afbc-83f08403853b.png#crop=0&crop=0&crop=1&crop=1&id=dGoe9&originHeight=88&originWidth=800&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n6. 测试用例六：TestCallback\n● 预期结果：当Nacos服务端服务发生改变时，通过回调函数更新客户端的服务数据\n● 实际结果：当Nacos服务端服务发生改变时，成功通过回调函数更新客户端的服务数据\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235933413-c05baf72-43a3-4a0d-8f99-a817cd6cc6f9.png#crop=0&crop=0&crop=1&crop=1&id=ApssP&originHeight=97&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n7. 测试用例七：TestNacosParse\n● 预期结果：通过配置文件配置Nacos服务器的 NamespaceId 和 ip地址和端口 .\n● 实际结果：成功配置Nacos服务器的 NamespaceId 和 ip地址和端口 .\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235941664-68c7fca4-c643-4b0a-bacc-b6bee6f0f2db.png#crop=0&crop=0&crop=1&crop=1&id=mwKYF&originHeight=163&originWidth=828&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n**所有测试用例运行结果**\n```\n=== RUN   TestDnsCache_Updated\n    dns_cache_test.go:26: Out of date test is passed\n    dns_cache_test.go:32: Updated is passed.\n--- PASS: TestDnsCache_Updated (0.00s)\n=== RUN   TestGet\n    httpclient_test.go:40: Success to test http client get\n--- PASS: TestGet (0.00s)\n=== RUN   TestNacosClient_GetDomain\n--- PASS: TestNacosClient_GetDomain (0.00s)\n=== RUN   TestNacosClient_getAllServiceNames\n    nacos_client_test.go:75: Get all serviceName from servers passed\n--- PASS: TestNacosClient_getAllServiceNames (0.05s)\n=== RUN   TestNacosClient_getServiceNow\n    nacos_client_test.go:100: Get all servicesInfo from servers passed\n--- PASS: TestNacosClient_getServiceNow (2.80s)\n=== RUN   TestDomain_SrvInstances\n    nacos_domain_test.go:30: Domain.srvInstances weight passed.\n    nacos_domain_test.go:37: Domain.srvInstances valid passed.\n--- PASS: TestDomain_SrvInstances (0.00s)\n=== RUN   TestGetAllServicesInfo\n    nacos_grpc_client_test.go:23: GrpcClient get all servicesInfo passed\n--- PASS: TestGetAllServicesInfo (0.03s)\n=== RUN   TestGetService\n    nacos_grpc_client_test.go:39: GrpcClient get service passed\n--- PASS: TestGetService (0.03s)\n=== RUN   TestSubscribe\n    nacos_grpc_client_test.go:54: GrpcClient subscribe service passed\n--- PASS: TestSubscribe (0.03s)\n=== RUN   TestCallback\n    nacos_grpc_client_test.go:181: GrpcClient Service SubscribeCallback passed\n--- PASS: TestCallback (0.00s)\n=== RUN   TestServerManager_NextServer\n    server_manager_test.go:29: ServerManager.NextServer test is passed.\n--- PASS: TestServerManager_NextServer (0.00s)\n=== RUN   TestServerManager_RefreshServerListIfNeed\n    server_manager_test.go:39: ServerManager.RefreshServerListIfNeed test is passed.\n--- PASS: TestServerManager_RefreshServerListIfNeed (0.00s)\n=== RUN   TestNacosParse\ninit nacos plugin...\ninit nacos client.\n    setup_test.go:54: Passed\n--- PASS: TestNacosParse (1.18s)\n=== RUN   TestUDPServer_StartServer\n    udp_server_test.go:43: Udp server test passed.\n--- PASS: TestUDPServer_StartServer (0.02s)\n=== RUN   TestTryDecompressData\n    util_and_comms_test.go:32: Gzip test is passed.\n--- PASS: TestTryDecompressData (0.00s)\nPASS\nok  \tnacos-coredns-plugin/nacos\t4.624s\n```\n\n#### 压力测试\n\n1.  测试机器配置\n腾讯云轻量应用服务器：CPU2核 内存2G 带宽4M。一般而言，CoreDNS比较吃网卡和CPU，对于硬盘IO的要求并不算特别高（主要取决于写日志的量），对内存占用较低。 \n2.  测试工具\n本次测试使用bind9出品的一款DNS服务器性能测试的工具queryperf，对DNS服务器进行压测，并对DNS服务器性能进行评估。 \n3.  测试方法\n使用 queryperf 来对 Coredns-Nacos-Plugin 进行DNS请求，解析在Nacos服务端注册的服务域名。\n● 本次测试使用的Nacos服务端注册了1000个服务, 共10000个服务实例。 \n\n**v1 版本：Nacos v1.x + Coredns v1.6.7**\n● 50000条DNS请求： 三次测试， 平均qps为 209\n```\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n  \n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n  \n  RTT max:         \t0.428648 sec\n  RTT min:              0.000030 sec\n  RTT average:          0.011961 sec\n  RTT std deviation:    0.016171 sec\n  RTT out of range:     0 queries\n  \n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n  \n  Started at:           Thu Sep 22 15:49:44 2022\n  Finished at:          Thu Sep 22 15:53:53 2022\n  Ran for:              249.121087 seconds\n  \n  Queries per second:   200.705611 qps\n```\n```\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n  \n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n  \n  RTT max:         \t0.485871 sec\n  RTT min:              0.000357 sec\n  RTT average:          0.011313 sec\n  RTT std deviation:    0.012731 sec\n  RTT out of range:     0 queries\n  \n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n  \n  Started at:           Thu Sep 22 16:24:04 2022\n  Finished at:          Thu Sep 22 16:28:10 2022\n  Ran for:              245.988585 seconds\n  \n  Queries per second:   203.261464 qps\n```\n```\n[Status] Testing complete\n\nStatistics:\n  \n  Parse input file:     once\n  Ended due to:         reaching end of file\n  \n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n  \n  RTT max:         \t0.082733 sec\n  RTT min:              0.000019 sec\n  RTT average:          0.006520 sec\n  RTT std deviation:    0.001705 sec\n  RTT out of range:     0 queries\n  \n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n  \n  Started at:           Wed Sep 22 20:43:30 2022\n  Finished at:          Wed Sep 22 20:47:12 2022\n  Ran for:              222.443603 seconds\n  \n  Queries per second:   224.776075 qps\n```\n\n\n**v2版本： Nacos2.1.1 + Coredns 1.9.3**\n50000条DNS请求，三次测试平均qps为：467\n```\n[Status] Testing complete\n\nStatistics:\n  \n  Parse input file:     once\n  Ended due to:         reaching end of file\n  \n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n  \n  RTT max:         \t0.048039 sec\n  RTT min:              0.004723 sec\n  RTT average:          0.006745 sec\n  RTT std deviation:    0.001731 sec\n  RTT out of range:     0 queries\n  \n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n  \n  Started at:           Thu Sep 22 14:48:29 2022\n  Finished at:          Thu Sep 22 14:50:17 2022\n  Ran for:              107.771145 seconds\n  \n  Queries per second:   463.946078 qps\n```\n```\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:         \t0.041432 sec\n  RTT min:              0.003126 sec\n  RTT average:          0.005235 sec\n  RTT std deviation:    0.001552 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Thu Sep 22 14:52:01 2022\n  Finished at:          Thu Sep 22 14:53:49 2022\n  Ran for:              107.977801 seconds\n\n  Queries per second:   463.058143 qps\n```\n```\n[Status] Testing complete\n\nStatistics:\n  \n  Parse input file:     once\n  Ended due to:         reaching end of file\n  \n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n  \n  RTT max:         \t0.039539 sec\n  RTT min:              0.000980 sec\n  RTT average:          0.005502 sec\n  RTT std deviation:    0.001641 sec\n  RTT out of range:     0 queries\n  \n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n  \n  Started at:           Thu Sep 22 15:01:28 2022\n  Finished at:          Thu Sep 22 15:03:13 2022\n  Ran for:              104.918484 seconds\n  \n  Queries per second:   476.560450 qps\n```\n#### 测试总结：\n经过以上的单元测试和压力测试，新版本的nacos-coredns-plugin插件，在新增的与nacos服务端建立gRPC长连接的功能支持下，插件表现稳定，且DNS请求的 qps 从 209 提升到 467， 得到了接近 223% 的性能增长。\n### 项目完成质量：\n**1． 技术方案评价**\n本次项目致力于让Nacos-CoreDNS模块支持以gRPC长连接方式访问Nacos服务端，具有一定的难度。但是在经过导师指导和讨论后，逐步完成了方案的优化，使得方案的设计更有可靠性和完善性。由于前期技术方案进行了比较严格的分析和策划，所以相对后期的实现而言，改动较少，提高了开发效率；\n**2．项目质量评价**\n经过比较严密的稳定性测试和压力测试，整个插件表现稳定，可以很好的完成题目给的需求。本项目模块化独立开发，与其他模块耦合度小，较为容易进行维护。此插件使用golang语言编写，具有良好的跨平台可移植性。此外，开发进度也能够按照前期的时间规划进行，按时提交了项目产出。\n### 与导师沟通及反馈情况：\n由于对这个项目比较感兴趣，所以在项目公布早期就与导师进行了沟通联系。在与导师沟通的过程中，得到了许多有用的反馈，帮助我了解了整个项目的详情细节。同时导师也给我了许多建议来对方案进行优化改进。可以说，整个过程中，与指导老师的沟通情况非常的默契。当我遇到困难和问题的时候，指导老师可以主动地为我解决问题，而且还会为我提出更好的建议。我所提出合理的意见，老师也会采取。\n\n### 我的收获\n虽然此次项目时间只有三个月，在这期间不一定会让一个人有着翻天覆地的变化，但变化就是这样一点一点产生的，同时也感觉有很大的收获，也帮助找出了自己的不足和需要改进的地方。在遇到问题虚心请教后，从导师的身上能学到自己没有的东西，每一次都会使我更接近成功。还有学会了在开发中与人的合作与交流。\n在这个项目之前，我对待开发方案和文档这些东西会不太注重，写得比较粗略。但是通过这个项目，我体会到有效详细的方案设计和开发文档，可以很大的提高开发效率，保证项目的可行性和可维护性。\n代码风格要规范，之前写代码，我都是不怎么去注意代码风格和写代码的规范，都是稍微想一下就直接开始写代码了。注释也很少用，总感觉我们自己写的代码，我们怎么会不知道它做了些什么事呢 ？总觉得我们自己写的代码我们怎么会不知道它是用来做什么的呢。但通过这次项目，我体会到保持规范统一的代码风格的重要性，可以保证代码的可读性，让别人更容易理解自己写的代码。\n我也借助到这个机会，可以参与开源项目中，积累了相关经验、学习到新的知识。为日后继续参与更多开源项目提供一个经验借鉴。此外我对Nacos非常感兴趣，希望项目结束后也能在Nacos其他方面做一点点贡献。  \n","source":"_posts/project-report.md","raw":"---\ntitle: 项目报告\ndate: 2022-09-09 19:47:43\ncategories: \n - ospp\n---\n\n\n[Nacos-CoreDNS模块支持以长连接访问Nacos服务端](https://summer-ospp.ac.cn/#/org/prodetail/22ab10318)\n## 项目信息\n### 项目名称：Nacos-CoreDNS模块支持以长连接访问Nacos服务端\n### 项目产出：\n\n- [x]  1. 设计出Nacos CoreDNS模块支持gRPC的方案，输出详细设计文档； \n- [x]  2. 根据设计文档，对Nacos CoreDNS模块进行开发；\n- [x]  3. 提供新Nacos CoreDNS模块的使用示例和文档。 \n### 方案描述：\n当前 Nacos-CoreDNS-Plugin 插件是通过HTTP短连接方式调用Nacos服务端的 API 来请求获取nacos服务端的资源信息。 而在nacos版本v2.x后，原来v1.x版本的API已经被移除，替换成了建立gRPC连接的方式通过gRPC请求来访问获取nacos服务端的资源信息。\n因此本项目的方案可以参考Nacos-go-sdk与Nacos服务器的通信方式，在Nacos-coredns-plugin内导入Nacos-sdk-go相关功能，封装成新的grpc通信模块，实现nacos-coredns插件与nacos服务器的通信。\n例如，通过nacos-go-sdk来调用GetAllServicesInfo、GetService等方法，就能获取所有服务或某个具体服务的信息（ip、port...），这些数据可以覆盖nacos v1版本api传输的数据，因此只需要对从nacos服务端获取的数据转成对应coredns插件需要的数据结构即可。\n#### 核心方法\n\n1.  构建客户端：通过在coredns插件中导入nacos-go-sdk/v2包，搭建一个nacos-coredns插件和nacos服务通信的客户端 \n2.  根据插件的资源需求，封装sdk方法， 完成通信中的数据交换：\n   - GetAllServicesInfo: 请求获取Nacos服务端里注册的所有服务名\n   - GetService:  请求获取Nacos服务端某个服务的具体信息\n   - Subscribe:   订阅Nacos服务端某个服务\n   - Unsubsrcibe: 取消订阅Nacos服务端某个服务\n   - Callback:    当Nacos服务端的订阅服务发生改变时，通过回调函数更新客户端的服务数据\n   - HasSubcribed: 记录当前服务是否订阅，避免重复订阅\n3.  替换原来插件的数据结构：原来的nacos-coredns插件的数据结构与新版nacos服务端gRPC请求返回的数据结构冲突不兼容，需要放弃原来的数据结构，更新为新版的数据结构。\n\n**grpc客户端的类设计图**\n![NacosGrpcClient.drawio.png](https://cdn.nlark.com/yuque/0/2022/png/29425667/1664196977944-f4258097-3823-4984-8814-4cae3ed8cdb1.png#clientId=u4ceca8f8-239f-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=ui&id=n1TAW&name=NacosGrpcClient.drawio.png&originHeight=277&originWidth=922&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26579&status=error&style=none&taskId=uc9eeb30f-459a-4007-af54-8999825ae82&title=)\n#### grpc通信流程设计\n![grpc-design.png](https://cdn.nlark.com/yuque/0/2022/png/29425667/1664196982731-98f47454-b143-4968-a2e8-223d287d106e.png#clientId=u4ceca8f8-239f-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=ui&id=ua814f7c3&name=grpc-design.png&originHeight=373&originWidth=1053&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42662&status=error&style=none&taskId=ubb61ba78-774d-4f31-b5f6-4763e61ae42&title=)\n1、启动nacos-coredns插件时，同时启动插件与nacos服务器的grpc通信客户端（nacos_grpc_client）。\n2、grpc通信客户端调用了Nacos-go-sdk/v2中实现的方法，从nacos服务器集群中获取一个服务器的IP地址和端口并建立TCP连接。HTTP/2下，同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应。\n3、nacos-coredns插件向Nacos服务器请求资源时，通过grpc通信客户端来调用nacos-go-sdk/v2封装的GetAllServicesInfo、GetService等方法来获取所有服务或某个具体服务的信息详情（ip、port...）。\n4、grpc通信客户端将从nacos服务器里获取到的数据存入nacos-coredns插件的数据缓存中，待插件处理DNS请求时输出数据。\n5、对grpc通信客户端设置 超时时间 与 重试次数 等措施来避免调用超时、 阻塞等情况。\n\n### 方案具体实现：\n#### 一、 构建客户端\n在 Nacos-CoreDNS-Plugin 插件中导入nacos-go-sdk/v2包， 来与要访问的nacos服务端集群建立gRPC连接。\n与nacos服务端建立gRPC需要两个参数  **clientConfig** 和  **serverConfig**. \n\n- clientConfig 是针对本项目作为向服务端请求资源的客户端 来配置 对nacos服务端的 NamespaceId 请求超时TimeoutMs 日志目录LogDir 数据缓存目录CacheDir\n```go\nnacosGrpcClient.clientConfig = *constant.NewClientConfig(\n        constant.WithNamespaceId(namespaceId),\n        constant.WithTimeoutMs(5000),\n        constant.WithLogDir(LogPath),\n        constant.WithCacheDir(CachePath),\n        constant.WithNotLoadCacheAtStart(true),\n        constant.WithUpdateCacheWhenEmpty(true),\n        constant.WithLogLevel(\"debug\"),\n)\n```\n\n- serverConfig 指定服务端集群的Ip地址和端口\n```go\nserverConfigs := make([]constant.ServerConfig, len(serverHosts))\nfor i, serverHost := range serverHosts {\n        serverIp := strings.Split(serverHost, \":\")[0]\n        serverPort, err := strconv.Atoi(strings.Split(serverHost, \":\")[1])\n        if err != nil {\n            NacosClientLogger.Error(\"nacos server host config error!\", err)\n        }\n        serverConfigs[i] = *constant.NewServerConfig(\n            serverIp,\n            uint64(serverPort),\n            constant.WithScheme(\"http\"),\n            constant.WithContextPath(\"/nacos\"),\n        )\n\n    }\nnacosGrpcClient.serverConfigs = serverConfigs\n```\n\n- 配置完成后， 连接建立， 通过此客户端来进行通信\n```go\nnacosGrpcClient.grpcClient, err = clients.NewNamingClient(\n    vo.NacosClientParam{\n        ClientConfig:  &nacosGrpcClient.clientConfig,\n        ServerConfigs: nacosGrpcClient.serverConfigs,\n    },\n)\n```\n#### 二、 客户端的主要功能\n#### 根据插件的资源需求，封装sdk方法， 完成通信中的数据交换。\n\n1. GetAllServicesInfo:  对应v1版本的API(/v1/ns/api/allDomNames)，通过封装sdk的方法，获取在nacos里注册的所有服务名。\t\t\t \n```go\nfunc (ngc *NacosGrpcClient) GetAllServicesInfo() []string {\n    var pageNo = uint32(1)\n    var pageSize = uint32(100)\n    var services []string\n\n    pageServiceList, _ := ngc.grpcClient.GetAllServicesInfo(vo.GetAllServiceInfoParam{\n        NameSpace: ngc.namespaceId,\n        PageNo:    pageNo,\n        PageSize:  pageSize,\n    })\n    services = append(services, pageServiceList.Doms...)\n\n    // 如果当前页数服务数满了, 继续查找添加下一页\n\tfor pageNo++; len(pageServiceList.Doms) >= int(pageSize); pageNo++ {\n        pageServiceList, _ = ngc.grpcClient.GetAllServicesInfo(vo.GetAllServiceInfoParam{\n            NameSpace: ngc.namespaceId,\n            PageNo:    pageNo,\n            PageSize:  pageSize,\n        })\n        services = append(services, pageServiceList.Doms...)\n    }\n    return services\n}\n```\n\n2. GetService:  对应v1版本的API(/v1/ns/api/srvIPXT)，输入服务名，通过gRPC请求获该服务的具体信息。\n```go\nfunc (ngc *NacosGrpcClient) GetService(serviceName string) model.Service {\n    service, _ := ngc.grpcClient.GetService(vo.GetServiceParam{\n        ServiceName: serviceName,\n    })\n    if service.Hosts == nil {\n        NacosClientLogger.Warn(\"empty result from server, dom:\" + serviceName)\n    }\n    return service\n}\n```\n\n3. Subscribe:  订阅Nacos服务端某个服务， 封装sdk中订阅服务的方法，输入服务名，通过gRPC连接完成对该服务的订阅来更新服务数据。\n```go\nfunc (ngc *NacosGrpcClient) Subscribe(serviceName string) error {\n    if ngc.HasSubcribed(serviceName) {\n        NacosClientLogger.Info(\"service \" + serviceName + \" already subsrcibed.\")\n        return nil\n    }\n    param := &vo.SubscribeParam{\n        ServiceName:       serviceName,\n        GroupName:         \"\",\n        SubscribeCallback: ngc.Callback,\n    }\n    if err := ngc.grpcClient.Subscribe(param); err != nil {\n        NacosClientLogger.Error(\"service subscribe error \" + serviceName)\n        return err\n    }\n\n    defer ngc.SubscribeMap.DLock.Unlock()\n    ngc.SubscribeMap.DLock.Lock()\n    ngc.SubscribeMap.Data[serviceName] = true\n\n    return nil\n}\n```\n\n4. Unsubsrcibe:  取消订阅Nacos服务端某个服务， 封装了sdk中取消订阅服务的方法。当服务下线时，通过gRPC连接来取消该服务的订阅。\n```go\nfunc (ngc *NacosGrpcClient) Unsubsrcibe(serviceName string) error {\n    if !ngc.HasSubcribed(serviceName) {\n        NacosClientLogger.Info(\"service \" + serviceName + \" already unsubsrcibed.\")\n        return nil\n    }\n    param := &vo.SubscribeParam{\n        ServiceName:       serviceName,\n        GroupName:         \"\",\n        SubscribeCallback: ngc.Callback,\n    }\n    if err := ngc.grpcClient.Unsubscribe(param); err != nil {\n        NacosClientLogger.Error(\"service unsubscribe error \" + serviceName)\n        return err\n    }\n\n    defer ngc.SubscribeMap.DLock.Unlock()\n    ngc.SubscribeMap.DLock.Lock()\n    ngc.SubscribeMap.Data[serviceName] = false\n\n    return nil\n}\n```\n\n5. Callback:  当Nacos服务端的订阅服务发生改变时，通过回调函数更新客户端的服务数据。\n```go\nfunc (ngc *NacosGrpcClient) Callback(instances []model.Instance, err error) {\n    //服务下线,更新实例数量为0\n    if len(instances) == 0 {\n        for serviceName, _ := range AllDoms.Data {\n            if service := ngc.GetService(serviceName); len(service.Hosts) == 0 {\n                ngc.nacosClient.GetDomainCache().Set(serviceName, service)\n                ngc.Unsubsrcibe(serviceName)\n            }\n        }\n        return\n    }\n    serviceName := strings.Split(instances[0].ServiceName, SEPERATOR)[1]\n    oldService, ok := ngc.nacosClient.GetDomainCache().Get(serviceName)\n    if !ok {\n        NacosClientLogger.Info(\"service not found in cache \" + serviceName)\n        service := ngc.GetService(serviceName)\n        ngc.nacosClient.GetDomainCache().Set(serviceName, service)\n    } else {\n        service := oldService.(model.Service)\n        service.Hosts = instances\n        service.LastRefTime = uint64(CurrentMillis())\n        ngc.nacosClient.GetDomainCache().Set(serviceName, service)\n    }\n    NacosClientLogger.Info(\"serviceName: \"+serviceName+\" was updated to: \", instances)\n}\n```\n\n6. HasSubcribed:  记录当前服务是否订阅，避免重复订阅。\n```go\nfunc (ngc *NacosGrpcClient) HasSubcribed(serviceName string) bool {\n    defer ngc.SubscribeMap.DLock.RUnlock()\n    ngc.SubscribeMap.DLock.RLock()\n    return ngc.SubscribeMap.Data[serviceName]\n}\n```\n#### 三、 替换原来插件的数据结构\n将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构\n将v1版本的数据结构 Domain替换为Service, 并更新 Instance 的结构。\n旧的定义：\n```go\ntype Domain struct {\n    Name          string `json:\"dom\"`\n    Clusters      string\n    CacheMillis   int64\n    LastRefMillis int64\n    Instances     []Instance `json:\"hosts\"`\n    Env           string\n    TTL           int\n}\n```\n```go\ntype Instance struct {\n    IP         string\n    Port       int\n    Weight     float64\n    Valid      bool\n    Unit       string\n    AppUseType string\n    Site       string\n}\n```\n新的替换：\n```go\ntype Service struct {\n    CacheMillis              uint64     `json:\"cacheMillis\"`\n    Hosts                    []Instance `json:\"hosts\"`\n    Checksum                 string     `json:\"checksum\"`\n    LastRefTime              uint64     `json:\"lastRefTime\"`\n    Clusters                 string     `json:\"clusters\"`\n    Name                     string     `json:\"name\"`\n    GroupName                string     `json:\"groupName\"`\n    Valid                    bool       `json:\"valid\"`\n    AllIPs                   bool       `json:\"allIPs\"`\n    ReachProtectionThreshold bool       `json:\"reachProtectionThreshold\"`\n}\n```\n```go\ntype Instance struct {\n    InstanceId                string            `json:\"instanceId\"`\n    Ip                        string            `json:\"ip\"`\n    Port                      uint64            `json:\"port\"`\n    Weight                    float64           `json:\"weight\"`\n    Healthy                   bool              `json:\"healthy\"`\n    Enable                    bool              `json:\"enabled\"`\n    Ephemeral                 bool              `json:\"ephemeral\"`\n    ClusterName               string            `json:\"clusterName\"`\n    ServiceName               string            `json:\"serviceName\"`\n    Metadata                  map[string]string `json:\"metadata\"`\n    InstanceHeartBeatInterval int               `json:\"instanceHeartBeatInterval\"`\n    IpDeleteTimeout           int               `json:\"ipDeleteTimeout\"`\n    InstanceHeartBeatTimeOut  int               `json:\"instanceHeartBeatTimeOut\"`\n}\n```\n### 时间规划\n\n- [x] 7.01 - 7.14  复用Nacos-Sdk-Go，构建一个简易的Nacos-go客户端与Nacos服务器实现gRPC的通信方式，来熟悉Nacos的go开发，改进设计文档。  \n- [x] 7.15 - 7.31  借助前面的开发文档和经验，尝试在Nacos-CoreDNS-plugin中添加 grpc客户端模块，建立与 Nacos服务端的gRPC通信。\n- [x] 8.01 - 8.14  对 Nacos-CoreDNS 插件与Nacos服务端的连接进行细节的优化，保证连接的稳定性。\n- [x] 8.15 - 8.30  编写单元测试，对新的连接进行性能测试，主要是对比同一个接口在gRPC连接和短连接两种模式下的响应时间和吞吐量进行压力测试。  \n- [x] 9.01 - 9.14  编写新Nacos CoreDNS模块的使用示例和文档。  \n- [x] 9.15 - 9.30  对整个项目进行梳理，提交PR，编写项目终期报告。\n## 项目总结\n### 遇到的问题及解决方案：\n#### 1. nacos旧版本升级到新版本后，原来的API被移除了。\n原来的 Nacos-CoreDNS-Plugin 插件是通过HTTP短连接方式调用Nacos服务端的 API 来请求获取nacos服务端的资源信息。 而在nacos版本v2.x后，原来v1.x版本的API已经被移除，替换成了建立gRPC连接的方式通过gRPC请求来访问获取nacos服务端的资源信息。 因此，可以参考Nacos-go-sdk提供的与Nacos服务器的通信方法，在Nacos-coredns-plugin内导入Nacos-sdk-go相关功能，封装成新的grpc通信模块，实现nacos-coredns插件与nacos服务器的通信。\n####  2. 数据缓存问题\n原来coredns插件的服务数据是缓存在 /root/nacos-go-client-cache/ 目录中，且每次更新数据都会将数据写入到文件中，造成的io资源消耗较大。\n而nacos-sdk-go中自带了对服务的缓存默认是在 /tmp/nacos/cache/ 目录中，这些缓存的数据都是在插件启动的时候加载的，两者的功能产生了重叠。因此，将原来的nacos-coredns-plugin的缓存功能移除，让nacos-sdk-go管理服务数据的缓存。 \n#### 3. 数据更新问题\n目前nacos-coredns-plugin数据的更新是通过两个goruntime定时向服务器请求来更新数据, 当服务数据频繁变化时，无法及时更新客户端的数据。\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1658123188046-9eba3156-f960-415f-bd84-68a586dbc189.png#crop=0&crop=0&crop=1&crop=1&id=GKReH&originHeight=711&originWidth=841&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\nnacos-sdk-go中提供了Subscribe服务订阅的功能。对某个服务进行订阅后，服务的实例发生改变时会调用客户端定义的回调函数callback。因此，将数据更新的流程调整为：定时从服务器获取所有服务名, 当某个服务接受到DNS请求时，对此服务进行订阅。 当Nacos服务端的订阅服务发生改变时，通过回调函数更新客户端的服务数据。 \n####  4. 编译问题\ncoredns v1.6.7 与 nacos-sdk-go/v2 的grpc版本不兼容， 编译时会产生报错。\n将 nacos-coredns-plugin 原来的 coredns v1.6.7 版本更新到最新的v1.9.3版本，解决原来coredns与nacos-sdk-go的 gRPC版本冲突问题。 \n\n### 项目测试：\n#### 测试用例\n在原来的v1.6.7分支上，修改2个测试用例，新增5个测试用例\n\n1. 测试用例一：TestNacosClient_getAllServiceNames\n● 预期结果：获取Nacos服务端里注册的所有服务名并存入AllDoms\n● 实际结果：成功获取Nacos服务端里注册的所有服务名并存入AllDoms\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235900753-b4c1b719-bd97-484d-85c3-7b4cc2857858.png#crop=0&crop=0&crop=1&crop=1&id=o7c3j&originHeight=100&originWidth=800&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n2. 测试用例二：TestNacosClient_getDomNow\n● 预期结果：获取Nacos服务端里某个服务的具体信息并存入缓存中\n● 实际结果：成功获取Nacos服务端里某个服务的具体信息并存入缓存中\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235907742-ff276893-12f7-422d-b68b-11de9009295f.png#crop=0&crop=0&crop=1&crop=1&id=SWIpv&originHeight=105&originWidth=799&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n3. 测试用例三：TestGetAllServicesInfo\n● 预期结果：gRPC请求获取Nacos服务端里注册的所有服务名\n● 实际结果：成功通过gRPC请求获取Nacos服务端里注册的所有服务名\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235912610-bb19fa61-93a4-4e7e-a426-883ec6ac702d.png#crop=0&crop=0&crop=1&crop=1&id=IZjR3&originHeight=101&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n4. 测试用例四：TestGetService\n● 预期结果：gRPC请求获取Nacos服务端某个服务的具体信息\n● 实际结果：成功通过gRPC请求获取Nacos服务端某个服务的具体信息\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235917042-499d4924-c2b3-4f08-9cc3-7f7439904553.png#crop=0&crop=0&crop=1&crop=1&id=MH0ma&originHeight=95&originWidth=799&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n5. 测试用例五：TestSubscribe\n● 预期结果：gRPC订阅Nacos服务端某个服务\n● 实际结果：成功通过gRPC订阅Nacos服务端某个服务\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235925262-741dbe46-6a47-47dc-afbc-83f08403853b.png#crop=0&crop=0&crop=1&crop=1&id=dGoe9&originHeight=88&originWidth=800&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n6. 测试用例六：TestCallback\n● 预期结果：当Nacos服务端服务发生改变时，通过回调函数更新客户端的服务数据\n● 实际结果：当Nacos服务端服务发生改变时，成功通过回调函数更新客户端的服务数据\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235933413-c05baf72-43a3-4a0d-8f99-a817cd6cc6f9.png#crop=0&crop=0&crop=1&crop=1&id=ApssP&originHeight=97&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n7. 测试用例七：TestNacosParse\n● 预期结果：通过配置文件配置Nacos服务器的 NamespaceId 和 ip地址和端口 .\n● 实际结果：成功配置Nacos服务器的 NamespaceId 和 ip地址和端口 .\n![](https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235941664-68c7fca4-c643-4b0a-bacc-b6bee6f0f2db.png#crop=0&crop=0&crop=1&crop=1&id=mwKYF&originHeight=163&originWidth=828&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n**所有测试用例运行结果**\n```\n=== RUN   TestDnsCache_Updated\n    dns_cache_test.go:26: Out of date test is passed\n    dns_cache_test.go:32: Updated is passed.\n--- PASS: TestDnsCache_Updated (0.00s)\n=== RUN   TestGet\n    httpclient_test.go:40: Success to test http client get\n--- PASS: TestGet (0.00s)\n=== RUN   TestNacosClient_GetDomain\n--- PASS: TestNacosClient_GetDomain (0.00s)\n=== RUN   TestNacosClient_getAllServiceNames\n    nacos_client_test.go:75: Get all serviceName from servers passed\n--- PASS: TestNacosClient_getAllServiceNames (0.05s)\n=== RUN   TestNacosClient_getServiceNow\n    nacos_client_test.go:100: Get all servicesInfo from servers passed\n--- PASS: TestNacosClient_getServiceNow (2.80s)\n=== RUN   TestDomain_SrvInstances\n    nacos_domain_test.go:30: Domain.srvInstances weight passed.\n    nacos_domain_test.go:37: Domain.srvInstances valid passed.\n--- PASS: TestDomain_SrvInstances (0.00s)\n=== RUN   TestGetAllServicesInfo\n    nacos_grpc_client_test.go:23: GrpcClient get all servicesInfo passed\n--- PASS: TestGetAllServicesInfo (0.03s)\n=== RUN   TestGetService\n    nacos_grpc_client_test.go:39: GrpcClient get service passed\n--- PASS: TestGetService (0.03s)\n=== RUN   TestSubscribe\n    nacos_grpc_client_test.go:54: GrpcClient subscribe service passed\n--- PASS: TestSubscribe (0.03s)\n=== RUN   TestCallback\n    nacos_grpc_client_test.go:181: GrpcClient Service SubscribeCallback passed\n--- PASS: TestCallback (0.00s)\n=== RUN   TestServerManager_NextServer\n    server_manager_test.go:29: ServerManager.NextServer test is passed.\n--- PASS: TestServerManager_NextServer (0.00s)\n=== RUN   TestServerManager_RefreshServerListIfNeed\n    server_manager_test.go:39: ServerManager.RefreshServerListIfNeed test is passed.\n--- PASS: TestServerManager_RefreshServerListIfNeed (0.00s)\n=== RUN   TestNacosParse\ninit nacos plugin...\ninit nacos client.\n    setup_test.go:54: Passed\n--- PASS: TestNacosParse (1.18s)\n=== RUN   TestUDPServer_StartServer\n    udp_server_test.go:43: Udp server test passed.\n--- PASS: TestUDPServer_StartServer (0.02s)\n=== RUN   TestTryDecompressData\n    util_and_comms_test.go:32: Gzip test is passed.\n--- PASS: TestTryDecompressData (0.00s)\nPASS\nok  \tnacos-coredns-plugin/nacos\t4.624s\n```\n\n#### 压力测试\n\n1.  测试机器配置\n腾讯云轻量应用服务器：CPU2核 内存2G 带宽4M。一般而言，CoreDNS比较吃网卡和CPU，对于硬盘IO的要求并不算特别高（主要取决于写日志的量），对内存占用较低。 \n2.  测试工具\n本次测试使用bind9出品的一款DNS服务器性能测试的工具queryperf，对DNS服务器进行压测，并对DNS服务器性能进行评估。 \n3.  测试方法\n使用 queryperf 来对 Coredns-Nacos-Plugin 进行DNS请求，解析在Nacos服务端注册的服务域名。\n● 本次测试使用的Nacos服务端注册了1000个服务, 共10000个服务实例。 \n\n**v1 版本：Nacos v1.x + Coredns v1.6.7**\n● 50000条DNS请求： 三次测试， 平均qps为 209\n```\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n  \n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n  \n  RTT max:         \t0.428648 sec\n  RTT min:              0.000030 sec\n  RTT average:          0.011961 sec\n  RTT std deviation:    0.016171 sec\n  RTT out of range:     0 queries\n  \n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n  \n  Started at:           Thu Sep 22 15:49:44 2022\n  Finished at:          Thu Sep 22 15:53:53 2022\n  Ran for:              249.121087 seconds\n  \n  Queries per second:   200.705611 qps\n```\n```\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n  \n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n  \n  RTT max:         \t0.485871 sec\n  RTT min:              0.000357 sec\n  RTT average:          0.011313 sec\n  RTT std deviation:    0.012731 sec\n  RTT out of range:     0 queries\n  \n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n  \n  Started at:           Thu Sep 22 16:24:04 2022\n  Finished at:          Thu Sep 22 16:28:10 2022\n  Ran for:              245.988585 seconds\n  \n  Queries per second:   203.261464 qps\n```\n```\n[Status] Testing complete\n\nStatistics:\n  \n  Parse input file:     once\n  Ended due to:         reaching end of file\n  \n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n  \n  RTT max:         \t0.082733 sec\n  RTT min:              0.000019 sec\n  RTT average:          0.006520 sec\n  RTT std deviation:    0.001705 sec\n  RTT out of range:     0 queries\n  \n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n  \n  Started at:           Wed Sep 22 20:43:30 2022\n  Finished at:          Wed Sep 22 20:47:12 2022\n  Ran for:              222.443603 seconds\n  \n  Queries per second:   224.776075 qps\n```\n\n\n**v2版本： Nacos2.1.1 + Coredns 1.9.3**\n50000条DNS请求，三次测试平均qps为：467\n```\n[Status] Testing complete\n\nStatistics:\n  \n  Parse input file:     once\n  Ended due to:         reaching end of file\n  \n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n  \n  RTT max:         \t0.048039 sec\n  RTT min:              0.004723 sec\n  RTT average:          0.006745 sec\n  RTT std deviation:    0.001731 sec\n  RTT out of range:     0 queries\n  \n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n  \n  Started at:           Thu Sep 22 14:48:29 2022\n  Finished at:          Thu Sep 22 14:50:17 2022\n  Ran for:              107.771145 seconds\n  \n  Queries per second:   463.946078 qps\n```\n```\n[Status] Testing complete\n\nStatistics:\n\n  Parse input file:     once\n  Ended due to:         reaching end of file\n\n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n\n  RTT max:         \t0.041432 sec\n  RTT min:              0.003126 sec\n  RTT average:          0.005235 sec\n  RTT std deviation:    0.001552 sec\n  RTT out of range:     0 queries\n\n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n\n  Started at:           Thu Sep 22 14:52:01 2022\n  Finished at:          Thu Sep 22 14:53:49 2022\n  Ran for:              107.977801 seconds\n\n  Queries per second:   463.058143 qps\n```\n```\n[Status] Testing complete\n\nStatistics:\n  \n  Parse input file:     once\n  Ended due to:         reaching end of file\n  \n  Queries sent:         50000 queries\n  Queries completed:    50000 queries\n  Queries lost:         0 queries\n  Queries delayed(?):   0 queries\n  \n  RTT max:         \t0.039539 sec\n  RTT min:              0.000980 sec\n  RTT average:          0.005502 sec\n  RTT std deviation:    0.001641 sec\n  RTT out of range:     0 queries\n  \n  Percentage completed: 100.00%\n  Percentage lost:        0.00%\n  \n  Started at:           Thu Sep 22 15:01:28 2022\n  Finished at:          Thu Sep 22 15:03:13 2022\n  Ran for:              104.918484 seconds\n  \n  Queries per second:   476.560450 qps\n```\n#### 测试总结：\n经过以上的单元测试和压力测试，新版本的nacos-coredns-plugin插件，在新增的与nacos服务端建立gRPC长连接的功能支持下，插件表现稳定，且DNS请求的 qps 从 209 提升到 467， 得到了接近 223% 的性能增长。\n### 项目完成质量：\n**1． 技术方案评价**\n本次项目致力于让Nacos-CoreDNS模块支持以gRPC长连接方式访问Nacos服务端，具有一定的难度。但是在经过导师指导和讨论后，逐步完成了方案的优化，使得方案的设计更有可靠性和完善性。由于前期技术方案进行了比较严格的分析和策划，所以相对后期的实现而言，改动较少，提高了开发效率；\n**2．项目质量评价**\n经过比较严密的稳定性测试和压力测试，整个插件表现稳定，可以很好的完成题目给的需求。本项目模块化独立开发，与其他模块耦合度小，较为容易进行维护。此插件使用golang语言编写，具有良好的跨平台可移植性。此外，开发进度也能够按照前期的时间规划进行，按时提交了项目产出。\n### 与导师沟通及反馈情况：\n由于对这个项目比较感兴趣，所以在项目公布早期就与导师进行了沟通联系。在与导师沟通的过程中，得到了许多有用的反馈，帮助我了解了整个项目的详情细节。同时导师也给我了许多建议来对方案进行优化改进。可以说，整个过程中，与指导老师的沟通情况非常的默契。当我遇到困难和问题的时候，指导老师可以主动地为我解决问题，而且还会为我提出更好的建议。我所提出合理的意见，老师也会采取。\n\n### 我的收获\n虽然此次项目时间只有三个月，在这期间不一定会让一个人有着翻天覆地的变化，但变化就是这样一点一点产生的，同时也感觉有很大的收获，也帮助找出了自己的不足和需要改进的地方。在遇到问题虚心请教后，从导师的身上能学到自己没有的东西，每一次都会使我更接近成功。还有学会了在开发中与人的合作与交流。\n在这个项目之前，我对待开发方案和文档这些东西会不太注重，写得比较粗略。但是通过这个项目，我体会到有效详细的方案设计和开发文档，可以很大的提高开发效率，保证项目的可行性和可维护性。\n代码风格要规范，之前写代码，我都是不怎么去注意代码风格和写代码的规范，都是稍微想一下就直接开始写代码了。注释也很少用，总感觉我们自己写的代码，我们怎么会不知道它做了些什么事呢 ？总觉得我们自己写的代码我们怎么会不知道它是用来做什么的呢。但通过这次项目，我体会到保持规范统一的代码风格的重要性，可以保证代码的可读性，让别人更容易理解自己写的代码。\n我也借助到这个机会，可以参与开源项目中，积累了相关经验、学习到新的知识。为日后继续参与更多开源项目提供一个经验借鉴。此外我对Nacos非常感兴趣，希望项目结束后也能在Nacos其他方面做一点点贡献。  \n","slug":"project-report","published":1,"updated":"2022-09-28T07:02:48.456Z","_id":"cl8gzqdkr000li3wucmv59abx","comments":1,"layout":"post","photos":[],"link":"","content":"<p><a href=\"https://summer-ospp.ac.cn/#/org/prodetail/22ab10318\">Nacos-CoreDNS模块支持以长连接访问Nacos服务端</a></p>\n<h2 id=\"项目信息\"><a href=\"#项目信息\" class=\"headerlink\" title=\"项目信息\"></a>项目信息</h2><h3 id=\"项目名称：Nacos-CoreDNS模块支持以长连接访问Nacos服务端\"><a href=\"#项目名称：Nacos-CoreDNS模块支持以长连接访问Nacos服务端\" class=\"headerlink\" title=\"项目名称：Nacos-CoreDNS模块支持以长连接访问Nacos服务端\"></a>项目名称：Nacos-CoreDNS模块支持以长连接访问Nacos服务端</h3><h3 id=\"项目产出：\"><a href=\"#项目产出：\" class=\"headerlink\" title=\"项目产出：\"></a>项目产出：</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol>\n<li>设计出Nacos CoreDNS模块支持gRPC的方案，输出详细设计文档；</li>\n</ol>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol start=\"2\">\n<li>根据设计文档，对Nacos CoreDNS模块进行开发；</li>\n</ol>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol start=\"3\">\n<li>提供新Nacos CoreDNS模块的使用示例和文档。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"方案描述：\"><a href=\"#方案描述：\" class=\"headerlink\" title=\"方案描述：\"></a>方案描述：</h3><p>当前 Nacos-CoreDNS-Plugin 插件是通过HTTP短连接方式调用Nacos服务端的 API 来请求获取nacos服务端的资源信息。 而在nacos版本v2.x后，原来v1.x版本的API已经被移除，替换成了建立gRPC连接的方式通过gRPC请求来访问获取nacos服务端的资源信息。<br>因此本项目的方案可以参考Nacos-go-sdk与Nacos服务器的通信方式，在Nacos-coredns-plugin内导入Nacos-sdk-go相关功能，封装成新的grpc通信模块，实现nacos-coredns插件与nacos服务器的通信。<br>例如，通过nacos-go-sdk来调用GetAllServicesInfo、GetService等方法，就能获取所有服务或某个具体服务的信息（ip、port…），这些数据可以覆盖nacos v1版本api传输的数据，因此只需要对从nacos服务端获取的数据转成对应coredns插件需要的数据结构即可。</p>\n<h4 id=\"核心方法\"><a href=\"#核心方法\" class=\"headerlink\" title=\"核心方法\"></a>核心方法</h4><ol>\n<li>构建客户端：通过在coredns插件中导入nacos-go-sdk&#x2F;v2包，搭建一个nacos-coredns插件和nacos服务通信的客户端 </li>\n<li>根据插件的资源需求，封装sdk方法， 完成通信中的数据交换：</li>\n</ol>\n<ul>\n<li>GetAllServicesInfo: 请求获取Nacos服务端里注册的所有服务名</li>\n<li>GetService:  请求获取Nacos服务端某个服务的具体信息</li>\n<li>Subscribe:   订阅Nacos服务端某个服务</li>\n<li>Unsubsrcibe: 取消订阅Nacos服务端某个服务</li>\n<li>Callback:    当Nacos服务端的订阅服务发生改变时，通过回调函数更新客户端的服务数据</li>\n<li>HasSubcribed: 记录当前服务是否订阅，避免重复订阅</li>\n</ul>\n<ol start=\"3\">\n<li>替换原来插件的数据结构：原来的nacos-coredns插件的数据结构与新版nacos服务端gRPC请求返回的数据结构冲突不兼容，需要放弃原来的数据结构，更新为新版的数据结构。</li>\n</ol>\n<p><strong>grpc客户端的类设计图</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1664196977944-f4258097-3823-4984-8814-4cae3ed8cdb1.png#clientId=u4ceca8f8-239f-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=ui&id=n1TAW&name=NacosGrpcClient.drawio.png&originHeight=277&originWidth=922&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26579&status=error&style=none&taskId=uc9eeb30f-459a-4007-af54-8999825ae82&title=\" alt=\"NacosGrpcClient.drawio.png\"></p>\n<h4 id=\"grpc通信流程设计\"><a href=\"#grpc通信流程设计\" class=\"headerlink\" title=\"grpc通信流程设计\"></a>grpc通信流程设计</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1664196982731-98f47454-b143-4968-a2e8-223d287d106e.png#clientId=u4ceca8f8-239f-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=ui&id=ua814f7c3&name=grpc-design.png&originHeight=373&originWidth=1053&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42662&status=error&style=none&taskId=ubb61ba78-774d-4f31-b5f6-4763e61ae42&title=\" alt=\"grpc-design.png\"><br>1、启动nacos-coredns插件时，同时启动插件与nacos服务器的grpc通信客户端（nacos_grpc_client）。<br>2、grpc通信客户端调用了Nacos-go-sdk&#x2F;v2中实现的方法，从nacos服务器集群中获取一个服务器的IP地址和端口并建立TCP连接。HTTP&#x2F;2下，同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应。<br>3、nacos-coredns插件向Nacos服务器请求资源时，通过grpc通信客户端来调用nacos-go-sdk&#x2F;v2封装的GetAllServicesInfo、GetService等方法来获取所有服务或某个具体服务的信息详情（ip、port…）。<br>4、grpc通信客户端将从nacos服务器里获取到的数据存入nacos-coredns插件的数据缓存中，待插件处理DNS请求时输出数据。<br>5、对grpc通信客户端设置 超时时间 与 重试次数 等措施来避免调用超时、 阻塞等情况。</p>\n<h3 id=\"方案具体实现：\"><a href=\"#方案具体实现：\" class=\"headerlink\" title=\"方案具体实现：\"></a>方案具体实现：</h3><h4 id=\"一、-构建客户端\"><a href=\"#一、-构建客户端\" class=\"headerlink\" title=\"一、 构建客户端\"></a>一、 构建客户端</h4><p>在 Nacos-CoreDNS-Plugin 插件中导入nacos-go-sdk&#x2F;v2包， 来与要访问的nacos服务端集群建立gRPC连接。<br>与nacos服务端建立gRPC需要两个参数  <strong>clientConfig</strong> 和  <strong>serverConfig</strong>. </p>\n<ul>\n<li><p>clientConfig 是针对本项目作为向服务端请求资源的客户端 来配置 对nacos服务端的 NamespaceId 请求超时TimeoutMs 日志目录LogDir 数据缓存目录CacheDir</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">nacosGrpcClient.clientConfig = *constant.NewClientConfig(<br>        constant.WithNamespaceId(namespaceId),<br>        constant.WithTimeoutMs(<span class=\"hljs-number\">5000</span>),<br>        constant.WithLogDir(LogPath),<br>        constant.WithCacheDir(CachePath),<br>        constant.WithNotLoadCacheAtStart(<span class=\"hljs-literal\">true</span>),<br>        constant.WithUpdateCacheWhenEmpty(<span class=\"hljs-literal\">true</span>),<br>        constant.WithLogLevel(<span class=\"hljs-string\">&quot;debug&quot;</span>),<br>)<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>serverConfig 指定服务端集群的Ip地址和端口</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">serverConfigs := <span class=\"hljs-built_in\">make</span>([]constant.ServerConfig, <span class=\"hljs-built_in\">len</span>(serverHosts))<br><span class=\"hljs-keyword\">for</span> i, serverHost := <span class=\"hljs-keyword\">range</span> serverHosts &#123;<br>        serverIp := strings.Split(serverHost, <span class=\"hljs-string\">&quot;:&quot;</span>)[<span class=\"hljs-number\">0</span>]<br>        serverPort, err := strconv.Atoi(strings.Split(serverHost, <span class=\"hljs-string\">&quot;:&quot;</span>)[<span class=\"hljs-number\">1</span>])<br>        <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>            NacosClientLogger.Error(<span class=\"hljs-string\">&quot;nacos server host config error!&quot;</span>, err)<br>        &#125;<br>        serverConfigs[i] = *constant.NewServerConfig(<br>            serverIp,<br>            <span class=\"hljs-type\">uint64</span>(serverPort),<br>            constant.WithScheme(<span class=\"hljs-string\">&quot;http&quot;</span>),<br>            constant.WithContextPath(<span class=\"hljs-string\">&quot;/nacos&quot;</span>),<br>        )<br><br>    &#125;<br>nacosGrpcClient.serverConfigs = serverConfigs<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>配置完成后， 连接建立， 通过此客户端来进行通信</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">nacosGrpcClient.grpcClient, err = clients.NewNamingClient(<br>    vo.NacosClientParam&#123;<br>        ClientConfig:  &amp;nacosGrpcClient.clientConfig,<br>        ServerConfigs: nacosGrpcClient.serverConfigs,<br>    &#125;,<br>)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"二、-客户端的主要功能\"><a href=\"#二、-客户端的主要功能\" class=\"headerlink\" title=\"二、 客户端的主要功能\"></a>二、 客户端的主要功能</h4><h4 id=\"根据插件的资源需求，封装sdk方法，-完成通信中的数据交换。\"><a href=\"#根据插件的资源需求，封装sdk方法，-完成通信中的数据交换。\" class=\"headerlink\" title=\"根据插件的资源需求，封装sdk方法， 完成通信中的数据交换。\"></a>根据插件的资源需求，封装sdk方法， 完成通信中的数据交换。</h4><ol>\n<li><p>GetAllServicesInfo:  对应v1版本的API(&#x2F;v1&#x2F;ns&#x2F;api&#x2F;allDomNames)，通过封装sdk的方法，获取在nacos里注册的所有服务名。\t\t\t </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ngc *NacosGrpcClient)</span></span> GetAllServicesInfo() []<span class=\"hljs-type\">string</span> &#123;<br>    <span class=\"hljs-keyword\">var</span> pageNo = <span class=\"hljs-type\">uint32</span>(<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">var</span> pageSize = <span class=\"hljs-type\">uint32</span>(<span class=\"hljs-number\">100</span>)<br>    <span class=\"hljs-keyword\">var</span> services []<span class=\"hljs-type\">string</span><br><br>    pageServiceList, _ := ngc.grpcClient.GetAllServicesInfo(vo.GetAllServiceInfoParam&#123;<br>        NameSpace: ngc.namespaceId,<br>        PageNo:    pageNo,<br>        PageSize:  pageSize,<br>    &#125;)<br>    services = <span class=\"hljs-built_in\">append</span>(services, pageServiceList.Doms...)<br><br>    <span class=\"hljs-comment\">// 如果当前页数服务数满了, 继续查找添加下一页</span><br>\t<span class=\"hljs-keyword\">for</span> pageNo++; <span class=\"hljs-built_in\">len</span>(pageServiceList.Doms) &gt;= <span class=\"hljs-type\">int</span>(pageSize); pageNo++ &#123;<br>        pageServiceList, _ = ngc.grpcClient.GetAllServicesInfo(vo.GetAllServiceInfoParam&#123;<br>            NameSpace: ngc.namespaceId,<br>            PageNo:    pageNo,<br>            PageSize:  pageSize,<br>        &#125;)<br>        services = <span class=\"hljs-built_in\">append</span>(services, pageServiceList.Doms...)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> services<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>GetService:  对应v1版本的API(&#x2F;v1&#x2F;ns&#x2F;api&#x2F;srvIPXT)，输入服务名，通过gRPC请求获该服务的具体信息。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ngc *NacosGrpcClient)</span></span> GetService(serviceName <span class=\"hljs-type\">string</span>) model.Service &#123;<br>    service, _ := ngc.grpcClient.GetService(vo.GetServiceParam&#123;<br>        ServiceName: serviceName,<br>    &#125;)<br>    <span class=\"hljs-keyword\">if</span> service.Hosts == <span class=\"hljs-literal\">nil</span> &#123;<br>        NacosClientLogger.Warn(<span class=\"hljs-string\">&quot;empty result from server, dom:&quot;</span> + serviceName)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> service<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Subscribe:  订阅Nacos服务端某个服务， 封装sdk中订阅服务的方法，输入服务名，通过gRPC连接完成对该服务的订阅来更新服务数据。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ngc *NacosGrpcClient)</span></span> Subscribe(serviceName <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">error</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> ngc.HasSubcribed(serviceName) &#123;<br>        NacosClientLogger.Info(<span class=\"hljs-string\">&quot;service &quot;</span> + serviceName + <span class=\"hljs-string\">&quot; already subsrcibed.&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>    &#125;<br>    param := &amp;vo.SubscribeParam&#123;<br>        ServiceName:       serviceName,<br>        GroupName:         <span class=\"hljs-string\">&quot;&quot;</span>,<br>        SubscribeCallback: ngc.Callback,<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> err := ngc.grpcClient.Subscribe(param); err != <span class=\"hljs-literal\">nil</span> &#123;<br>        NacosClientLogger.Error(<span class=\"hljs-string\">&quot;service subscribe error &quot;</span> + serviceName)<br>        <span class=\"hljs-keyword\">return</span> err<br>    &#125;<br><br>    <span class=\"hljs-keyword\">defer</span> ngc.SubscribeMap.DLock.Unlock()<br>    ngc.SubscribeMap.DLock.Lock()<br>    ngc.SubscribeMap.Data[serviceName] = <span class=\"hljs-literal\">true</span><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Unsubsrcibe:  取消订阅Nacos服务端某个服务， 封装了sdk中取消订阅服务的方法。当服务下线时，通过gRPC连接来取消该服务的订阅。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ngc *NacosGrpcClient)</span></span> Unsubsrcibe(serviceName <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">error</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> !ngc.HasSubcribed(serviceName) &#123;<br>        NacosClientLogger.Info(<span class=\"hljs-string\">&quot;service &quot;</span> + serviceName + <span class=\"hljs-string\">&quot; already unsubsrcibed.&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>    &#125;<br>    param := &amp;vo.SubscribeParam&#123;<br>        ServiceName:       serviceName,<br>        GroupName:         <span class=\"hljs-string\">&quot;&quot;</span>,<br>        SubscribeCallback: ngc.Callback,<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> err := ngc.grpcClient.Unsubscribe(param); err != <span class=\"hljs-literal\">nil</span> &#123;<br>        NacosClientLogger.Error(<span class=\"hljs-string\">&quot;service unsubscribe error &quot;</span> + serviceName)<br>        <span class=\"hljs-keyword\">return</span> err<br>    &#125;<br><br>    <span class=\"hljs-keyword\">defer</span> ngc.SubscribeMap.DLock.Unlock()<br>    ngc.SubscribeMap.DLock.Lock()<br>    ngc.SubscribeMap.Data[serviceName] = <span class=\"hljs-literal\">false</span><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Callback:  当Nacos服务端的订阅服务发生改变时，通过回调函数更新客户端的服务数据。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ngc *NacosGrpcClient)</span></span> Callback(instances []model.Instance, err <span class=\"hljs-type\">error</span>) &#123;<br>    <span class=\"hljs-comment\">//服务下线,更新实例数量为0</span><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(instances) == <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> serviceName, _ := <span class=\"hljs-keyword\">range</span> AllDoms.Data &#123;<br>            <span class=\"hljs-keyword\">if</span> service := ngc.GetService(serviceName); <span class=\"hljs-built_in\">len</span>(service.Hosts) == <span class=\"hljs-number\">0</span> &#123;<br>                ngc.nacosClient.GetDomainCache().Set(serviceName, service)<br>                ngc.Unsubsrcibe(serviceName)<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span><br>    &#125;<br>    serviceName := strings.Split(instances[<span class=\"hljs-number\">0</span>].ServiceName, SEPERATOR)[<span class=\"hljs-number\">1</span>]<br>    oldService, ok := ngc.nacosClient.GetDomainCache().Get(serviceName)<br>    <span class=\"hljs-keyword\">if</span> !ok &#123;<br>        NacosClientLogger.Info(<span class=\"hljs-string\">&quot;service not found in cache &quot;</span> + serviceName)<br>        service := ngc.GetService(serviceName)<br>        ngc.nacosClient.GetDomainCache().Set(serviceName, service)<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        service := oldService.(model.Service)<br>        service.Hosts = instances<br>        service.LastRefTime = <span class=\"hljs-type\">uint64</span>(CurrentMillis())<br>        ngc.nacosClient.GetDomainCache().Set(serviceName, service)<br>    &#125;<br>    NacosClientLogger.Info(<span class=\"hljs-string\">&quot;serviceName: &quot;</span>+serviceName+<span class=\"hljs-string\">&quot; was updated to: &quot;</span>, instances)<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>HasSubcribed:  记录当前服务是否订阅，避免重复订阅。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ngc *NacosGrpcClient)</span></span> HasSubcribed(serviceName <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">bool</span> &#123;<br>    <span class=\"hljs-keyword\">defer</span> ngc.SubscribeMap.DLock.RUnlock()<br>    ngc.SubscribeMap.DLock.RLock()<br>    <span class=\"hljs-keyword\">return</span> ngc.SubscribeMap.Data[serviceName]<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"三、-替换原来插件的数据结构\"><a href=\"#三、-替换原来插件的数据结构\" class=\"headerlink\" title=\"三、 替换原来插件的数据结构\"></a>三、 替换原来插件的数据结构</h4><p>将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构<br>将v1版本的数据结构 Domain替换为Service, 并更新 Instance 的结构。<br>旧的定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Domain <span class=\"hljs-keyword\">struct</span> &#123;<br>    Name          <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;dom&quot;`</span><br>    Clusters      <span class=\"hljs-type\">string</span><br>    CacheMillis   <span class=\"hljs-type\">int64</span><br>    LastRefMillis <span class=\"hljs-type\">int64</span><br>    Instances     []Instance <span class=\"hljs-string\">`json:&quot;hosts&quot;`</span><br>    Env           <span class=\"hljs-type\">string</span><br>    TTL           <span class=\"hljs-type\">int</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Instance <span class=\"hljs-keyword\">struct</span> &#123;<br>    IP         <span class=\"hljs-type\">string</span><br>    Port       <span class=\"hljs-type\">int</span><br>    Weight     <span class=\"hljs-type\">float64</span><br>    Valid      <span class=\"hljs-type\">bool</span><br>    Unit       <span class=\"hljs-type\">string</span><br>    AppUseType <span class=\"hljs-type\">string</span><br>    Site       <span class=\"hljs-type\">string</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>新的替换：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Service <span class=\"hljs-keyword\">struct</span> &#123;<br>    CacheMillis              <span class=\"hljs-type\">uint64</span>     <span class=\"hljs-string\">`json:&quot;cacheMillis&quot;`</span><br>    Hosts                    []Instance <span class=\"hljs-string\">`json:&quot;hosts&quot;`</span><br>    Checksum                 <span class=\"hljs-type\">string</span>     <span class=\"hljs-string\">`json:&quot;checksum&quot;`</span><br>    LastRefTime              <span class=\"hljs-type\">uint64</span>     <span class=\"hljs-string\">`json:&quot;lastRefTime&quot;`</span><br>    Clusters                 <span class=\"hljs-type\">string</span>     <span class=\"hljs-string\">`json:&quot;clusters&quot;`</span><br>    Name                     <span class=\"hljs-type\">string</span>     <span class=\"hljs-string\">`json:&quot;name&quot;`</span><br>    GroupName                <span class=\"hljs-type\">string</span>     <span class=\"hljs-string\">`json:&quot;groupName&quot;`</span><br>    Valid                    <span class=\"hljs-type\">bool</span>       <span class=\"hljs-string\">`json:&quot;valid&quot;`</span><br>    AllIPs                   <span class=\"hljs-type\">bool</span>       <span class=\"hljs-string\">`json:&quot;allIPs&quot;`</span><br>    ReachProtectionThreshold <span class=\"hljs-type\">bool</span>       <span class=\"hljs-string\">`json:&quot;reachProtectionThreshold&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Instance <span class=\"hljs-keyword\">struct</span> &#123;<br>    InstanceId                <span class=\"hljs-type\">string</span>            <span class=\"hljs-string\">`json:&quot;instanceId&quot;`</span><br>    Ip                        <span class=\"hljs-type\">string</span>            <span class=\"hljs-string\">`json:&quot;ip&quot;`</span><br>    Port                      <span class=\"hljs-type\">uint64</span>            <span class=\"hljs-string\">`json:&quot;port&quot;`</span><br>    Weight                    <span class=\"hljs-type\">float64</span>           <span class=\"hljs-string\">`json:&quot;weight&quot;`</span><br>    Healthy                   <span class=\"hljs-type\">bool</span>              <span class=\"hljs-string\">`json:&quot;healthy&quot;`</span><br>    Enable                    <span class=\"hljs-type\">bool</span>              <span class=\"hljs-string\">`json:&quot;enabled&quot;`</span><br>    Ephemeral                 <span class=\"hljs-type\">bool</span>              <span class=\"hljs-string\">`json:&quot;ephemeral&quot;`</span><br>    ClusterName               <span class=\"hljs-type\">string</span>            <span class=\"hljs-string\">`json:&quot;clusterName&quot;`</span><br>    ServiceName               <span class=\"hljs-type\">string</span>            <span class=\"hljs-string\">`json:&quot;serviceName&quot;`</span><br>    Metadata                  <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;metadata&quot;`</span><br>    InstanceHeartBeatInterval <span class=\"hljs-type\">int</span>               <span class=\"hljs-string\">`json:&quot;instanceHeartBeatInterval&quot;`</span><br>    IpDeleteTimeout           <span class=\"hljs-type\">int</span>               <span class=\"hljs-string\">`json:&quot;ipDeleteTimeout&quot;`</span><br>    InstanceHeartBeatTimeOut  <span class=\"hljs-type\">int</span>               <span class=\"hljs-string\">`json:&quot;instanceHeartBeatTimeOut&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"时间规划\"><a href=\"#时间规划\" class=\"headerlink\" title=\"时间规划\"></a>时间规划</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 7.01 - 7.14  复用Nacos-Sdk-Go，构建一个简易的Nacos-go客户端与Nacos服务器实现gRPC的通信方式，来熟悉Nacos的go开发，改进设计文档。  </li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 7.15 - 7.31  借助前面的开发文档和经验，尝试在Nacos-CoreDNS-plugin中添加 grpc客户端模块，建立与 Nacos服务端的gRPC通信。</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 8.01 - 8.14  对 Nacos-CoreDNS 插件与Nacos服务端的连接进行细节的优化，保证连接的稳定性。</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 8.15 - 8.30  编写单元测试，对新的连接进行性能测试，主要是对比同一个接口在gRPC连接和短连接两种模式下的响应时间和吞吐量进行压力测试。  </li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 9.01 - 9.14  编写新Nacos CoreDNS模块的使用示例和文档。  </li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 9.15 - 9.30  对整个项目进行梳理，提交PR，编写项目终期报告。</li>\n</ul>\n<h2 id=\"项目总结\"><a href=\"#项目总结\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h2><h3 id=\"遇到的问题及解决方案：\"><a href=\"#遇到的问题及解决方案：\" class=\"headerlink\" title=\"遇到的问题及解决方案：\"></a>遇到的问题及解决方案：</h3><h4 id=\"1-nacos旧版本升级到新版本后，原来的API被移除了。\"><a href=\"#1-nacos旧版本升级到新版本后，原来的API被移除了。\" class=\"headerlink\" title=\"1. nacos旧版本升级到新版本后，原来的API被移除了。\"></a>1. nacos旧版本升级到新版本后，原来的API被移除了。</h4><p>原来的 Nacos-CoreDNS-Plugin 插件是通过HTTP短连接方式调用Nacos服务端的 API 来请求获取nacos服务端的资源信息。 而在nacos版本v2.x后，原来v1.x版本的API已经被移除，替换成了建立gRPC连接的方式通过gRPC请求来访问获取nacos服务端的资源信息。 因此，可以参考Nacos-go-sdk提供的与Nacos服务器的通信方法，在Nacos-coredns-plugin内导入Nacos-sdk-go相关功能，封装成新的grpc通信模块，实现nacos-coredns插件与nacos服务器的通信。</p>\n<h4 id=\"2-数据缓存问题\"><a href=\"#2-数据缓存问题\" class=\"headerlink\" title=\"2. 数据缓存问题\"></a>2. 数据缓存问题</h4><p>原来coredns插件的服务数据是缓存在 &#x2F;root&#x2F;nacos-go-client-cache&#x2F; 目录中，且每次更新数据都会将数据写入到文件中，造成的io资源消耗较大。<br>而nacos-sdk-go中自带了对服务的缓存默认是在 &#x2F;tmp&#x2F;nacos&#x2F;cache&#x2F; 目录中，这些缓存的数据都是在插件启动的时候加载的，两者的功能产生了重叠。因此，将原来的nacos-coredns-plugin的缓存功能移除，让nacos-sdk-go管理服务数据的缓存。 </p>\n<h4 id=\"3-数据更新问题\"><a href=\"#3-数据更新问题\" class=\"headerlink\" title=\"3. 数据更新问题\"></a>3. 数据更新问题</h4><p>目前nacos-coredns-plugin数据的更新是通过两个goruntime定时向服务器请求来更新数据, 当服务数据频繁变化时，无法及时更新客户端的数据。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1658123188046-9eba3156-f960-415f-bd84-68a586dbc189.png#crop=0&crop=0&crop=1&crop=1&id=GKReH&originHeight=711&originWidth=841&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"><br>nacos-sdk-go中提供了Subscribe服务订阅的功能。对某个服务进行订阅后，服务的实例发生改变时会调用客户端定义的回调函数callback。因此，将数据更新的流程调整为：定时从服务器获取所有服务名, 当某个服务接受到DNS请求时，对此服务进行订阅。 当Nacos服务端的订阅服务发生改变时，通过回调函数更新客户端的服务数据。 </p>\n<h4 id=\"4-编译问题\"><a href=\"#4-编译问题\" class=\"headerlink\" title=\"4. 编译问题\"></a>4. 编译问题</h4><p>coredns v1.6.7 与 nacos-sdk-go&#x2F;v2 的grpc版本不兼容， 编译时会产生报错。<br>将 nacos-coredns-plugin 原来的 coredns v1.6.7 版本更新到最新的v1.9.3版本，解决原来coredns与nacos-sdk-go的 gRPC版本冲突问题。 </p>\n<h3 id=\"项目测试：\"><a href=\"#项目测试：\" class=\"headerlink\" title=\"项目测试：\"></a>项目测试：</h3><h4 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h4><p>在原来的v1.6.7分支上，修改2个测试用例，新增5个测试用例</p>\n<ol>\n<li><p>测试用例一：TestNacosClient_getAllServiceNames<br>● 预期结果：获取Nacos服务端里注册的所有服务名并存入AllDoms<br>● 实际结果：成功获取Nacos服务端里注册的所有服务名并存入AllDoms<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235900753-b4c1b719-bd97-484d-85c3-7b4cc2857858.png#crop=0&crop=0&crop=1&crop=1&id=o7c3j&originHeight=100&originWidth=800&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n</li>\n<li><p>测试用例二：TestNacosClient_getDomNow<br>● 预期结果：获取Nacos服务端里某个服务的具体信息并存入缓存中<br>● 实际结果：成功获取Nacos服务端里某个服务的具体信息并存入缓存中<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235907742-ff276893-12f7-422d-b68b-11de9009295f.png#crop=0&crop=0&crop=1&crop=1&id=SWIpv&originHeight=105&originWidth=799&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n</li>\n<li><p>测试用例三：TestGetAllServicesInfo<br>● 预期结果：gRPC请求获取Nacos服务端里注册的所有服务名<br>● 实际结果：成功通过gRPC请求获取Nacos服务端里注册的所有服务名<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235912610-bb19fa61-93a4-4e7e-a426-883ec6ac702d.png#crop=0&crop=0&crop=1&crop=1&id=IZjR3&originHeight=101&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n</li>\n<li><p>测试用例四：TestGetService<br>● 预期结果：gRPC请求获取Nacos服务端某个服务的具体信息<br>● 实际结果：成功通过gRPC请求获取Nacos服务端某个服务的具体信息<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235917042-499d4924-c2b3-4f08-9cc3-7f7439904553.png#crop=0&crop=0&crop=1&crop=1&id=MH0ma&originHeight=95&originWidth=799&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n</li>\n<li><p>测试用例五：TestSubscribe<br>● 预期结果：gRPC订阅Nacos服务端某个服务<br>● 实际结果：成功通过gRPC订阅Nacos服务端某个服务<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235925262-741dbe46-6a47-47dc-afbc-83f08403853b.png#crop=0&crop=0&crop=1&crop=1&id=dGoe9&originHeight=88&originWidth=800&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n</li>\n<li><p>测试用例六：TestCallback<br>● 预期结果：当Nacos服务端服务发生改变时，通过回调函数更新客户端的服务数据<br>● 实际结果：当Nacos服务端服务发生改变时，成功通过回调函数更新客户端的服务数据<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235933413-c05baf72-43a3-4a0d-8f99-a817cd6cc6f9.png#crop=0&crop=0&crop=1&crop=1&id=ApssP&originHeight=97&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n</li>\n<li><p>测试用例七：TestNacosParse<br>● 预期结果：通过配置文件配置Nacos服务器的 NamespaceId 和 ip地址和端口 .<br>● 实际结果：成功配置Nacos服务器的 NamespaceId 和 ip地址和端口 .<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235941664-68c7fca4-c643-4b0a-bacc-b6bee6f0f2db.png#crop=0&crop=0&crop=1&crop=1&id=mwKYF&originHeight=163&originWidth=828&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n</li>\n</ol>\n<p><strong>所有测试用例运行结果</strong></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">=== <span class=\"hljs-built_in\">RUN</span>   TestDnsCache_Updated<br>    dns_cache_test.go:26: Out of date test is passed<br>    dns_cache_test.go:32: Updated is passed.<br>--- PASS: TestDnsCache_Updated (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestGet<br>    httpclient_test.go:40: Success <span class=\"hljs-keyword\">to</span> test http<span class=\"hljs-built_in\"> client </span><span class=\"hljs-built_in\">get</span><br>--- PASS: TestGet (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosClient_GetDomain<br>--- PASS: TestNacosClient_GetDomain (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosClient_getAllServiceNames<br>    nacos_client_test.go:75: <span class=\"hljs-built_in\">Get</span> all serviceName <span class=\"hljs-keyword\">from</span> servers passed<br>--- PASS: TestNacosClient_getAllServiceNames (0.05s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosClient_getServiceNow<br>    nacos_client_test.go:100: <span class=\"hljs-built_in\">Get</span> all servicesInfo <span class=\"hljs-keyword\">from</span> servers passed<br>--- PASS: TestNacosClient_getServiceNow (2.80s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestDomain_SrvInstances<br>    nacos_domain_test.go:30: Domain.srvInstances weight passed.<br>    nacos_domain_test.go:37: Domain.srvInstances valid passed.<br>--- PASS: TestDomain_SrvInstances (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestGetAllServicesInfo<br>    nacos_grpc_client_test.go:23: GrpcClient <span class=\"hljs-built_in\">get</span> all servicesInfo passed<br>--- PASS: TestGetAllServicesInfo (0.03s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestGetService<br>    nacos_grpc_client_test.go:39: GrpcClient <span class=\"hljs-built_in\">get</span><span class=\"hljs-built_in\"> service </span>passed<br>--- PASS: TestGetService (0.03s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestSubscribe<br>    nacos_grpc_client_test.go:54: GrpcClient subscribe<span class=\"hljs-built_in\"> service </span>passed<br>--- PASS: TestSubscribe (0.03s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestCallback<br>    nacos_grpc_client_test.go:181: GrpcClient<span class=\"hljs-built_in\"> Service </span>SubscribeCallback passed<br>--- PASS: TestCallback (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestServerManager_NextServer<br>    server_manager_test.go:29: ServerManager.NextServer test is passed.<br>--- PASS: TestServerManager_NextServer (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestServerManager_RefreshServerListIfNeed<br>    server_manager_test.go:39: ServerManager.RefreshServerListIfNeed test is passed.<br>--- PASS: TestServerManager_RefreshServerListIfNeed (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosParse<br>init nacos plugin<span class=\"hljs-built_in\">..</span>.<br>init nacos client.<br>    setup_test.go:54: Passed<br>--- PASS: TestNacosParse (1.18s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestUDPServer_StartServer<br>    udp_server_test.go:43: Udp<span class=\"hljs-built_in\"> server </span>test passed.<br>--- PASS: TestUDPServer_StartServer (0.02s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestTryDecompressData<br>    util_and_comms_test.go:32: Gzip test is passed.<br>--- PASS: TestTryDecompressData (0.00s)<br>PASS<br>ok  \tnacos-coredns-plugin/nacos\t4.624s<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h4><ol>\n<li>测试机器配置<br>腾讯云轻量应用服务器：CPU2核 内存2G 带宽4M。一般而言，CoreDNS比较吃网卡和CPU，对于硬盘IO的要求并不算特别高（主要取决于写日志的量），对内存占用较低。 </li>\n<li>测试工具<br>本次测试使用bind9出品的一款DNS服务器性能测试的工具queryperf，对DNS服务器进行压测，并对DNS服务器性能进行评估。 </li>\n<li>测试方法<br>使用 queryperf 来对 Coredns-Nacos-Plugin 进行DNS请求，解析在Nacos服务端注册的服务域名。<br>● 本次测试使用的Nacos服务端注册了1000个服务, 共10000个服务实例。</li>\n</ol>\n<p><strong>v1 版本：Nacos v1.x + Coredns v1.6.7</strong><br>● 50000条DNS请求： 三次测试， 平均qps为 209</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">[<span class=\"hljs-string\">Status</span>] <span class=\"hljs-string\">Testing</span> <span class=\"hljs-string\">complete</span><br><br><span class=\"hljs-attr\">Statistics:</span><br><br>  <span class=\"hljs-attr\">Parse input file:</span>     <span class=\"hljs-string\">once</span><br>  <span class=\"hljs-attr\">Ended due to:</span>         <span class=\"hljs-string\">reaching</span> <span class=\"hljs-string\">end</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">file</span><br>  <br>  <span class=\"hljs-attr\">Queries sent:</span>         <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries completed:</span>    <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries lost:</span>         <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-string\">Queries</span> <span class=\"hljs-string\">delayed(?):</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">RTT max:</span>         \t<span class=\"hljs-number\">0.428648</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT min:</span>              <span class=\"hljs-number\">0.000030</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT average:</span>          <span class=\"hljs-number\">0.011961</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT std deviation:</span>    <span class=\"hljs-number\">0.016171</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT out of range:</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">Percentage completed:</span> <span class=\"hljs-number\">100.00</span><span class=\"hljs-string\">%</span><br>  <span class=\"hljs-attr\">Percentage lost:</span>        <span class=\"hljs-number\">0.00</span><span class=\"hljs-string\">%</span><br>  <br>  <span class=\"hljs-attr\">Started at:</span>           <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">15</span><span class=\"hljs-string\">:49:44</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Finished at:</span>          <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">15</span><span class=\"hljs-string\">:53:53</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Ran for:</span>              <span class=\"hljs-number\">249.121087</span> <span class=\"hljs-string\">seconds</span><br>  <br>  <span class=\"hljs-attr\">Queries per second:</span>   <span class=\"hljs-number\">200.705611</span> <span class=\"hljs-string\">qps</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">[<span class=\"hljs-string\">Status</span>] <span class=\"hljs-string\">Testing</span> <span class=\"hljs-string\">complete</span><br><br><span class=\"hljs-attr\">Statistics:</span><br><br>  <span class=\"hljs-attr\">Parse input file:</span>     <span class=\"hljs-string\">once</span><br>  <span class=\"hljs-attr\">Ended due to:</span>         <span class=\"hljs-string\">reaching</span> <span class=\"hljs-string\">end</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">file</span><br>  <br>  <span class=\"hljs-attr\">Queries sent:</span>         <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries completed:</span>    <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries lost:</span>         <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-string\">Queries</span> <span class=\"hljs-string\">delayed(?):</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">RTT max:</span>         \t<span class=\"hljs-number\">0.485871</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT min:</span>              <span class=\"hljs-number\">0.000357</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT average:</span>          <span class=\"hljs-number\">0.011313</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT std deviation:</span>    <span class=\"hljs-number\">0.012731</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT out of range:</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">Percentage completed:</span> <span class=\"hljs-number\">100.00</span><span class=\"hljs-string\">%</span><br>  <span class=\"hljs-attr\">Percentage lost:</span>        <span class=\"hljs-number\">0.00</span><span class=\"hljs-string\">%</span><br>  <br>  <span class=\"hljs-attr\">Started at:</span>           <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">16</span><span class=\"hljs-string\">:24:04</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Finished at:</span>          <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">16</span><span class=\"hljs-string\">:28:10</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Ran for:</span>              <span class=\"hljs-number\">245.988585</span> <span class=\"hljs-string\">seconds</span><br>  <br>  <span class=\"hljs-attr\">Queries per second:</span>   <span class=\"hljs-number\">203.261464</span> <span class=\"hljs-string\">qps</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">[<span class=\"hljs-string\">Status</span>] <span class=\"hljs-string\">Testing</span> <span class=\"hljs-string\">complete</span><br><br><span class=\"hljs-attr\">Statistics:</span><br>  <br>  <span class=\"hljs-attr\">Parse input file:</span>     <span class=\"hljs-string\">once</span><br>  <span class=\"hljs-attr\">Ended due to:</span>         <span class=\"hljs-string\">reaching</span> <span class=\"hljs-string\">end</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">file</span><br>  <br>  <span class=\"hljs-attr\">Queries sent:</span>         <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries completed:</span>    <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries lost:</span>         <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-string\">Queries</span> <span class=\"hljs-string\">delayed(?):</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">RTT max:</span>         \t<span class=\"hljs-number\">0.082733</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT min:</span>              <span class=\"hljs-number\">0.000019</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT average:</span>          <span class=\"hljs-number\">0.006520</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT std deviation:</span>    <span class=\"hljs-number\">0.001705</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT out of range:</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">Percentage completed:</span> <span class=\"hljs-number\">100.00</span><span class=\"hljs-string\">%</span><br>  <span class=\"hljs-attr\">Percentage lost:</span>        <span class=\"hljs-number\">0.00</span><span class=\"hljs-string\">%</span><br>  <br>  <span class=\"hljs-attr\">Started at:</span>           <span class=\"hljs-string\">Wed</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">20</span><span class=\"hljs-string\">:43:30</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Finished at:</span>          <span class=\"hljs-string\">Wed</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">20</span><span class=\"hljs-string\">:47:12</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Ran for:</span>              <span class=\"hljs-number\">222.443603</span> <span class=\"hljs-string\">seconds</span><br>  <br>  <span class=\"hljs-attr\">Queries per second:</span>   <span class=\"hljs-number\">224.776075</span> <span class=\"hljs-string\">qps</span><br></code></pre></td></tr></table></figure>\n\n\n<p><strong>v2版本： Nacos2.1.1 + Coredns 1.9.3</strong><br>50000条DNS请求，三次测试平均qps为：467</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">[<span class=\"hljs-string\">Status</span>] <span class=\"hljs-string\">Testing</span> <span class=\"hljs-string\">complete</span><br><br><span class=\"hljs-attr\">Statistics:</span><br>  <br>  <span class=\"hljs-attr\">Parse input file:</span>     <span class=\"hljs-string\">once</span><br>  <span class=\"hljs-attr\">Ended due to:</span>         <span class=\"hljs-string\">reaching</span> <span class=\"hljs-string\">end</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">file</span><br>  <br>  <span class=\"hljs-attr\">Queries sent:</span>         <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries completed:</span>    <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries lost:</span>         <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-string\">Queries</span> <span class=\"hljs-string\">delayed(?):</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">RTT max:</span>         \t<span class=\"hljs-number\">0.048039</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT min:</span>              <span class=\"hljs-number\">0.004723</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT average:</span>          <span class=\"hljs-number\">0.006745</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT std deviation:</span>    <span class=\"hljs-number\">0.001731</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT out of range:</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">Percentage completed:</span> <span class=\"hljs-number\">100.00</span><span class=\"hljs-string\">%</span><br>  <span class=\"hljs-attr\">Percentage lost:</span>        <span class=\"hljs-number\">0.00</span><span class=\"hljs-string\">%</span><br>  <br>  <span class=\"hljs-attr\">Started at:</span>           <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">14</span><span class=\"hljs-string\">:48:29</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Finished at:</span>          <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">14</span><span class=\"hljs-string\">:50:17</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Ran for:</span>              <span class=\"hljs-number\">107.771145</span> <span class=\"hljs-string\">seconds</span><br>  <br>  <span class=\"hljs-attr\">Queries per second:</span>   <span class=\"hljs-number\">463.946078</span> <span class=\"hljs-string\">qps</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">[<span class=\"hljs-string\">Status</span>] <span class=\"hljs-string\">Testing</span> <span class=\"hljs-string\">complete</span><br><br><span class=\"hljs-attr\">Statistics:</span><br><br>  <span class=\"hljs-attr\">Parse input file:</span>     <span class=\"hljs-string\">once</span><br>  <span class=\"hljs-attr\">Ended due to:</span>         <span class=\"hljs-string\">reaching</span> <span class=\"hljs-string\">end</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">file</span><br><br>  <span class=\"hljs-attr\">Queries sent:</span>         <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries completed:</span>    <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries lost:</span>         <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-string\">Queries</span> <span class=\"hljs-string\">delayed(?):</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br><br>  <span class=\"hljs-attr\">RTT max:</span>         \t<span class=\"hljs-number\">0.041432</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT min:</span>              <span class=\"hljs-number\">0.003126</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT average:</span>          <span class=\"hljs-number\">0.005235</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT std deviation:</span>    <span class=\"hljs-number\">0.001552</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT out of range:</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br><br>  <span class=\"hljs-attr\">Percentage completed:</span> <span class=\"hljs-number\">100.00</span><span class=\"hljs-string\">%</span><br>  <span class=\"hljs-attr\">Percentage lost:</span>        <span class=\"hljs-number\">0.00</span><span class=\"hljs-string\">%</span><br><br>  <span class=\"hljs-attr\">Started at:</span>           <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">14</span><span class=\"hljs-string\">:52:01</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Finished at:</span>          <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">14</span><span class=\"hljs-string\">:53:49</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Ran for:</span>              <span class=\"hljs-number\">107.977801</span> <span class=\"hljs-string\">seconds</span><br><br>  <span class=\"hljs-attr\">Queries per second:</span>   <span class=\"hljs-number\">463.058143</span> <span class=\"hljs-string\">qps</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">[<span class=\"hljs-string\">Status</span>] <span class=\"hljs-string\">Testing</span> <span class=\"hljs-string\">complete</span><br><br><span class=\"hljs-attr\">Statistics:</span><br>  <br>  <span class=\"hljs-attr\">Parse input file:</span>     <span class=\"hljs-string\">once</span><br>  <span class=\"hljs-attr\">Ended due to:</span>         <span class=\"hljs-string\">reaching</span> <span class=\"hljs-string\">end</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">file</span><br>  <br>  <span class=\"hljs-attr\">Queries sent:</span>         <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries completed:</span>    <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries lost:</span>         <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-string\">Queries</span> <span class=\"hljs-string\">delayed(?):</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">RTT max:</span>         \t<span class=\"hljs-number\">0.039539</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT min:</span>              <span class=\"hljs-number\">0.000980</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT average:</span>          <span class=\"hljs-number\">0.005502</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT std deviation:</span>    <span class=\"hljs-number\">0.001641</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT out of range:</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">Percentage completed:</span> <span class=\"hljs-number\">100.00</span><span class=\"hljs-string\">%</span><br>  <span class=\"hljs-attr\">Percentage lost:</span>        <span class=\"hljs-number\">0.00</span><span class=\"hljs-string\">%</span><br>  <br>  <span class=\"hljs-attr\">Started at:</span>           <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">15</span><span class=\"hljs-string\">:01:28</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Finished at:</span>          <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">15</span><span class=\"hljs-string\">:03:13</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Ran for:</span>              <span class=\"hljs-number\">104.918484</span> <span class=\"hljs-string\">seconds</span><br>  <br>  <span class=\"hljs-attr\">Queries per second:</span>   <span class=\"hljs-number\">476.560450</span> <span class=\"hljs-string\">qps</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"测试总结：\"><a href=\"#测试总结：\" class=\"headerlink\" title=\"测试总结：\"></a>测试总结：</h4><p>经过以上的单元测试和压力测试，新版本的nacos-coredns-plugin插件，在新增的与nacos服务端建立gRPC长连接的功能支持下，插件表现稳定，且DNS请求的 qps 从 209 提升到 467， 得到了接近 223% 的性能增长。</p>\n<h3 id=\"项目完成质量：\"><a href=\"#项目完成质量：\" class=\"headerlink\" title=\"项目完成质量：\"></a>项目完成质量：</h3><p><strong>1． 技术方案评价</strong><br>本次项目致力于让Nacos-CoreDNS模块支持以gRPC长连接方式访问Nacos服务端，具有一定的难度。但是在经过导师指导和讨论后，逐步完成了方案的优化，使得方案的设计更有可靠性和完善性。由于前期技术方案进行了比较严格的分析和策划，所以相对后期的实现而言，改动较少，提高了开发效率；<br><strong>2．项目质量评价</strong><br>经过比较严密的稳定性测试和压力测试，整个插件表现稳定，可以很好的完成题目给的需求。本项目模块化独立开发，与其他模块耦合度小，较为容易进行维护。此插件使用golang语言编写，具有良好的跨平台可移植性。此外，开发进度也能够按照前期的时间规划进行，按时提交了项目产出。</p>\n<h3 id=\"与导师沟通及反馈情况：\"><a href=\"#与导师沟通及反馈情况：\" class=\"headerlink\" title=\"与导师沟通及反馈情况：\"></a>与导师沟通及反馈情况：</h3><p>由于对这个项目比较感兴趣，所以在项目公布早期就与导师进行了沟通联系。在与导师沟通的过程中，得到了许多有用的反馈，帮助我了解了整个项目的详情细节。同时导师也给我了许多建议来对方案进行优化改进。可以说，整个过程中，与指导老师的沟通情况非常的默契。当我遇到困难和问题的时候，指导老师可以主动地为我解决问题，而且还会为我提出更好的建议。我所提出合理的意见，老师也会采取。</p>\n<h3 id=\"我的收获\"><a href=\"#我的收获\" class=\"headerlink\" title=\"我的收获\"></a>我的收获</h3><p>虽然此次项目时间只有三个月，在这期间不一定会让一个人有着翻天覆地的变化，但变化就是这样一点一点产生的，同时也感觉有很大的收获，也帮助找出了自己的不足和需要改进的地方。在遇到问题虚心请教后，从导师的身上能学到自己没有的东西，每一次都会使我更接近成功。还有学会了在开发中与人的合作与交流。<br>在这个项目之前，我对待开发方案和文档这些东西会不太注重，写得比较粗略。但是通过这个项目，我体会到有效详细的方案设计和开发文档，可以很大的提高开发效率，保证项目的可行性和可维护性。<br>代码风格要规范，之前写代码，我都是不怎么去注意代码风格和写代码的规范，都是稍微想一下就直接开始写代码了。注释也很少用，总感觉我们自己写的代码，我们怎么会不知道它做了些什么事呢 ？总觉得我们自己写的代码我们怎么会不知道它是用来做什么的呢。但通过这次项目，我体会到保持规范统一的代码风格的重要性，可以保证代码的可读性，让别人更容易理解自己写的代码。<br>我也借助到这个机会，可以参与开源项目中，积累了相关经验、学习到新的知识。为日后继续参与更多开源项目提供一个经验借鉴。此外我对Nacos非常感兴趣，希望项目结束后也能在Nacos其他方面做一点点贡献。  </p>\n","site":{"data":{}},"wordcount":16533,"excerpt":"","more":"<p><a href=\"https://summer-ospp.ac.cn/#/org/prodetail/22ab10318\">Nacos-CoreDNS模块支持以长连接访问Nacos服务端</a></p>\n<h2 id=\"项目信息\"><a href=\"#项目信息\" class=\"headerlink\" title=\"项目信息\"></a>项目信息</h2><h3 id=\"项目名称：Nacos-CoreDNS模块支持以长连接访问Nacos服务端\"><a href=\"#项目名称：Nacos-CoreDNS模块支持以长连接访问Nacos服务端\" class=\"headerlink\" title=\"项目名称：Nacos-CoreDNS模块支持以长连接访问Nacos服务端\"></a>项目名称：Nacos-CoreDNS模块支持以长连接访问Nacos服务端</h3><h3 id=\"项目产出：\"><a href=\"#项目产出：\" class=\"headerlink\" title=\"项目产出：\"></a>项目产出：</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol>\n<li>设计出Nacos CoreDNS模块支持gRPC的方案，输出详细设计文档；</li>\n</ol>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol start=\"2\">\n<li>根据设计文档，对Nacos CoreDNS模块进行开发；</li>\n</ol>\n</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <ol start=\"3\">\n<li>提供新Nacos CoreDNS模块的使用示例和文档。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"方案描述：\"><a href=\"#方案描述：\" class=\"headerlink\" title=\"方案描述：\"></a>方案描述：</h3><p>当前 Nacos-CoreDNS-Plugin 插件是通过HTTP短连接方式调用Nacos服务端的 API 来请求获取nacos服务端的资源信息。 而在nacos版本v2.x后，原来v1.x版本的API已经被移除，替换成了建立gRPC连接的方式通过gRPC请求来访问获取nacos服务端的资源信息。<br>因此本项目的方案可以参考Nacos-go-sdk与Nacos服务器的通信方式，在Nacos-coredns-plugin内导入Nacos-sdk-go相关功能，封装成新的grpc通信模块，实现nacos-coredns插件与nacos服务器的通信。<br>例如，通过nacos-go-sdk来调用GetAllServicesInfo、GetService等方法，就能获取所有服务或某个具体服务的信息（ip、port…），这些数据可以覆盖nacos v1版本api传输的数据，因此只需要对从nacos服务端获取的数据转成对应coredns插件需要的数据结构即可。</p>\n<h4 id=\"核心方法\"><a href=\"#核心方法\" class=\"headerlink\" title=\"核心方法\"></a>核心方法</h4><ol>\n<li>构建客户端：通过在coredns插件中导入nacos-go-sdk&#x2F;v2包，搭建一个nacos-coredns插件和nacos服务通信的客户端 </li>\n<li>根据插件的资源需求，封装sdk方法， 完成通信中的数据交换：</li>\n</ol>\n<ul>\n<li>GetAllServicesInfo: 请求获取Nacos服务端里注册的所有服务名</li>\n<li>GetService:  请求获取Nacos服务端某个服务的具体信息</li>\n<li>Subscribe:   订阅Nacos服务端某个服务</li>\n<li>Unsubsrcibe: 取消订阅Nacos服务端某个服务</li>\n<li>Callback:    当Nacos服务端的订阅服务发生改变时，通过回调函数更新客户端的服务数据</li>\n<li>HasSubcribed: 记录当前服务是否订阅，避免重复订阅</li>\n</ul>\n<ol start=\"3\">\n<li>替换原来插件的数据结构：原来的nacos-coredns插件的数据结构与新版nacos服务端gRPC请求返回的数据结构冲突不兼容，需要放弃原来的数据结构，更新为新版的数据结构。</li>\n</ol>\n<p><strong>grpc客户端的类设计图</strong><br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1664196977944-f4258097-3823-4984-8814-4cae3ed8cdb1.png#clientId=u4ceca8f8-239f-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=ui&id=n1TAW&name=NacosGrpcClient.drawio.png&originHeight=277&originWidth=922&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26579&status=error&style=none&taskId=uc9eeb30f-459a-4007-af54-8999825ae82&title=\" alt=\"NacosGrpcClient.drawio.png\"></p>\n<h4 id=\"grpc通信流程设计\"><a href=\"#grpc通信流程设计\" class=\"headerlink\" title=\"grpc通信流程设计\"></a>grpc通信流程设计</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1664196982731-98f47454-b143-4968-a2e8-223d287d106e.png#clientId=u4ceca8f8-239f-4&crop=0&crop=0&crop=1&crop=1&errorMessage=unknown%20error&from=ui&id=ua814f7c3&name=grpc-design.png&originHeight=373&originWidth=1053&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42662&status=error&style=none&taskId=ubb61ba78-774d-4f31-b5f6-4763e61ae42&title=\" alt=\"grpc-design.png\"><br>1、启动nacos-coredns插件时，同时启动插件与nacos服务器的grpc通信客户端（nacos_grpc_client）。<br>2、grpc通信客户端调用了Nacos-go-sdk&#x2F;v2中实现的方法，从nacos服务器集群中获取一个服务器的IP地址和端口并建立TCP连接。HTTP&#x2F;2下，同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应。<br>3、nacos-coredns插件向Nacos服务器请求资源时，通过grpc通信客户端来调用nacos-go-sdk&#x2F;v2封装的GetAllServicesInfo、GetService等方法来获取所有服务或某个具体服务的信息详情（ip、port…）。<br>4、grpc通信客户端将从nacos服务器里获取到的数据存入nacos-coredns插件的数据缓存中，待插件处理DNS请求时输出数据。<br>5、对grpc通信客户端设置 超时时间 与 重试次数 等措施来避免调用超时、 阻塞等情况。</p>\n<h3 id=\"方案具体实现：\"><a href=\"#方案具体实现：\" class=\"headerlink\" title=\"方案具体实现：\"></a>方案具体实现：</h3><h4 id=\"一、-构建客户端\"><a href=\"#一、-构建客户端\" class=\"headerlink\" title=\"一、 构建客户端\"></a>一、 构建客户端</h4><p>在 Nacos-CoreDNS-Plugin 插件中导入nacos-go-sdk&#x2F;v2包， 来与要访问的nacos服务端集群建立gRPC连接。<br>与nacos服务端建立gRPC需要两个参数  <strong>clientConfig</strong> 和  <strong>serverConfig</strong>. </p>\n<ul>\n<li><p>clientConfig 是针对本项目作为向服务端请求资源的客户端 来配置 对nacos服务端的 NamespaceId 请求超时TimeoutMs 日志目录LogDir 数据缓存目录CacheDir</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">nacosGrpcClient.clientConfig = *constant.NewClientConfig(<br>        constant.WithNamespaceId(namespaceId),<br>        constant.WithTimeoutMs(<span class=\"hljs-number\">5000</span>),<br>        constant.WithLogDir(LogPath),<br>        constant.WithCacheDir(CachePath),<br>        constant.WithNotLoadCacheAtStart(<span class=\"hljs-literal\">true</span>),<br>        constant.WithUpdateCacheWhenEmpty(<span class=\"hljs-literal\">true</span>),<br>        constant.WithLogLevel(<span class=\"hljs-string\">&quot;debug&quot;</span>),<br>)<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>serverConfig 指定服务端集群的Ip地址和端口</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">serverConfigs := <span class=\"hljs-built_in\">make</span>([]constant.ServerConfig, <span class=\"hljs-built_in\">len</span>(serverHosts))<br><span class=\"hljs-keyword\">for</span> i, serverHost := <span class=\"hljs-keyword\">range</span> serverHosts &#123;<br>        serverIp := strings.Split(serverHost, <span class=\"hljs-string\">&quot;:&quot;</span>)[<span class=\"hljs-number\">0</span>]<br>        serverPort, err := strconv.Atoi(strings.Split(serverHost, <span class=\"hljs-string\">&quot;:&quot;</span>)[<span class=\"hljs-number\">1</span>])<br>        <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>            NacosClientLogger.Error(<span class=\"hljs-string\">&quot;nacos server host config error!&quot;</span>, err)<br>        &#125;<br>        serverConfigs[i] = *constant.NewServerConfig(<br>            serverIp,<br>            <span class=\"hljs-type\">uint64</span>(serverPort),<br>            constant.WithScheme(<span class=\"hljs-string\">&quot;http&quot;</span>),<br>            constant.WithContextPath(<span class=\"hljs-string\">&quot;/nacos&quot;</span>),<br>        )<br><br>    &#125;<br>nacosGrpcClient.serverConfigs = serverConfigs<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>配置完成后， 连接建立， 通过此客户端来进行通信</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">nacosGrpcClient.grpcClient, err = clients.NewNamingClient(<br>    vo.NacosClientParam&#123;<br>        ClientConfig:  &amp;nacosGrpcClient.clientConfig,<br>        ServerConfigs: nacosGrpcClient.serverConfigs,<br>    &#125;,<br>)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"二、-客户端的主要功能\"><a href=\"#二、-客户端的主要功能\" class=\"headerlink\" title=\"二、 客户端的主要功能\"></a>二、 客户端的主要功能</h4><h4 id=\"根据插件的资源需求，封装sdk方法，-完成通信中的数据交换。\"><a href=\"#根据插件的资源需求，封装sdk方法，-完成通信中的数据交换。\" class=\"headerlink\" title=\"根据插件的资源需求，封装sdk方法， 完成通信中的数据交换。\"></a>根据插件的资源需求，封装sdk方法， 完成通信中的数据交换。</h4><ol>\n<li><p>GetAllServicesInfo:  对应v1版本的API(&#x2F;v1&#x2F;ns&#x2F;api&#x2F;allDomNames)，通过封装sdk的方法，获取在nacos里注册的所有服务名。\t\t\t </p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ngc *NacosGrpcClient)</span></span> GetAllServicesInfo() []<span class=\"hljs-type\">string</span> &#123;<br>    <span class=\"hljs-keyword\">var</span> pageNo = <span class=\"hljs-type\">uint32</span>(<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">var</span> pageSize = <span class=\"hljs-type\">uint32</span>(<span class=\"hljs-number\">100</span>)<br>    <span class=\"hljs-keyword\">var</span> services []<span class=\"hljs-type\">string</span><br><br>    pageServiceList, _ := ngc.grpcClient.GetAllServicesInfo(vo.GetAllServiceInfoParam&#123;<br>        NameSpace: ngc.namespaceId,<br>        PageNo:    pageNo,<br>        PageSize:  pageSize,<br>    &#125;)<br>    services = <span class=\"hljs-built_in\">append</span>(services, pageServiceList.Doms...)<br><br>    <span class=\"hljs-comment\">// 如果当前页数服务数满了, 继续查找添加下一页</span><br>\t<span class=\"hljs-keyword\">for</span> pageNo++; <span class=\"hljs-built_in\">len</span>(pageServiceList.Doms) &gt;= <span class=\"hljs-type\">int</span>(pageSize); pageNo++ &#123;<br>        pageServiceList, _ = ngc.grpcClient.GetAllServicesInfo(vo.GetAllServiceInfoParam&#123;<br>            NameSpace: ngc.namespaceId,<br>            PageNo:    pageNo,<br>            PageSize:  pageSize,<br>        &#125;)<br>        services = <span class=\"hljs-built_in\">append</span>(services, pageServiceList.Doms...)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> services<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>GetService:  对应v1版本的API(&#x2F;v1&#x2F;ns&#x2F;api&#x2F;srvIPXT)，输入服务名，通过gRPC请求获该服务的具体信息。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ngc *NacosGrpcClient)</span></span> GetService(serviceName <span class=\"hljs-type\">string</span>) model.Service &#123;<br>    service, _ := ngc.grpcClient.GetService(vo.GetServiceParam&#123;<br>        ServiceName: serviceName,<br>    &#125;)<br>    <span class=\"hljs-keyword\">if</span> service.Hosts == <span class=\"hljs-literal\">nil</span> &#123;<br>        NacosClientLogger.Warn(<span class=\"hljs-string\">&quot;empty result from server, dom:&quot;</span> + serviceName)<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> service<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Subscribe:  订阅Nacos服务端某个服务， 封装sdk中订阅服务的方法，输入服务名，通过gRPC连接完成对该服务的订阅来更新服务数据。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ngc *NacosGrpcClient)</span></span> Subscribe(serviceName <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">error</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> ngc.HasSubcribed(serviceName) &#123;<br>        NacosClientLogger.Info(<span class=\"hljs-string\">&quot;service &quot;</span> + serviceName + <span class=\"hljs-string\">&quot; already subsrcibed.&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>    &#125;<br>    param := &amp;vo.SubscribeParam&#123;<br>        ServiceName:       serviceName,<br>        GroupName:         <span class=\"hljs-string\">&quot;&quot;</span>,<br>        SubscribeCallback: ngc.Callback,<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> err := ngc.grpcClient.Subscribe(param); err != <span class=\"hljs-literal\">nil</span> &#123;<br>        NacosClientLogger.Error(<span class=\"hljs-string\">&quot;service subscribe error &quot;</span> + serviceName)<br>        <span class=\"hljs-keyword\">return</span> err<br>    &#125;<br><br>    <span class=\"hljs-keyword\">defer</span> ngc.SubscribeMap.DLock.Unlock()<br>    ngc.SubscribeMap.DLock.Lock()<br>    ngc.SubscribeMap.Data[serviceName] = <span class=\"hljs-literal\">true</span><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Unsubsrcibe:  取消订阅Nacos服务端某个服务， 封装了sdk中取消订阅服务的方法。当服务下线时，通过gRPC连接来取消该服务的订阅。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ngc *NacosGrpcClient)</span></span> Unsubsrcibe(serviceName <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">error</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> !ngc.HasSubcribed(serviceName) &#123;<br>        NacosClientLogger.Info(<span class=\"hljs-string\">&quot;service &quot;</span> + serviceName + <span class=\"hljs-string\">&quot; already unsubsrcibed.&quot;</span>)<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>    &#125;<br>    param := &amp;vo.SubscribeParam&#123;<br>        ServiceName:       serviceName,<br>        GroupName:         <span class=\"hljs-string\">&quot;&quot;</span>,<br>        SubscribeCallback: ngc.Callback,<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> err := ngc.grpcClient.Unsubscribe(param); err != <span class=\"hljs-literal\">nil</span> &#123;<br>        NacosClientLogger.Error(<span class=\"hljs-string\">&quot;service unsubscribe error &quot;</span> + serviceName)<br>        <span class=\"hljs-keyword\">return</span> err<br>    &#125;<br><br>    <span class=\"hljs-keyword\">defer</span> ngc.SubscribeMap.DLock.Unlock()<br>    ngc.SubscribeMap.DLock.Lock()<br>    ngc.SubscribeMap.Data[serviceName] = <span class=\"hljs-literal\">false</span><br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>Callback:  当Nacos服务端的订阅服务发生改变时，通过回调函数更新客户端的服务数据。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ngc *NacosGrpcClient)</span></span> Callback(instances []model.Instance, err <span class=\"hljs-type\">error</span>) &#123;<br>    <span class=\"hljs-comment\">//服务下线,更新实例数量为0</span><br>    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(instances) == <span class=\"hljs-number\">0</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> serviceName, _ := <span class=\"hljs-keyword\">range</span> AllDoms.Data &#123;<br>            <span class=\"hljs-keyword\">if</span> service := ngc.GetService(serviceName); <span class=\"hljs-built_in\">len</span>(service.Hosts) == <span class=\"hljs-number\">0</span> &#123;<br>                ngc.nacosClient.GetDomainCache().Set(serviceName, service)<br>                ngc.Unsubsrcibe(serviceName)<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span><br>    &#125;<br>    serviceName := strings.Split(instances[<span class=\"hljs-number\">0</span>].ServiceName, SEPERATOR)[<span class=\"hljs-number\">1</span>]<br>    oldService, ok := ngc.nacosClient.GetDomainCache().Get(serviceName)<br>    <span class=\"hljs-keyword\">if</span> !ok &#123;<br>        NacosClientLogger.Info(<span class=\"hljs-string\">&quot;service not found in cache &quot;</span> + serviceName)<br>        service := ngc.GetService(serviceName)<br>        ngc.nacosClient.GetDomainCache().Set(serviceName, service)<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        service := oldService.(model.Service)<br>        service.Hosts = instances<br>        service.LastRefTime = <span class=\"hljs-type\">uint64</span>(CurrentMillis())<br>        ngc.nacosClient.GetDomainCache().Set(serviceName, service)<br>    &#125;<br>    NacosClientLogger.Info(<span class=\"hljs-string\">&quot;serviceName: &quot;</span>+serviceName+<span class=\"hljs-string\">&quot; was updated to: &quot;</span>, instances)<br>&#125;<br></code></pre></td></tr></table></figure>\n</li>\n<li><p>HasSubcribed:  记录当前服务是否订阅，避免重复订阅。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(ngc *NacosGrpcClient)</span></span> HasSubcribed(serviceName <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">bool</span> &#123;<br>    <span class=\"hljs-keyword\">defer</span> ngc.SubscribeMap.DLock.RUnlock()<br>    ngc.SubscribeMap.DLock.RLock()<br>    <span class=\"hljs-keyword\">return</span> ngc.SubscribeMap.Data[serviceName]<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"三、-替换原来插件的数据结构\"><a href=\"#三、-替换原来插件的数据结构\" class=\"headerlink\" title=\"三、 替换原来插件的数据结构\"></a>三、 替换原来插件的数据结构</h4><p>将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构<br>将v1版本的数据结构 Domain替换为Service, 并更新 Instance 的结构。<br>旧的定义：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Domain <span class=\"hljs-keyword\">struct</span> &#123;<br>    Name          <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;dom&quot;`</span><br>    Clusters      <span class=\"hljs-type\">string</span><br>    CacheMillis   <span class=\"hljs-type\">int64</span><br>    LastRefMillis <span class=\"hljs-type\">int64</span><br>    Instances     []Instance <span class=\"hljs-string\">`json:&quot;hosts&quot;`</span><br>    Env           <span class=\"hljs-type\">string</span><br>    TTL           <span class=\"hljs-type\">int</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Instance <span class=\"hljs-keyword\">struct</span> &#123;<br>    IP         <span class=\"hljs-type\">string</span><br>    Port       <span class=\"hljs-type\">int</span><br>    Weight     <span class=\"hljs-type\">float64</span><br>    Valid      <span class=\"hljs-type\">bool</span><br>    Unit       <span class=\"hljs-type\">string</span><br>    AppUseType <span class=\"hljs-type\">string</span><br>    Site       <span class=\"hljs-type\">string</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<p>新的替换：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Service <span class=\"hljs-keyword\">struct</span> &#123;<br>    CacheMillis              <span class=\"hljs-type\">uint64</span>     <span class=\"hljs-string\">`json:&quot;cacheMillis&quot;`</span><br>    Hosts                    []Instance <span class=\"hljs-string\">`json:&quot;hosts&quot;`</span><br>    Checksum                 <span class=\"hljs-type\">string</span>     <span class=\"hljs-string\">`json:&quot;checksum&quot;`</span><br>    LastRefTime              <span class=\"hljs-type\">uint64</span>     <span class=\"hljs-string\">`json:&quot;lastRefTime&quot;`</span><br>    Clusters                 <span class=\"hljs-type\">string</span>     <span class=\"hljs-string\">`json:&quot;clusters&quot;`</span><br>    Name                     <span class=\"hljs-type\">string</span>     <span class=\"hljs-string\">`json:&quot;name&quot;`</span><br>    GroupName                <span class=\"hljs-type\">string</span>     <span class=\"hljs-string\">`json:&quot;groupName&quot;`</span><br>    Valid                    <span class=\"hljs-type\">bool</span>       <span class=\"hljs-string\">`json:&quot;valid&quot;`</span><br>    AllIPs                   <span class=\"hljs-type\">bool</span>       <span class=\"hljs-string\">`json:&quot;allIPs&quot;`</span><br>    ReachProtectionThreshold <span class=\"hljs-type\">bool</span>       <span class=\"hljs-string\">`json:&quot;reachProtectionThreshold&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Instance <span class=\"hljs-keyword\">struct</span> &#123;<br>    InstanceId                <span class=\"hljs-type\">string</span>            <span class=\"hljs-string\">`json:&quot;instanceId&quot;`</span><br>    Ip                        <span class=\"hljs-type\">string</span>            <span class=\"hljs-string\">`json:&quot;ip&quot;`</span><br>    Port                      <span class=\"hljs-type\">uint64</span>            <span class=\"hljs-string\">`json:&quot;port&quot;`</span><br>    Weight                    <span class=\"hljs-type\">float64</span>           <span class=\"hljs-string\">`json:&quot;weight&quot;`</span><br>    Healthy                   <span class=\"hljs-type\">bool</span>              <span class=\"hljs-string\">`json:&quot;healthy&quot;`</span><br>    Enable                    <span class=\"hljs-type\">bool</span>              <span class=\"hljs-string\">`json:&quot;enabled&quot;`</span><br>    Ephemeral                 <span class=\"hljs-type\">bool</span>              <span class=\"hljs-string\">`json:&quot;ephemeral&quot;`</span><br>    ClusterName               <span class=\"hljs-type\">string</span>            <span class=\"hljs-string\">`json:&quot;clusterName&quot;`</span><br>    ServiceName               <span class=\"hljs-type\">string</span>            <span class=\"hljs-string\">`json:&quot;serviceName&quot;`</span><br>    Metadata                  <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;metadata&quot;`</span><br>    InstanceHeartBeatInterval <span class=\"hljs-type\">int</span>               <span class=\"hljs-string\">`json:&quot;instanceHeartBeatInterval&quot;`</span><br>    IpDeleteTimeout           <span class=\"hljs-type\">int</span>               <span class=\"hljs-string\">`json:&quot;ipDeleteTimeout&quot;`</span><br>    InstanceHeartBeatTimeOut  <span class=\"hljs-type\">int</span>               <span class=\"hljs-string\">`json:&quot;instanceHeartBeatTimeOut&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"时间规划\"><a href=\"#时间规划\" class=\"headerlink\" title=\"时间规划\"></a>时间规划</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 7.01 - 7.14  复用Nacos-Sdk-Go，构建一个简易的Nacos-go客户端与Nacos服务器实现gRPC的通信方式，来熟悉Nacos的go开发，改进设计文档。  </li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 7.15 - 7.31  借助前面的开发文档和经验，尝试在Nacos-CoreDNS-plugin中添加 grpc客户端模块，建立与 Nacos服务端的gRPC通信。</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 8.01 - 8.14  对 Nacos-CoreDNS 插件与Nacos服务端的连接进行细节的优化，保证连接的稳定性。</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 8.15 - 8.30  编写单元测试，对新的连接进行性能测试，主要是对比同一个接口在gRPC连接和短连接两种模式下的响应时间和吞吐量进行压力测试。  </li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 9.01 - 9.14  编写新Nacos CoreDNS模块的使用示例和文档。  </li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 9.15 - 9.30  对整个项目进行梳理，提交PR，编写项目终期报告。</li>\n</ul>\n<h2 id=\"项目总结\"><a href=\"#项目总结\" class=\"headerlink\" title=\"项目总结\"></a>项目总结</h2><h3 id=\"遇到的问题及解决方案：\"><a href=\"#遇到的问题及解决方案：\" class=\"headerlink\" title=\"遇到的问题及解决方案：\"></a>遇到的问题及解决方案：</h3><h4 id=\"1-nacos旧版本升级到新版本后，原来的API被移除了。\"><a href=\"#1-nacos旧版本升级到新版本后，原来的API被移除了。\" class=\"headerlink\" title=\"1. nacos旧版本升级到新版本后，原来的API被移除了。\"></a>1. nacos旧版本升级到新版本后，原来的API被移除了。</h4><p>原来的 Nacos-CoreDNS-Plugin 插件是通过HTTP短连接方式调用Nacos服务端的 API 来请求获取nacos服务端的资源信息。 而在nacos版本v2.x后，原来v1.x版本的API已经被移除，替换成了建立gRPC连接的方式通过gRPC请求来访问获取nacos服务端的资源信息。 因此，可以参考Nacos-go-sdk提供的与Nacos服务器的通信方法，在Nacos-coredns-plugin内导入Nacos-sdk-go相关功能，封装成新的grpc通信模块，实现nacos-coredns插件与nacos服务器的通信。</p>\n<h4 id=\"2-数据缓存问题\"><a href=\"#2-数据缓存问题\" class=\"headerlink\" title=\"2. 数据缓存问题\"></a>2. 数据缓存问题</h4><p>原来coredns插件的服务数据是缓存在 &#x2F;root&#x2F;nacos-go-client-cache&#x2F; 目录中，且每次更新数据都会将数据写入到文件中，造成的io资源消耗较大。<br>而nacos-sdk-go中自带了对服务的缓存默认是在 &#x2F;tmp&#x2F;nacos&#x2F;cache&#x2F; 目录中，这些缓存的数据都是在插件启动的时候加载的，两者的功能产生了重叠。因此，将原来的nacos-coredns-plugin的缓存功能移除，让nacos-sdk-go管理服务数据的缓存。 </p>\n<h4 id=\"3-数据更新问题\"><a href=\"#3-数据更新问题\" class=\"headerlink\" title=\"3. 数据更新问题\"></a>3. 数据更新问题</h4><p>目前nacos-coredns-plugin数据的更新是通过两个goruntime定时向服务器请求来更新数据, 当服务数据频繁变化时，无法及时更新客户端的数据。<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1658123188046-9eba3156-f960-415f-bd84-68a586dbc189.png#crop=0&crop=0&crop=1&crop=1&id=GKReH&originHeight=711&originWidth=841&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"><br>nacos-sdk-go中提供了Subscribe服务订阅的功能。对某个服务进行订阅后，服务的实例发生改变时会调用客户端定义的回调函数callback。因此，将数据更新的流程调整为：定时从服务器获取所有服务名, 当某个服务接受到DNS请求时，对此服务进行订阅。 当Nacos服务端的订阅服务发生改变时，通过回调函数更新客户端的服务数据。 </p>\n<h4 id=\"4-编译问题\"><a href=\"#4-编译问题\" class=\"headerlink\" title=\"4. 编译问题\"></a>4. 编译问题</h4><p>coredns v1.6.7 与 nacos-sdk-go&#x2F;v2 的grpc版本不兼容， 编译时会产生报错。<br>将 nacos-coredns-plugin 原来的 coredns v1.6.7 版本更新到最新的v1.9.3版本，解决原来coredns与nacos-sdk-go的 gRPC版本冲突问题。 </p>\n<h3 id=\"项目测试：\"><a href=\"#项目测试：\" class=\"headerlink\" title=\"项目测试：\"></a>项目测试：</h3><h4 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h4><p>在原来的v1.6.7分支上，修改2个测试用例，新增5个测试用例</p>\n<ol>\n<li><p>测试用例一：TestNacosClient_getAllServiceNames<br>● 预期结果：获取Nacos服务端里注册的所有服务名并存入AllDoms<br>● 实际结果：成功获取Nacos服务端里注册的所有服务名并存入AllDoms<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235900753-b4c1b719-bd97-484d-85c3-7b4cc2857858.png#crop=0&crop=0&crop=1&crop=1&id=o7c3j&originHeight=100&originWidth=800&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n</li>\n<li><p>测试用例二：TestNacosClient_getDomNow<br>● 预期结果：获取Nacos服务端里某个服务的具体信息并存入缓存中<br>● 实际结果：成功获取Nacos服务端里某个服务的具体信息并存入缓存中<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235907742-ff276893-12f7-422d-b68b-11de9009295f.png#crop=0&crop=0&crop=1&crop=1&id=SWIpv&originHeight=105&originWidth=799&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n</li>\n<li><p>测试用例三：TestGetAllServicesInfo<br>● 预期结果：gRPC请求获取Nacos服务端里注册的所有服务名<br>● 实际结果：成功通过gRPC请求获取Nacos服务端里注册的所有服务名<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235912610-bb19fa61-93a4-4e7e-a426-883ec6ac702d.png#crop=0&crop=0&crop=1&crop=1&id=IZjR3&originHeight=101&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n</li>\n<li><p>测试用例四：TestGetService<br>● 预期结果：gRPC请求获取Nacos服务端某个服务的具体信息<br>● 实际结果：成功通过gRPC请求获取Nacos服务端某个服务的具体信息<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235917042-499d4924-c2b3-4f08-9cc3-7f7439904553.png#crop=0&crop=0&crop=1&crop=1&id=MH0ma&originHeight=95&originWidth=799&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n</li>\n<li><p>测试用例五：TestSubscribe<br>● 预期结果：gRPC订阅Nacos服务端某个服务<br>● 实际结果：成功通过gRPC订阅Nacos服务端某个服务<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235925262-741dbe46-6a47-47dc-afbc-83f08403853b.png#crop=0&crop=0&crop=1&crop=1&id=dGoe9&originHeight=88&originWidth=800&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n</li>\n<li><p>测试用例六：TestCallback<br>● 预期结果：当Nacos服务端服务发生改变时，通过回调函数更新客户端的服务数据<br>● 实际结果：当Nacos服务端服务发生改变时，成功通过回调函数更新客户端的服务数据<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235933413-c05baf72-43a3-4a0d-8f99-a817cd6cc6f9.png#crop=0&crop=0&crop=1&crop=1&id=ApssP&originHeight=97&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n</li>\n<li><p>测试用例七：TestNacosParse<br>● 预期结果：通过配置文件配置Nacos服务器的 NamespaceId 和 ip地址和端口 .<br>● 实际结果：成功配置Nacos服务器的 NamespaceId 和 ip地址和端口 .<br><img src=\"https://cdn.nlark.com/yuque/0/2022/png/29425667/1663235941664-68c7fca4-c643-4b0a-bacc-b6bee6f0f2db.png#crop=0&crop=0&crop=1&crop=1&id=mwKYF&originHeight=163&originWidth=828&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n</li>\n</ol>\n<p><strong>所有测试用例运行结果</strong></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">=== <span class=\"hljs-built_in\">RUN</span>   TestDnsCache_Updated<br>    dns_cache_test.go:26: Out of date test is passed<br>    dns_cache_test.go:32: Updated is passed.<br>--- PASS: TestDnsCache_Updated (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestGet<br>    httpclient_test.go:40: Success <span class=\"hljs-keyword\">to</span> test http<span class=\"hljs-built_in\"> client </span><span class=\"hljs-built_in\">get</span><br>--- PASS: TestGet (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosClient_GetDomain<br>--- PASS: TestNacosClient_GetDomain (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosClient_getAllServiceNames<br>    nacos_client_test.go:75: <span class=\"hljs-built_in\">Get</span> all serviceName <span class=\"hljs-keyword\">from</span> servers passed<br>--- PASS: TestNacosClient_getAllServiceNames (0.05s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosClient_getServiceNow<br>    nacos_client_test.go:100: <span class=\"hljs-built_in\">Get</span> all servicesInfo <span class=\"hljs-keyword\">from</span> servers passed<br>--- PASS: TestNacosClient_getServiceNow (2.80s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestDomain_SrvInstances<br>    nacos_domain_test.go:30: Domain.srvInstances weight passed.<br>    nacos_domain_test.go:37: Domain.srvInstances valid passed.<br>--- PASS: TestDomain_SrvInstances (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestGetAllServicesInfo<br>    nacos_grpc_client_test.go:23: GrpcClient <span class=\"hljs-built_in\">get</span> all servicesInfo passed<br>--- PASS: TestGetAllServicesInfo (0.03s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestGetService<br>    nacos_grpc_client_test.go:39: GrpcClient <span class=\"hljs-built_in\">get</span><span class=\"hljs-built_in\"> service </span>passed<br>--- PASS: TestGetService (0.03s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestSubscribe<br>    nacos_grpc_client_test.go:54: GrpcClient subscribe<span class=\"hljs-built_in\"> service </span>passed<br>--- PASS: TestSubscribe (0.03s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestCallback<br>    nacos_grpc_client_test.go:181: GrpcClient<span class=\"hljs-built_in\"> Service </span>SubscribeCallback passed<br>--- PASS: TestCallback (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestServerManager_NextServer<br>    server_manager_test.go:29: ServerManager.NextServer test is passed.<br>--- PASS: TestServerManager_NextServer (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestServerManager_RefreshServerListIfNeed<br>    server_manager_test.go:39: ServerManager.RefreshServerListIfNeed test is passed.<br>--- PASS: TestServerManager_RefreshServerListIfNeed (0.00s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestNacosParse<br>init nacos plugin<span class=\"hljs-built_in\">..</span>.<br>init nacos client.<br>    setup_test.go:54: Passed<br>--- PASS: TestNacosParse (1.18s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestUDPServer_StartServer<br>    udp_server_test.go:43: Udp<span class=\"hljs-built_in\"> server </span>test passed.<br>--- PASS: TestUDPServer_StartServer (0.02s)<br>=== <span class=\"hljs-built_in\">RUN</span>   TestTryDecompressData<br>    util_and_comms_test.go:32: Gzip test is passed.<br>--- PASS: TestTryDecompressData (0.00s)<br>PASS<br>ok  \tnacos-coredns-plugin/nacos\t4.624s<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"压力测试\"><a href=\"#压力测试\" class=\"headerlink\" title=\"压力测试\"></a>压力测试</h4><ol>\n<li>测试机器配置<br>腾讯云轻量应用服务器：CPU2核 内存2G 带宽4M。一般而言，CoreDNS比较吃网卡和CPU，对于硬盘IO的要求并不算特别高（主要取决于写日志的量），对内存占用较低。 </li>\n<li>测试工具<br>本次测试使用bind9出品的一款DNS服务器性能测试的工具queryperf，对DNS服务器进行压测，并对DNS服务器性能进行评估。 </li>\n<li>测试方法<br>使用 queryperf 来对 Coredns-Nacos-Plugin 进行DNS请求，解析在Nacos服务端注册的服务域名。<br>● 本次测试使用的Nacos服务端注册了1000个服务, 共10000个服务实例。</li>\n</ol>\n<p><strong>v1 版本：Nacos v1.x + Coredns v1.6.7</strong><br>● 50000条DNS请求： 三次测试， 平均qps为 209</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">[<span class=\"hljs-string\">Status</span>] <span class=\"hljs-string\">Testing</span> <span class=\"hljs-string\">complete</span><br><br><span class=\"hljs-attr\">Statistics:</span><br><br>  <span class=\"hljs-attr\">Parse input file:</span>     <span class=\"hljs-string\">once</span><br>  <span class=\"hljs-attr\">Ended due to:</span>         <span class=\"hljs-string\">reaching</span> <span class=\"hljs-string\">end</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">file</span><br>  <br>  <span class=\"hljs-attr\">Queries sent:</span>         <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries completed:</span>    <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries lost:</span>         <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-string\">Queries</span> <span class=\"hljs-string\">delayed(?):</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">RTT max:</span>         \t<span class=\"hljs-number\">0.428648</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT min:</span>              <span class=\"hljs-number\">0.000030</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT average:</span>          <span class=\"hljs-number\">0.011961</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT std deviation:</span>    <span class=\"hljs-number\">0.016171</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT out of range:</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">Percentage completed:</span> <span class=\"hljs-number\">100.00</span><span class=\"hljs-string\">%</span><br>  <span class=\"hljs-attr\">Percentage lost:</span>        <span class=\"hljs-number\">0.00</span><span class=\"hljs-string\">%</span><br>  <br>  <span class=\"hljs-attr\">Started at:</span>           <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">15</span><span class=\"hljs-string\">:49:44</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Finished at:</span>          <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">15</span><span class=\"hljs-string\">:53:53</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Ran for:</span>              <span class=\"hljs-number\">249.121087</span> <span class=\"hljs-string\">seconds</span><br>  <br>  <span class=\"hljs-attr\">Queries per second:</span>   <span class=\"hljs-number\">200.705611</span> <span class=\"hljs-string\">qps</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">[<span class=\"hljs-string\">Status</span>] <span class=\"hljs-string\">Testing</span> <span class=\"hljs-string\">complete</span><br><br><span class=\"hljs-attr\">Statistics:</span><br><br>  <span class=\"hljs-attr\">Parse input file:</span>     <span class=\"hljs-string\">once</span><br>  <span class=\"hljs-attr\">Ended due to:</span>         <span class=\"hljs-string\">reaching</span> <span class=\"hljs-string\">end</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">file</span><br>  <br>  <span class=\"hljs-attr\">Queries sent:</span>         <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries completed:</span>    <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries lost:</span>         <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-string\">Queries</span> <span class=\"hljs-string\">delayed(?):</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">RTT max:</span>         \t<span class=\"hljs-number\">0.485871</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT min:</span>              <span class=\"hljs-number\">0.000357</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT average:</span>          <span class=\"hljs-number\">0.011313</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT std deviation:</span>    <span class=\"hljs-number\">0.012731</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT out of range:</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">Percentage completed:</span> <span class=\"hljs-number\">100.00</span><span class=\"hljs-string\">%</span><br>  <span class=\"hljs-attr\">Percentage lost:</span>        <span class=\"hljs-number\">0.00</span><span class=\"hljs-string\">%</span><br>  <br>  <span class=\"hljs-attr\">Started at:</span>           <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">16</span><span class=\"hljs-string\">:24:04</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Finished at:</span>          <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">16</span><span class=\"hljs-string\">:28:10</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Ran for:</span>              <span class=\"hljs-number\">245.988585</span> <span class=\"hljs-string\">seconds</span><br>  <br>  <span class=\"hljs-attr\">Queries per second:</span>   <span class=\"hljs-number\">203.261464</span> <span class=\"hljs-string\">qps</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">[<span class=\"hljs-string\">Status</span>] <span class=\"hljs-string\">Testing</span> <span class=\"hljs-string\">complete</span><br><br><span class=\"hljs-attr\">Statistics:</span><br>  <br>  <span class=\"hljs-attr\">Parse input file:</span>     <span class=\"hljs-string\">once</span><br>  <span class=\"hljs-attr\">Ended due to:</span>         <span class=\"hljs-string\">reaching</span> <span class=\"hljs-string\">end</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">file</span><br>  <br>  <span class=\"hljs-attr\">Queries sent:</span>         <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries completed:</span>    <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries lost:</span>         <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-string\">Queries</span> <span class=\"hljs-string\">delayed(?):</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">RTT max:</span>         \t<span class=\"hljs-number\">0.082733</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT min:</span>              <span class=\"hljs-number\">0.000019</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT average:</span>          <span class=\"hljs-number\">0.006520</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT std deviation:</span>    <span class=\"hljs-number\">0.001705</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT out of range:</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">Percentage completed:</span> <span class=\"hljs-number\">100.00</span><span class=\"hljs-string\">%</span><br>  <span class=\"hljs-attr\">Percentage lost:</span>        <span class=\"hljs-number\">0.00</span><span class=\"hljs-string\">%</span><br>  <br>  <span class=\"hljs-attr\">Started at:</span>           <span class=\"hljs-string\">Wed</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">20</span><span class=\"hljs-string\">:43:30</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Finished at:</span>          <span class=\"hljs-string\">Wed</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">20</span><span class=\"hljs-string\">:47:12</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Ran for:</span>              <span class=\"hljs-number\">222.443603</span> <span class=\"hljs-string\">seconds</span><br>  <br>  <span class=\"hljs-attr\">Queries per second:</span>   <span class=\"hljs-number\">224.776075</span> <span class=\"hljs-string\">qps</span><br></code></pre></td></tr></table></figure>\n\n\n<p><strong>v2版本： Nacos2.1.1 + Coredns 1.9.3</strong><br>50000条DNS请求，三次测试平均qps为：467</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">[<span class=\"hljs-string\">Status</span>] <span class=\"hljs-string\">Testing</span> <span class=\"hljs-string\">complete</span><br><br><span class=\"hljs-attr\">Statistics:</span><br>  <br>  <span class=\"hljs-attr\">Parse input file:</span>     <span class=\"hljs-string\">once</span><br>  <span class=\"hljs-attr\">Ended due to:</span>         <span class=\"hljs-string\">reaching</span> <span class=\"hljs-string\">end</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">file</span><br>  <br>  <span class=\"hljs-attr\">Queries sent:</span>         <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries completed:</span>    <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries lost:</span>         <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-string\">Queries</span> <span class=\"hljs-string\">delayed(?):</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">RTT max:</span>         \t<span class=\"hljs-number\">0.048039</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT min:</span>              <span class=\"hljs-number\">0.004723</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT average:</span>          <span class=\"hljs-number\">0.006745</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT std deviation:</span>    <span class=\"hljs-number\">0.001731</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT out of range:</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">Percentage completed:</span> <span class=\"hljs-number\">100.00</span><span class=\"hljs-string\">%</span><br>  <span class=\"hljs-attr\">Percentage lost:</span>        <span class=\"hljs-number\">0.00</span><span class=\"hljs-string\">%</span><br>  <br>  <span class=\"hljs-attr\">Started at:</span>           <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">14</span><span class=\"hljs-string\">:48:29</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Finished at:</span>          <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">14</span><span class=\"hljs-string\">:50:17</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Ran for:</span>              <span class=\"hljs-number\">107.771145</span> <span class=\"hljs-string\">seconds</span><br>  <br>  <span class=\"hljs-attr\">Queries per second:</span>   <span class=\"hljs-number\">463.946078</span> <span class=\"hljs-string\">qps</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">[<span class=\"hljs-string\">Status</span>] <span class=\"hljs-string\">Testing</span> <span class=\"hljs-string\">complete</span><br><br><span class=\"hljs-attr\">Statistics:</span><br><br>  <span class=\"hljs-attr\">Parse input file:</span>     <span class=\"hljs-string\">once</span><br>  <span class=\"hljs-attr\">Ended due to:</span>         <span class=\"hljs-string\">reaching</span> <span class=\"hljs-string\">end</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">file</span><br><br>  <span class=\"hljs-attr\">Queries sent:</span>         <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries completed:</span>    <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries lost:</span>         <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-string\">Queries</span> <span class=\"hljs-string\">delayed(?):</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br><br>  <span class=\"hljs-attr\">RTT max:</span>         \t<span class=\"hljs-number\">0.041432</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT min:</span>              <span class=\"hljs-number\">0.003126</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT average:</span>          <span class=\"hljs-number\">0.005235</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT std deviation:</span>    <span class=\"hljs-number\">0.001552</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT out of range:</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br><br>  <span class=\"hljs-attr\">Percentage completed:</span> <span class=\"hljs-number\">100.00</span><span class=\"hljs-string\">%</span><br>  <span class=\"hljs-attr\">Percentage lost:</span>        <span class=\"hljs-number\">0.00</span><span class=\"hljs-string\">%</span><br><br>  <span class=\"hljs-attr\">Started at:</span>           <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">14</span><span class=\"hljs-string\">:52:01</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Finished at:</span>          <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">14</span><span class=\"hljs-string\">:53:49</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Ran for:</span>              <span class=\"hljs-number\">107.977801</span> <span class=\"hljs-string\">seconds</span><br><br>  <span class=\"hljs-attr\">Queries per second:</span>   <span class=\"hljs-number\">463.058143</span> <span class=\"hljs-string\">qps</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">[<span class=\"hljs-string\">Status</span>] <span class=\"hljs-string\">Testing</span> <span class=\"hljs-string\">complete</span><br><br><span class=\"hljs-attr\">Statistics:</span><br>  <br>  <span class=\"hljs-attr\">Parse input file:</span>     <span class=\"hljs-string\">once</span><br>  <span class=\"hljs-attr\">Ended due to:</span>         <span class=\"hljs-string\">reaching</span> <span class=\"hljs-string\">end</span> <span class=\"hljs-string\">of</span> <span class=\"hljs-string\">file</span><br>  <br>  <span class=\"hljs-attr\">Queries sent:</span>         <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries completed:</span>    <span class=\"hljs-number\">50000</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-attr\">Queries lost:</span>         <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <span class=\"hljs-string\">Queries</span> <span class=\"hljs-string\">delayed(?):</span>   <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">RTT max:</span>         \t<span class=\"hljs-number\">0.039539</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT min:</span>              <span class=\"hljs-number\">0.000980</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT average:</span>          <span class=\"hljs-number\">0.005502</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT std deviation:</span>    <span class=\"hljs-number\">0.001641</span> <span class=\"hljs-string\">sec</span><br>  <span class=\"hljs-attr\">RTT out of range:</span>     <span class=\"hljs-number\">0</span> <span class=\"hljs-string\">queries</span><br>  <br>  <span class=\"hljs-attr\">Percentage completed:</span> <span class=\"hljs-number\">100.00</span><span class=\"hljs-string\">%</span><br>  <span class=\"hljs-attr\">Percentage lost:</span>        <span class=\"hljs-number\">0.00</span><span class=\"hljs-string\">%</span><br>  <br>  <span class=\"hljs-attr\">Started at:</span>           <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">15</span><span class=\"hljs-string\">:01:28</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Finished at:</span>          <span class=\"hljs-string\">Thu</span> <span class=\"hljs-string\">Sep</span> <span class=\"hljs-number\">22</span> <span class=\"hljs-number\">15</span><span class=\"hljs-string\">:03:13</span> <span class=\"hljs-number\">2022</span><br>  <span class=\"hljs-attr\">Ran for:</span>              <span class=\"hljs-number\">104.918484</span> <span class=\"hljs-string\">seconds</span><br>  <br>  <span class=\"hljs-attr\">Queries per second:</span>   <span class=\"hljs-number\">476.560450</span> <span class=\"hljs-string\">qps</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"测试总结：\"><a href=\"#测试总结：\" class=\"headerlink\" title=\"测试总结：\"></a>测试总结：</h4><p>经过以上的单元测试和压力测试，新版本的nacos-coredns-plugin插件，在新增的与nacos服务端建立gRPC长连接的功能支持下，插件表现稳定，且DNS请求的 qps 从 209 提升到 467， 得到了接近 223% 的性能增长。</p>\n<h3 id=\"项目完成质量：\"><a href=\"#项目完成质量：\" class=\"headerlink\" title=\"项目完成质量：\"></a>项目完成质量：</h3><p><strong>1． 技术方案评价</strong><br>本次项目致力于让Nacos-CoreDNS模块支持以gRPC长连接方式访问Nacos服务端，具有一定的难度。但是在经过导师指导和讨论后，逐步完成了方案的优化，使得方案的设计更有可靠性和完善性。由于前期技术方案进行了比较严格的分析和策划，所以相对后期的实现而言，改动较少，提高了开发效率；<br><strong>2．项目质量评价</strong><br>经过比较严密的稳定性测试和压力测试，整个插件表现稳定，可以很好的完成题目给的需求。本项目模块化独立开发，与其他模块耦合度小，较为容易进行维护。此插件使用golang语言编写，具有良好的跨平台可移植性。此外，开发进度也能够按照前期的时间规划进行，按时提交了项目产出。</p>\n<h3 id=\"与导师沟通及反馈情况：\"><a href=\"#与导师沟通及反馈情况：\" class=\"headerlink\" title=\"与导师沟通及反馈情况：\"></a>与导师沟通及反馈情况：</h3><p>由于对这个项目比较感兴趣，所以在项目公布早期就与导师进行了沟通联系。在与导师沟通的过程中，得到了许多有用的反馈，帮助我了解了整个项目的详情细节。同时导师也给我了许多建议来对方案进行优化改进。可以说，整个过程中，与指导老师的沟通情况非常的默契。当我遇到困难和问题的时候，指导老师可以主动地为我解决问题，而且还会为我提出更好的建议。我所提出合理的意见，老师也会采取。</p>\n<h3 id=\"我的收获\"><a href=\"#我的收获\" class=\"headerlink\" title=\"我的收获\"></a>我的收获</h3><p>虽然此次项目时间只有三个月，在这期间不一定会让一个人有着翻天覆地的变化，但变化就是这样一点一点产生的，同时也感觉有很大的收获，也帮助找出了自己的不足和需要改进的地方。在遇到问题虚心请教后，从导师的身上能学到自己没有的东西，每一次都会使我更接近成功。还有学会了在开发中与人的合作与交流。<br>在这个项目之前，我对待开发方案和文档这些东西会不太注重，写得比较粗略。但是通过这个项目，我体会到有效详细的方案设计和开发文档，可以很大的提高开发效率，保证项目的可行性和可维护性。<br>代码风格要规范，之前写代码，我都是不怎么去注意代码风格和写代码的规范，都是稍微想一下就直接开始写代码了。注释也很少用，总感觉我们自己写的代码，我们怎么会不知道它做了些什么事呢 ？总觉得我们自己写的代码我们怎么会不知道它是用来做什么的呢。但通过这次项目，我体会到保持规范统一的代码风格的重要性，可以保证代码的可读性，让别人更容易理解自己写的代码。<br>我也借助到这个机会，可以参与开源项目中，积累了相关经验、学习到新的知识。为日后继续参与更多开源项目提供一个经验借鉴。此外我对Nacos非常感兴趣，希望项目结束后也能在Nacos其他方面做一点点贡献。  </p>\n"},{"title":"期末汇报","date":"2022-07-11T13:17:00.000Z","_content":"\n0712进展更新\n\n已按照计划，通过docker部署了nacos2.1.0服务端。然后使用Nacos-Sdk-Go搭建了nacos的go客户端，并实现了go客户端与Nacos服务器的gRPC通信和资源获取。\n\n目前已根据实践改进了nacos-coredns插件的设计文档，下一步尝试在Nacos-CoreDNS-plugin中添加 grpc 客户端模块，实现从 Nacos 服务端的资源获取。\n\n疑问：现在nacos的go-sdk查询nacos服务端里的所有服务时需要输入分组名(groupName)，如果不指定分组则查询的是默认分组里的所有服务。请问有没有方法或api可以获取nacos服务器里的所有分组？\n或者查询所有服务列表时，可以获取所有分组里的所有服务？\n目前请求服务实例的参数需要输入服务名和服务所在分组(groupName)，有没有request仅需要输入服务名就能查询包含该服务的分组\n\n\nnacos里注册的服务通过分组(groupName)来隔离的，我使用nacos的go-sdk查询nacos服务端里的所有服务时需要输入分组名(groupName), 如果不指定分组的话，则查询到的是默认分组里的所有服务。如果客户端不知道nacos服务的分组名的话，怎么获取所有分组的服务列表？\n\n\n0715更新\n1、初步实现nacos-coredns插件中的grpc通信模块\n目前已成功在nacos-coredns-plugin的v1.6.7分支上加入了与nacos服务端通信的grpc客户端模块。在coredns v1.6.7导入nacos-sdk-go/v2包后，会将coredns的go.mod中 goole.golang.org/grpc v1.26.0 更新为 v1.36.1，编译时会报错不兼容。 通过 replace 指令，将旧的库地址，替换为新的库后可以成功编译。\n![](/img/ospp_record/grpc.png)\n\n暂时对Nacos-coredns-plugin中的Domain数据结构进行了保留，调整，通过从nacos服务器获取的model.Service转json再转Domain的方式，这样对原来代码的改动最小，后期会继续优化成直接使用model.Service。\n![](/img/ospp_record/getService.png)\n如果直接用nacos-sdk-go中的model.Service数据结构，原来nacos-coredns-plugin的Domain是直接弃用了吗？\n\n\n\n2、缓存问题\n原来coredns的服务数据是缓存在 /root/nacos-go-client-cache/目录中，而nacos-sdk-go自带了对服务的缓存默认是在 /tmp/nacos/cache/ 目录中，这些缓存的数据都是在插件启动的时候加载的，两者的功能产生了重叠。原来的nacos-coredns-plugin的缓存功能要保留吗，是否需要让nacos-sdk-go管理服务数据的缓存。\n![](/img/ospp_record/cache_dir.png)\n\n\n3、数据更新问题\n目前nacos-coredns-plugin数据的更新是通过两个goruntime函数定时向服务器请求来更新数据。\n![](/img/ospp_record/go_func.png)\n\nnacos-sdk-go中提供了服务订阅的功能。对某个服务进行订阅后，服务的实例发生改变时会调用客户端定义的回调函数callback。\n因此，我想到可以优化数据更新的流程为\n1、定时从服务器获取所有服务名后\n2、对获取到的所有服务进行订阅\n3、订阅后，当服务发生改变时通过回调函数来更新服务数据\n\n\n# 0723更新\n\n","source":"_posts/ospp_record.md","raw":"---\ntitle: 期末汇报\ndate: 2022-07-11 21:17:00\ncategories: \n - nacos\n---\n\n0712进展更新\n\n已按照计划，通过docker部署了nacos2.1.0服务端。然后使用Nacos-Sdk-Go搭建了nacos的go客户端，并实现了go客户端与Nacos服务器的gRPC通信和资源获取。\n\n目前已根据实践改进了nacos-coredns插件的设计文档，下一步尝试在Nacos-CoreDNS-plugin中添加 grpc 客户端模块，实现从 Nacos 服务端的资源获取。\n\n疑问：现在nacos的go-sdk查询nacos服务端里的所有服务时需要输入分组名(groupName)，如果不指定分组则查询的是默认分组里的所有服务。请问有没有方法或api可以获取nacos服务器里的所有分组？\n或者查询所有服务列表时，可以获取所有分组里的所有服务？\n目前请求服务实例的参数需要输入服务名和服务所在分组(groupName)，有没有request仅需要输入服务名就能查询包含该服务的分组\n\n\nnacos里注册的服务通过分组(groupName)来隔离的，我使用nacos的go-sdk查询nacos服务端里的所有服务时需要输入分组名(groupName), 如果不指定分组的话，则查询到的是默认分组里的所有服务。如果客户端不知道nacos服务的分组名的话，怎么获取所有分组的服务列表？\n\n\n0715更新\n1、初步实现nacos-coredns插件中的grpc通信模块\n目前已成功在nacos-coredns-plugin的v1.6.7分支上加入了与nacos服务端通信的grpc客户端模块。在coredns v1.6.7导入nacos-sdk-go/v2包后，会将coredns的go.mod中 goole.golang.org/grpc v1.26.0 更新为 v1.36.1，编译时会报错不兼容。 通过 replace 指令，将旧的库地址，替换为新的库后可以成功编译。\n![](/img/ospp_record/grpc.png)\n\n暂时对Nacos-coredns-plugin中的Domain数据结构进行了保留，调整，通过从nacos服务器获取的model.Service转json再转Domain的方式，这样对原来代码的改动最小，后期会继续优化成直接使用model.Service。\n![](/img/ospp_record/getService.png)\n如果直接用nacos-sdk-go中的model.Service数据结构，原来nacos-coredns-plugin的Domain是直接弃用了吗？\n\n\n\n2、缓存问题\n原来coredns的服务数据是缓存在 /root/nacos-go-client-cache/目录中，而nacos-sdk-go自带了对服务的缓存默认是在 /tmp/nacos/cache/ 目录中，这些缓存的数据都是在插件启动的时候加载的，两者的功能产生了重叠。原来的nacos-coredns-plugin的缓存功能要保留吗，是否需要让nacos-sdk-go管理服务数据的缓存。\n![](/img/ospp_record/cache_dir.png)\n\n\n3、数据更新问题\n目前nacos-coredns-plugin数据的更新是通过两个goruntime函数定时向服务器请求来更新数据。\n![](/img/ospp_record/go_func.png)\n\nnacos-sdk-go中提供了服务订阅的功能。对某个服务进行订阅后，服务的实例发生改变时会调用客户端定义的回调函数callback。\n因此，我想到可以优化数据更新的流程为\n1、定时从服务器获取所有服务名后\n2、对获取到的所有服务进行订阅\n3、订阅后，当服务发生改变时通过回调函数来更新服务数据\n\n\n# 0723更新\n\n","slug":"ospp_record","published":1,"updated":"2022-08-19T13:35:34.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdks000ni3wu3shc3dav","content":"<p>0712进展更新</p>\n<p>已按照计划，通过docker部署了nacos2.1.0服务端。然后使用Nacos-Sdk-Go搭建了nacos的go客户端，并实现了go客户端与Nacos服务器的gRPC通信和资源获取。</p>\n<p>目前已根据实践改进了nacos-coredns插件的设计文档，下一步尝试在Nacos-CoreDNS-plugin中添加 grpc 客户端模块，实现从 Nacos 服务端的资源获取。</p>\n<p>疑问：现在nacos的go-sdk查询nacos服务端里的所有服务时需要输入分组名(groupName)，如果不指定分组则查询的是默认分组里的所有服务。请问有没有方法或api可以获取nacos服务器里的所有分组？<br>或者查询所有服务列表时，可以获取所有分组里的所有服务？<br>目前请求服务实例的参数需要输入服务名和服务所在分组(groupName)，有没有request仅需要输入服务名就能查询包含该服务的分组</p>\n<p>nacos里注册的服务通过分组(groupName)来隔离的，我使用nacos的go-sdk查询nacos服务端里的所有服务时需要输入分组名(groupName), 如果不指定分组的话，则查询到的是默认分组里的所有服务。如果客户端不知道nacos服务的分组名的话，怎么获取所有分组的服务列表？</p>\n<p>0715更新<br>1、初步实现nacos-coredns插件中的grpc通信模块<br>目前已成功在nacos-coredns-plugin的v1.6.7分支上加入了与nacos服务端通信的grpc客户端模块。在coredns v1.6.7导入nacos-sdk-go&#x2F;v2包后，会将coredns的go.mod中 goole.golang.org&#x2F;grpc v1.26.0 更新为 v1.36.1，编译时会报错不兼容。 通过 replace 指令，将旧的库地址，替换为新的库后可以成功编译。<br><img src=\"/img/ospp_record/grpc.png\"></p>\n<p>暂时对Nacos-coredns-plugin中的Domain数据结构进行了保留，调整，通过从nacos服务器获取的model.Service转json再转Domain的方式，这样对原来代码的改动最小，后期会继续优化成直接使用model.Service。<br><img src=\"/img/ospp_record/getService.png\"><br>如果直接用nacos-sdk-go中的model.Service数据结构，原来nacos-coredns-plugin的Domain是直接弃用了吗？</p>\n<p>2、缓存问题<br>原来coredns的服务数据是缓存在 &#x2F;root&#x2F;nacos-go-client-cache&#x2F;目录中，而nacos-sdk-go自带了对服务的缓存默认是在 &#x2F;tmp&#x2F;nacos&#x2F;cache&#x2F; 目录中，这些缓存的数据都是在插件启动的时候加载的，两者的功能产生了重叠。原来的nacos-coredns-plugin的缓存功能要保留吗，是否需要让nacos-sdk-go管理服务数据的缓存。<br><img src=\"/img/ospp_record/cache_dir.png\"></p>\n<p>3、数据更新问题<br>目前nacos-coredns-plugin数据的更新是通过两个goruntime函数定时向服务器请求来更新数据。<br><img src=\"/img/ospp_record/go_func.png\"></p>\n<p>nacos-sdk-go中提供了服务订阅的功能。对某个服务进行订阅后，服务的实例发生改变时会调用客户端定义的回调函数callback。<br>因此，我想到可以优化数据更新的流程为<br>1、定时从服务器获取所有服务名后<br>2、对获取到的所有服务进行订阅<br>3、订阅后，当服务发生改变时通过回调函数来更新服务数据</p>\n<h1 id=\"0723更新\"><a href=\"#0723更新\" class=\"headerlink\" title=\"0723更新\"></a>0723更新</h1>","site":{"data":{}},"wordcount":1419,"excerpt":"","more":"<p>0712进展更新</p>\n<p>已按照计划，通过docker部署了nacos2.1.0服务端。然后使用Nacos-Sdk-Go搭建了nacos的go客户端，并实现了go客户端与Nacos服务器的gRPC通信和资源获取。</p>\n<p>目前已根据实践改进了nacos-coredns插件的设计文档，下一步尝试在Nacos-CoreDNS-plugin中添加 grpc 客户端模块，实现从 Nacos 服务端的资源获取。</p>\n<p>疑问：现在nacos的go-sdk查询nacos服务端里的所有服务时需要输入分组名(groupName)，如果不指定分组则查询的是默认分组里的所有服务。请问有没有方法或api可以获取nacos服务器里的所有分组？<br>或者查询所有服务列表时，可以获取所有分组里的所有服务？<br>目前请求服务实例的参数需要输入服务名和服务所在分组(groupName)，有没有request仅需要输入服务名就能查询包含该服务的分组</p>\n<p>nacos里注册的服务通过分组(groupName)来隔离的，我使用nacos的go-sdk查询nacos服务端里的所有服务时需要输入分组名(groupName), 如果不指定分组的话，则查询到的是默认分组里的所有服务。如果客户端不知道nacos服务的分组名的话，怎么获取所有分组的服务列表？</p>\n<p>0715更新<br>1、初步实现nacos-coredns插件中的grpc通信模块<br>目前已成功在nacos-coredns-plugin的v1.6.7分支上加入了与nacos服务端通信的grpc客户端模块。在coredns v1.6.7导入nacos-sdk-go&#x2F;v2包后，会将coredns的go.mod中 goole.golang.org&#x2F;grpc v1.26.0 更新为 v1.36.1，编译时会报错不兼容。 通过 replace 指令，将旧的库地址，替换为新的库后可以成功编译。<br><img src=\"/img/ospp_record/grpc.png\"></p>\n<p>暂时对Nacos-coredns-plugin中的Domain数据结构进行了保留，调整，通过从nacos服务器获取的model.Service转json再转Domain的方式，这样对原来代码的改动最小，后期会继续优化成直接使用model.Service。<br><img src=\"/img/ospp_record/getService.png\"><br>如果直接用nacos-sdk-go中的model.Service数据结构，原来nacos-coredns-plugin的Domain是直接弃用了吗？</p>\n<p>2、缓存问题<br>原来coredns的服务数据是缓存在 &#x2F;root&#x2F;nacos-go-client-cache&#x2F;目录中，而nacos-sdk-go自带了对服务的缓存默认是在 &#x2F;tmp&#x2F;nacos&#x2F;cache&#x2F; 目录中，这些缓存的数据都是在插件启动的时候加载的，两者的功能产生了重叠。原来的nacos-coredns-plugin的缓存功能要保留吗，是否需要让nacos-sdk-go管理服务数据的缓存。<br><img src=\"/img/ospp_record/cache_dir.png\"></p>\n<p>3、数据更新问题<br>目前nacos-coredns-plugin数据的更新是通过两个goruntime函数定时向服务器请求来更新数据。<br><img src=\"/img/ospp_record/go_func.png\"></p>\n<p>nacos-sdk-go中提供了服务订阅的功能。对某个服务进行订阅后，服务的实例发生改变时会调用客户端定义的回调函数callback。<br>因此，我想到可以优化数据更新的流程为<br>1、定时从服务器获取所有服务名后<br>2、对获取到的所有服务进行订阅<br>3、订阅后，当服务发生改变时通过回调函数来更新服务数据</p>\n<h1 id=\"0723更新\"><a href=\"#0723更新\" class=\"headerlink\" title=\"0723更新\"></a>0723更新</h1>"},{"title":"nacos-coredns-plugin 详细设计","date":"2022-07-06T11:47:43.000Z","_content":"## 核心方法\n\n目前 nacos-coredn 插件与 nacos 服务端通信的API在 nacos2.x 版本被移除了。请教了导师后发现可以利用目前nacos-go-sdk中实现的nacos client和server通信，从nacos client获取数据转成对应的数据结构就可以，不需要api来进行数据传输。因此项目方案是参考Nacos-go-sdk与Nacos服务器的通信方式，在Nacos-coredns-plugin内导入Nacos-sdk-go相关功能，封装成新的grpc通信模块，实现与与Nacos服务器的通信。例如，通过nacos-go-sdk来调用GetAllServicesInfo、GetService等方法，就能获取所有服务或某个具体服务的信息（ip、port...），这些数据看可以覆盖旧api获取的数据，因此只需要对从nacos client获取数据转成对应coredns插件需要的数据结构即可。\n\n目前的方案为：\n\n### 1、通过在coredns插件中导入nacos-go-sdk/v2包，搭建一个能跟nacos服务器通信的客户端\n\n``` go\n    //创建coredns插件客户端配置\n    clientConfig := *constant.NewClientConfig(\n\t\tconstant.WithNamespaceId(\"\"), \n\t\tconstant.WithTimeoutMs(5000),\n\t\tconstant.WithNotLoadCacheAtStart(true),\n\t\tconstant.WithLogDir(\"/tmp/nacos/log\"),\n\t\tconstant.WithCacheDir(\"/tmp/nacos/cache\"),\n\t\tconstant.WithLogLevel(\"debug\"),\n\t)\n\t//创建nacos服务端配置\n\tserverConfigs := []constant.ServerConfig{\n\t\t*constant.NewServerConfig(\n\t\t\t\"127.0.0.1\",\n\t\t\t8848,\n\t\t\tconstant.WithScheme(\"http\"),\n\t\t\tconstant.WithContextPath(\"/nacos\"),\n\t\t),\n\t}\n\t// 创建 coredns插件 和 nacos服务端 的通信配置\n\tnacosClient, _ := clients.NewNamingClient(\n\t\tvo.NacosClientParam{\n\t\t\tClientConfig:  &clientConfig,\n\t\t\tServerConfigs: serverConfigs,\n\t\t},\n\t)\n```\n\n### 2、利用sdk里提供的方法从nacos服务器请求数据\n\n获取nacos里注册的所有服务\n``` go\n    service, err := nacosClient.GetAllServicesInfo(vo.GetAllServiceInfoParam{\n        NameSpace: \"\",        \n        GroupName: \"group-a\",\n        PageNo:    1,\n        PageSize:  10,\n    })\n```\n![获取所有服务](/img/plugin-details/getAllService.png)\n\n\n获取nacos里注册的某个服务的详细信息\n``` go\n    service, err := nacosClient.GetService(vo.GetServiceParam{\n\t\tServiceName: \"demo.go\",\n\t\tGroupName:   \"group-a\",\n\t\tClusters:    []string{\"cluster-a\"},\n\t})\n```\n![服务的详细信息](/img/plugin-details/getService.png)\n\n\n### 3、将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构\n\nnacos-coredns插件主要需要的数据结构\n``` go\ntype Domain struct {\n\tName          string `json:\"dom\"`\n\tClusters      string\n\tCacheMillis   int64\n\tLastRefMillis int64\n\tInstances     []Instance `json:\"hosts\"`\n\tEnv           string\n\tTTL           int\n}\n\ntype Instance struct {\n\tIP         string\n\tPort       int\n\tWeight     float64\n\tValid      bool\n\tUnit       string\n\tAppUseType string\n\tSite       string\n}\n```\n\n## grpc通信模块设计\n通信流程(7月6日更新)\n1、启动nacos-coredns插件时，同时启动插件与nacos服务器的grpc通信客户端（nacos_grpc_client）。 \n2、grpc通信客户端调用了Nacos-go-sdk/v2中实现的方法，从nacos服务器集群中获取一个服务器的IP地址和端口并建立TCP连接。HTTP/2下，同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应。 \n3、nacos-coredns插件向Nacos服务器请求资源时，通过grpc通信客户端来调用nacos-go-sdk/v2封装的GetAllServicesInfo、GetService等方法来获取所有服务或某个具体服务的信息详情（ip、port...）。\n4、grpc通信客户端将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构，具体数据结构可根据开发中遇到的情况进行调整。\n5、此外，可以对grpc通信客户端设置 超时时间 与 重试次数 等措施来避免调用超时、 阻塞等情况。\n\n\n类设计图(7月10日更新)\n\nnacos_grpc_client.go\n\nNacosGrpcClient类的成员定义\ntype NacosGrpcClient struct {\n\tclientConfig      constant.ClientConfig \t//nacos-coredns客户端配置\n\tserverConfigs     []constant.ServerConfig \t//nacos服务器集群配置\n\tgrpc_client       clients.INamingClient\t\t//nacos-coredns与nacos服务器的grpc连接\n}\n\n客户端构造函数\nNewNacosGrpcClient()\n输入：clientConfig、serverConfigs \n输出：NacosGrpcClient\n功能：初始化客户端\n\nNacosGrpcClient类的方法：\n\t私有方法:\n\t\tfunc (ngc *NacosGrpcClient) reload() \n\t\t功能： 重连nacos-coredns与nacos服务器的grpc连接\n\n\t\tfunc (ngc *NacosGrpcClient) getGrpcClient()  \n\t\t输入： 无\n\t\t输出： grpc_client \t//nacos-coredns与nacos服务器的grpc连接\n\t\t功能： 检查grpc连接是否超时，若存活则直接返回grpc连接；若超时则调用reload()后再返回grpc连接\n\n\t\tfunc (ngc *NacosGrpcClient) parseAllDomNames()\t\t\t\t\t\n\t\t输入：model.ServiceList\t\t//nacos-go-sdk中的ServiceList数据结构\n\t\t输出：AllDomNames\t\t\t//nacos-coredns插件中的AllDomNames数据结构\n\t\t功能：将从Nacos服务器获取的model.ServiceList数据转换成对应Coredns的Domain数据结构\n\n\t\tfunc (ngc *NacosGrpcClient) parseDomain() \t\t\t\t\t\n\t\t输入：model.Service\t\t\t//nacos-go-sdk中的Service数据结构\n\t\t输出：Domain\t\t\t\t//nacos-coredns插件中的Domain数据结构\n\t\t功能：将从Nacos服务器获取的model.Service数据转换成对应Coredns的Instance数据结构\n\n\t公有方法：\n\t\tfunc (ngc *NacosGrpcClient) GetAllServicesInfo() \t\n\t\t输入：vo.GetAllServiceInfoParam //nacos-go-sdk中的GetAllServicesInfo请求参数\n\t\t输出：AllDomNames\t\t\t\t//nacos-go-sdk中的ServiceList数据结构\n\t\t作用：对应v1版本的API(/v1/ns/api/allDomNames)，调用getGrpcClient()，调用sdk中封装的方法，获取在nacos里注册的所有服务名，调用parseAllDomNames()转换成对应的数据结构\n\n\t\tfunc (ngc *NacosGrpcClient) GetService() \t\t\t\t\t\n\t\t输入：vo.GetServiceParam    //nacos-go-sdk中的GetService请求参数\n\t\t输出：Domain\t\t\t\t//nacos-go-sdk中的Service数据结构\n\t\t功能：对应v1版本的API(/v1/ns/api/srvIPXT)，调用getGrpcClient()，调用sdk中封装的方法，获取在nacos里注册的所有服务名，调用parseDomain()转换成对应的数据结构","source":"_posts/plugin-details.md","raw":"---\ntitle: nacos-coredns-plugin 详细设计\ndate: 2022-07-06 19:47:43\ncategories: \n - nacos\n---\n## 核心方法\n\n目前 nacos-coredn 插件与 nacos 服务端通信的API在 nacos2.x 版本被移除了。请教了导师后发现可以利用目前nacos-go-sdk中实现的nacos client和server通信，从nacos client获取数据转成对应的数据结构就可以，不需要api来进行数据传输。因此项目方案是参考Nacos-go-sdk与Nacos服务器的通信方式，在Nacos-coredns-plugin内导入Nacos-sdk-go相关功能，封装成新的grpc通信模块，实现与与Nacos服务器的通信。例如，通过nacos-go-sdk来调用GetAllServicesInfo、GetService等方法，就能获取所有服务或某个具体服务的信息（ip、port...），这些数据看可以覆盖旧api获取的数据，因此只需要对从nacos client获取数据转成对应coredns插件需要的数据结构即可。\n\n目前的方案为：\n\n### 1、通过在coredns插件中导入nacos-go-sdk/v2包，搭建一个能跟nacos服务器通信的客户端\n\n``` go\n    //创建coredns插件客户端配置\n    clientConfig := *constant.NewClientConfig(\n\t\tconstant.WithNamespaceId(\"\"), \n\t\tconstant.WithTimeoutMs(5000),\n\t\tconstant.WithNotLoadCacheAtStart(true),\n\t\tconstant.WithLogDir(\"/tmp/nacos/log\"),\n\t\tconstant.WithCacheDir(\"/tmp/nacos/cache\"),\n\t\tconstant.WithLogLevel(\"debug\"),\n\t)\n\t//创建nacos服务端配置\n\tserverConfigs := []constant.ServerConfig{\n\t\t*constant.NewServerConfig(\n\t\t\t\"127.0.0.1\",\n\t\t\t8848,\n\t\t\tconstant.WithScheme(\"http\"),\n\t\t\tconstant.WithContextPath(\"/nacos\"),\n\t\t),\n\t}\n\t// 创建 coredns插件 和 nacos服务端 的通信配置\n\tnacosClient, _ := clients.NewNamingClient(\n\t\tvo.NacosClientParam{\n\t\t\tClientConfig:  &clientConfig,\n\t\t\tServerConfigs: serverConfigs,\n\t\t},\n\t)\n```\n\n### 2、利用sdk里提供的方法从nacos服务器请求数据\n\n获取nacos里注册的所有服务\n``` go\n    service, err := nacosClient.GetAllServicesInfo(vo.GetAllServiceInfoParam{\n        NameSpace: \"\",        \n        GroupName: \"group-a\",\n        PageNo:    1,\n        PageSize:  10,\n    })\n```\n![获取所有服务](/img/plugin-details/getAllService.png)\n\n\n获取nacos里注册的某个服务的详细信息\n``` go\n    service, err := nacosClient.GetService(vo.GetServiceParam{\n\t\tServiceName: \"demo.go\",\n\t\tGroupName:   \"group-a\",\n\t\tClusters:    []string{\"cluster-a\"},\n\t})\n```\n![服务的详细信息](/img/plugin-details/getService.png)\n\n\n### 3、将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构\n\nnacos-coredns插件主要需要的数据结构\n``` go\ntype Domain struct {\n\tName          string `json:\"dom\"`\n\tClusters      string\n\tCacheMillis   int64\n\tLastRefMillis int64\n\tInstances     []Instance `json:\"hosts\"`\n\tEnv           string\n\tTTL           int\n}\n\ntype Instance struct {\n\tIP         string\n\tPort       int\n\tWeight     float64\n\tValid      bool\n\tUnit       string\n\tAppUseType string\n\tSite       string\n}\n```\n\n## grpc通信模块设计\n通信流程(7月6日更新)\n1、启动nacos-coredns插件时，同时启动插件与nacos服务器的grpc通信客户端（nacos_grpc_client）。 \n2、grpc通信客户端调用了Nacos-go-sdk/v2中实现的方法，从nacos服务器集群中获取一个服务器的IP地址和端口并建立TCP连接。HTTP/2下，同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应。 \n3、nacos-coredns插件向Nacos服务器请求资源时，通过grpc通信客户端来调用nacos-go-sdk/v2封装的GetAllServicesInfo、GetService等方法来获取所有服务或某个具体服务的信息详情（ip、port...）。\n4、grpc通信客户端将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构，具体数据结构可根据开发中遇到的情况进行调整。\n5、此外，可以对grpc通信客户端设置 超时时间 与 重试次数 等措施来避免调用超时、 阻塞等情况。\n\n\n类设计图(7月10日更新)\n\nnacos_grpc_client.go\n\nNacosGrpcClient类的成员定义\ntype NacosGrpcClient struct {\n\tclientConfig      constant.ClientConfig \t//nacos-coredns客户端配置\n\tserverConfigs     []constant.ServerConfig \t//nacos服务器集群配置\n\tgrpc_client       clients.INamingClient\t\t//nacos-coredns与nacos服务器的grpc连接\n}\n\n客户端构造函数\nNewNacosGrpcClient()\n输入：clientConfig、serverConfigs \n输出：NacosGrpcClient\n功能：初始化客户端\n\nNacosGrpcClient类的方法：\n\t私有方法:\n\t\tfunc (ngc *NacosGrpcClient) reload() \n\t\t功能： 重连nacos-coredns与nacos服务器的grpc连接\n\n\t\tfunc (ngc *NacosGrpcClient) getGrpcClient()  \n\t\t输入： 无\n\t\t输出： grpc_client \t//nacos-coredns与nacos服务器的grpc连接\n\t\t功能： 检查grpc连接是否超时，若存活则直接返回grpc连接；若超时则调用reload()后再返回grpc连接\n\n\t\tfunc (ngc *NacosGrpcClient) parseAllDomNames()\t\t\t\t\t\n\t\t输入：model.ServiceList\t\t//nacos-go-sdk中的ServiceList数据结构\n\t\t输出：AllDomNames\t\t\t//nacos-coredns插件中的AllDomNames数据结构\n\t\t功能：将从Nacos服务器获取的model.ServiceList数据转换成对应Coredns的Domain数据结构\n\n\t\tfunc (ngc *NacosGrpcClient) parseDomain() \t\t\t\t\t\n\t\t输入：model.Service\t\t\t//nacos-go-sdk中的Service数据结构\n\t\t输出：Domain\t\t\t\t//nacos-coredns插件中的Domain数据结构\n\t\t功能：将从Nacos服务器获取的model.Service数据转换成对应Coredns的Instance数据结构\n\n\t公有方法：\n\t\tfunc (ngc *NacosGrpcClient) GetAllServicesInfo() \t\n\t\t输入：vo.GetAllServiceInfoParam //nacos-go-sdk中的GetAllServicesInfo请求参数\n\t\t输出：AllDomNames\t\t\t\t//nacos-go-sdk中的ServiceList数据结构\n\t\t作用：对应v1版本的API(/v1/ns/api/allDomNames)，调用getGrpcClient()，调用sdk中封装的方法，获取在nacos里注册的所有服务名，调用parseAllDomNames()转换成对应的数据结构\n\n\t\tfunc (ngc *NacosGrpcClient) GetService() \t\t\t\t\t\n\t\t输入：vo.GetServiceParam    //nacos-go-sdk中的GetService请求参数\n\t\t输出：Domain\t\t\t\t//nacos-go-sdk中的Service数据结构\n\t\t功能：对应v1版本的API(/v1/ns/api/srvIPXT)，调用getGrpcClient()，调用sdk中封装的方法，获取在nacos里注册的所有服务名，调用parseDomain()转换成对应的数据结构","slug":"plugin-details","published":1,"updated":"2022-08-19T13:35:34.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdl2000si3wu3k4yeqfu","content":"<h2 id=\"核心方法\"><a href=\"#核心方法\" class=\"headerlink\" title=\"核心方法\"></a>核心方法</h2><p>目前 nacos-coredn 插件与 nacos 服务端通信的API在 nacos2.x 版本被移除了。请教了导师后发现可以利用目前nacos-go-sdk中实现的nacos client和server通信，从nacos client获取数据转成对应的数据结构就可以，不需要api来进行数据传输。因此项目方案是参考Nacos-go-sdk与Nacos服务器的通信方式，在Nacos-coredns-plugin内导入Nacos-sdk-go相关功能，封装成新的grpc通信模块，实现与与Nacos服务器的通信。例如，通过nacos-go-sdk来调用GetAllServicesInfo、GetService等方法，就能获取所有服务或某个具体服务的信息（ip、port…），这些数据看可以覆盖旧api获取的数据，因此只需要对从nacos client获取数据转成对应coredns插件需要的数据结构即可。</p>\n<p>目前的方案为：</p>\n<h3 id=\"1、通过在coredns插件中导入nacos-go-sdk-x2F-v2包，搭建一个能跟nacos服务器通信的客户端\"><a href=\"#1、通过在coredns插件中导入nacos-go-sdk-x2F-v2包，搭建一个能跟nacos服务器通信的客户端\" class=\"headerlink\" title=\"1、通过在coredns插件中导入nacos-go-sdk&#x2F;v2包，搭建一个能跟nacos服务器通信的客户端\"></a>1、通过在coredns插件中导入nacos-go-sdk&#x2F;v2包，搭建一个能跟nacos服务器通信的客户端</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">   <span class=\"hljs-comment\">//创建coredns插件客户端配置</span><br>   clientConfig := *constant.NewClientConfig(<br>\tconstant.WithNamespaceId(<span class=\"hljs-string\">&quot;&quot;</span>), <br>\tconstant.WithTimeoutMs(<span class=\"hljs-number\">5000</span>),<br>\tconstant.WithNotLoadCacheAtStart(<span class=\"hljs-literal\">true</span>),<br>\tconstant.WithLogDir(<span class=\"hljs-string\">&quot;/tmp/nacos/log&quot;</span>),<br>\tconstant.WithCacheDir(<span class=\"hljs-string\">&quot;/tmp/nacos/cache&quot;</span>),<br>\tconstant.WithLogLevel(<span class=\"hljs-string\">&quot;debug&quot;</span>),<br>)<br><span class=\"hljs-comment\">//创建nacos服务端配置</span><br>serverConfigs := []constant.ServerConfig&#123;<br>\t*constant.NewServerConfig(<br>\t\t<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>,<br>\t\t<span class=\"hljs-number\">8848</span>,<br>\t\tconstant.WithScheme(<span class=\"hljs-string\">&quot;http&quot;</span>),<br>\t\tconstant.WithContextPath(<span class=\"hljs-string\">&quot;/nacos&quot;</span>),<br>\t),<br>&#125;<br><span class=\"hljs-comment\">// 创建 coredns插件 和 nacos服务端 的通信配置</span><br>nacosClient, _ := clients.NewNamingClient(<br>\tvo.NacosClientParam&#123;<br>\t\tClientConfig:  &amp;clientConfig,<br>\t\tServerConfigs: serverConfigs,<br>\t&#125;,<br>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2、利用sdk里提供的方法从nacos服务器请求数据\"><a href=\"#2、利用sdk里提供的方法从nacos服务器请求数据\" class=\"headerlink\" title=\"2、利用sdk里提供的方法从nacos服务器请求数据\"></a>2、利用sdk里提供的方法从nacos服务器请求数据</h3><p>获取nacos里注册的所有服务</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">service, err := nacosClient.GetAllServicesInfo(vo.GetAllServiceInfoParam&#123;<br>    NameSpace: <span class=\"hljs-string\">&quot;&quot;</span>,        <br>    GroupName: <span class=\"hljs-string\">&quot;group-a&quot;</span>,<br>    PageNo:    <span class=\"hljs-number\">1</span>,<br>    PageSize:  <span class=\"hljs-number\">10</span>,<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/plugin-details/getAllService.png\" alt=\"获取所有服务\"></p>\n<p>获取nacos里注册的某个服务的详细信息</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">   service, err := nacosClient.GetService(vo.GetServiceParam&#123;<br>\tServiceName: <span class=\"hljs-string\">&quot;demo.go&quot;</span>,<br>\tGroupName:   <span class=\"hljs-string\">&quot;group-a&quot;</span>,<br>\tClusters:    []<span class=\"hljs-type\">string</span>&#123;<span class=\"hljs-string\">&quot;cluster-a&quot;</span>&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/plugin-details/getService.png\" alt=\"服务的详细信息\"></p>\n<h3 id=\"3、将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构\"><a href=\"#3、将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构\" class=\"headerlink\" title=\"3、将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构\"></a>3、将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构</h3><p>nacos-coredns插件主要需要的数据结构</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Domain <span class=\"hljs-keyword\">struct</span> &#123;<br>\tName          <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;dom&quot;`</span><br>\tClusters      <span class=\"hljs-type\">string</span><br>\tCacheMillis   <span class=\"hljs-type\">int64</span><br>\tLastRefMillis <span class=\"hljs-type\">int64</span><br>\tInstances     []Instance <span class=\"hljs-string\">`json:&quot;hosts&quot;`</span><br>\tEnv           <span class=\"hljs-type\">string</span><br>\tTTL           <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Instance <span class=\"hljs-keyword\">struct</span> &#123;<br>\tIP         <span class=\"hljs-type\">string</span><br>\tPort       <span class=\"hljs-type\">int</span><br>\tWeight     <span class=\"hljs-type\">float64</span><br>\tValid      <span class=\"hljs-type\">bool</span><br>\tUnit       <span class=\"hljs-type\">string</span><br>\tAppUseType <span class=\"hljs-type\">string</span><br>\tSite       <span class=\"hljs-type\">string</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"grpc通信模块设计\"><a href=\"#grpc通信模块设计\" class=\"headerlink\" title=\"grpc通信模块设计\"></a>grpc通信模块设计</h2><p>通信流程(7月6日更新)<br>1、启动nacos-coredns插件时，同时启动插件与nacos服务器的grpc通信客户端（nacos_grpc_client）。<br>2、grpc通信客户端调用了Nacos-go-sdk&#x2F;v2中实现的方法，从nacos服务器集群中获取一个服务器的IP地址和端口并建立TCP连接。HTTP&#x2F;2下，同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应。<br>3、nacos-coredns插件向Nacos服务器请求资源时，通过grpc通信客户端来调用nacos-go-sdk&#x2F;v2封装的GetAllServicesInfo、GetService等方法来获取所有服务或某个具体服务的信息详情（ip、port…）。<br>4、grpc通信客户端将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构，具体数据结构可根据开发中遇到的情况进行调整。<br>5、此外，可以对grpc通信客户端设置 超时时间 与 重试次数 等措施来避免调用超时、 阻塞等情况。</p>\n<p>类设计图(7月10日更新)</p>\n<p>nacos_grpc_client.go</p>\n<p>NacosGrpcClient类的成员定义<br>type NacosGrpcClient struct {<br>    clientConfig      constant.ClientConfig \t&#x2F;&#x2F;nacos-coredns客户端配置<br>    serverConfigs     []constant.ServerConfig \t&#x2F;&#x2F;nacos服务器集群配置<br>    grpc_client       clients.INamingClient\t\t&#x2F;&#x2F;nacos-coredns与nacos服务器的grpc连接<br>}</p>\n<p>客户端构造函数<br>NewNacosGrpcClient()<br>输入：clientConfig、serverConfigs<br>输出：NacosGrpcClient<br>功能：初始化客户端</p>\n<p>NacosGrpcClient类的方法：<br>    私有方法:<br>        func (ngc *NacosGrpcClient) reload()<br>        功能： 重连nacos-coredns与nacos服务器的grpc连接</p>\n<pre><code class=\"hljs\">    func (ngc *NacosGrpcClient) getGrpcClient()  \n    输入： 无\n    输出： grpc_client \t//nacos-coredns与nacos服务器的grpc连接\n    功能： 检查grpc连接是否超时，若存活则直接返回grpc连接；若超时则调用reload()后再返回grpc连接\n\n    func (ngc *NacosGrpcClient) parseAllDomNames()\t\t\t\t\t\n    输入：model.ServiceList\t\t//nacos-go-sdk中的ServiceList数据结构\n    输出：AllDomNames\t\t\t//nacos-coredns插件中的AllDomNames数据结构\n    功能：将从Nacos服务器获取的model.ServiceList数据转换成对应Coredns的Domain数据结构\n\n    func (ngc *NacosGrpcClient) parseDomain() \t\t\t\t\t\n    输入：model.Service\t\t\t//nacos-go-sdk中的Service数据结构\n    输出：Domain\t\t\t\t//nacos-coredns插件中的Domain数据结构\n    功能：将从Nacos服务器获取的model.Service数据转换成对应Coredns的Instance数据结构\n\n公有方法：\n    func (ngc *NacosGrpcClient) GetAllServicesInfo() \t\n    输入：vo.GetAllServiceInfoParam //nacos-go-sdk中的GetAllServicesInfo请求参数\n    输出：AllDomNames\t\t\t\t//nacos-go-sdk中的ServiceList数据结构\n    作用：对应v1版本的API(/v1/ns/api/allDomNames)，调用getGrpcClient()，调用sdk中封装的方法，获取在nacos里注册的所有服务名，调用parseAllDomNames()转换成对应的数据结构\n\n    func (ngc *NacosGrpcClient) GetService() \t\t\t\t\t\n    输入：vo.GetServiceParam    //nacos-go-sdk中的GetService请求参数\n    输出：Domain\t\t\t\t//nacos-go-sdk中的Service数据结构\n    功能：对应v1版本的API(/v1/ns/api/srvIPXT)，调用getGrpcClient()，调用sdk中封装的方法，获取在nacos里注册的所有服务名，调用parseDomain()转换成对应的数据结构\n</code></pre>\n","site":{"data":{}},"wordcount":3892,"excerpt":"","more":"<h2 id=\"核心方法\"><a href=\"#核心方法\" class=\"headerlink\" title=\"核心方法\"></a>核心方法</h2><p>目前 nacos-coredn 插件与 nacos 服务端通信的API在 nacos2.x 版本被移除了。请教了导师后发现可以利用目前nacos-go-sdk中实现的nacos client和server通信，从nacos client获取数据转成对应的数据结构就可以，不需要api来进行数据传输。因此项目方案是参考Nacos-go-sdk与Nacos服务器的通信方式，在Nacos-coredns-plugin内导入Nacos-sdk-go相关功能，封装成新的grpc通信模块，实现与与Nacos服务器的通信。例如，通过nacos-go-sdk来调用GetAllServicesInfo、GetService等方法，就能获取所有服务或某个具体服务的信息（ip、port…），这些数据看可以覆盖旧api获取的数据，因此只需要对从nacos client获取数据转成对应coredns插件需要的数据结构即可。</p>\n<p>目前的方案为：</p>\n<h3 id=\"1、通过在coredns插件中导入nacos-go-sdk-x2F-v2包，搭建一个能跟nacos服务器通信的客户端\"><a href=\"#1、通过在coredns插件中导入nacos-go-sdk-x2F-v2包，搭建一个能跟nacos服务器通信的客户端\" class=\"headerlink\" title=\"1、通过在coredns插件中导入nacos-go-sdk&#x2F;v2包，搭建一个能跟nacos服务器通信的客户端\"></a>1、通过在coredns插件中导入nacos-go-sdk&#x2F;v2包，搭建一个能跟nacos服务器通信的客户端</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">   <span class=\"hljs-comment\">//创建coredns插件客户端配置</span><br>   clientConfig := *constant.NewClientConfig(<br>\tconstant.WithNamespaceId(<span class=\"hljs-string\">&quot;&quot;</span>), <br>\tconstant.WithTimeoutMs(<span class=\"hljs-number\">5000</span>),<br>\tconstant.WithNotLoadCacheAtStart(<span class=\"hljs-literal\">true</span>),<br>\tconstant.WithLogDir(<span class=\"hljs-string\">&quot;/tmp/nacos/log&quot;</span>),<br>\tconstant.WithCacheDir(<span class=\"hljs-string\">&quot;/tmp/nacos/cache&quot;</span>),<br>\tconstant.WithLogLevel(<span class=\"hljs-string\">&quot;debug&quot;</span>),<br>)<br><span class=\"hljs-comment\">//创建nacos服务端配置</span><br>serverConfigs := []constant.ServerConfig&#123;<br>\t*constant.NewServerConfig(<br>\t\t<span class=\"hljs-string\">&quot;127.0.0.1&quot;</span>,<br>\t\t<span class=\"hljs-number\">8848</span>,<br>\t\tconstant.WithScheme(<span class=\"hljs-string\">&quot;http&quot;</span>),<br>\t\tconstant.WithContextPath(<span class=\"hljs-string\">&quot;/nacos&quot;</span>),<br>\t),<br>&#125;<br><span class=\"hljs-comment\">// 创建 coredns插件 和 nacos服务端 的通信配置</span><br>nacosClient, _ := clients.NewNamingClient(<br>\tvo.NacosClientParam&#123;<br>\t\tClientConfig:  &amp;clientConfig,<br>\t\tServerConfigs: serverConfigs,<br>\t&#125;,<br>)<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"2、利用sdk里提供的方法从nacos服务器请求数据\"><a href=\"#2、利用sdk里提供的方法从nacos服务器请求数据\" class=\"headerlink\" title=\"2、利用sdk里提供的方法从nacos服务器请求数据\"></a>2、利用sdk里提供的方法从nacos服务器请求数据</h3><p>获取nacos里注册的所有服务</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">service, err := nacosClient.GetAllServicesInfo(vo.GetAllServiceInfoParam&#123;<br>    NameSpace: <span class=\"hljs-string\">&quot;&quot;</span>,        <br>    GroupName: <span class=\"hljs-string\">&quot;group-a&quot;</span>,<br>    PageNo:    <span class=\"hljs-number\">1</span>,<br>    PageSize:  <span class=\"hljs-number\">10</span>,<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/plugin-details/getAllService.png\" alt=\"获取所有服务\"></p>\n<p>获取nacos里注册的某个服务的详细信息</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">   service, err := nacosClient.GetService(vo.GetServiceParam&#123;<br>\tServiceName: <span class=\"hljs-string\">&quot;demo.go&quot;</span>,<br>\tGroupName:   <span class=\"hljs-string\">&quot;group-a&quot;</span>,<br>\tClusters:    []<span class=\"hljs-type\">string</span>&#123;<span class=\"hljs-string\">&quot;cluster-a&quot;</span>&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure>\n<p><img src=\"/img/plugin-details/getService.png\" alt=\"服务的详细信息\"></p>\n<h3 id=\"3、将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构\"><a href=\"#3、将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构\" class=\"headerlink\" title=\"3、将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构\"></a>3、将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构</h3><p>nacos-coredns插件主要需要的数据结构</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">type</span> Domain <span class=\"hljs-keyword\">struct</span> &#123;<br>\tName          <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;dom&quot;`</span><br>\tClusters      <span class=\"hljs-type\">string</span><br>\tCacheMillis   <span class=\"hljs-type\">int64</span><br>\tLastRefMillis <span class=\"hljs-type\">int64</span><br>\tInstances     []Instance <span class=\"hljs-string\">`json:&quot;hosts&quot;`</span><br>\tEnv           <span class=\"hljs-type\">string</span><br>\tTTL           <span class=\"hljs-type\">int</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Instance <span class=\"hljs-keyword\">struct</span> &#123;<br>\tIP         <span class=\"hljs-type\">string</span><br>\tPort       <span class=\"hljs-type\">int</span><br>\tWeight     <span class=\"hljs-type\">float64</span><br>\tValid      <span class=\"hljs-type\">bool</span><br>\tUnit       <span class=\"hljs-type\">string</span><br>\tAppUseType <span class=\"hljs-type\">string</span><br>\tSite       <span class=\"hljs-type\">string</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"grpc通信模块设计\"><a href=\"#grpc通信模块设计\" class=\"headerlink\" title=\"grpc通信模块设计\"></a>grpc通信模块设计</h2><p>通信流程(7月6日更新)<br>1、启动nacos-coredns插件时，同时启动插件与nacos服务器的grpc通信客户端（nacos_grpc_client）。<br>2、grpc通信客户端调用了Nacos-go-sdk&#x2F;v2中实现的方法，从nacos服务器集群中获取一个服务器的IP地址和端口并建立TCP连接。HTTP&#x2F;2下，同个域名只需要占用一个 TCP 连接，使用一个连接并行发送多个请求和响应。<br>3、nacos-coredns插件向Nacos服务器请求资源时，通过grpc通信客户端来调用nacos-go-sdk&#x2F;v2封装的GetAllServicesInfo、GetService等方法来获取所有服务或某个具体服务的信息详情（ip、port…）。<br>4、grpc通信客户端将从nacos服务器里获取到的数据转成对应nacos-coredns插件需要的数据结构，具体数据结构可根据开发中遇到的情况进行调整。<br>5、此外，可以对grpc通信客户端设置 超时时间 与 重试次数 等措施来避免调用超时、 阻塞等情况。</p>\n<p>类设计图(7月10日更新)</p>\n<p>nacos_grpc_client.go</p>\n<p>NacosGrpcClient类的成员定义<br>type NacosGrpcClient struct {<br>    clientConfig      constant.ClientConfig \t&#x2F;&#x2F;nacos-coredns客户端配置<br>    serverConfigs     []constant.ServerConfig \t&#x2F;&#x2F;nacos服务器集群配置<br>    grpc_client       clients.INamingClient\t\t&#x2F;&#x2F;nacos-coredns与nacos服务器的grpc连接<br>}</p>\n<p>客户端构造函数<br>NewNacosGrpcClient()<br>输入：clientConfig、serverConfigs<br>输出：NacosGrpcClient<br>功能：初始化客户端</p>\n<p>NacosGrpcClient类的方法：<br>    私有方法:<br>        func (ngc *NacosGrpcClient) reload()<br>        功能： 重连nacos-coredns与nacos服务器的grpc连接</p>\n<pre><code>    func (ngc *NacosGrpcClient) getGrpcClient()  \n    输入： 无\n    输出： grpc_client \t//nacos-coredns与nacos服务器的grpc连接\n    功能： 检查grpc连接是否超时，若存活则直接返回grpc连接；若超时则调用reload()后再返回grpc连接\n\n    func (ngc *NacosGrpcClient) parseAllDomNames()\t\t\t\t\t\n    输入：model.ServiceList\t\t//nacos-go-sdk中的ServiceList数据结构\n    输出：AllDomNames\t\t\t//nacos-coredns插件中的AllDomNames数据结构\n    功能：将从Nacos服务器获取的model.ServiceList数据转换成对应Coredns的Domain数据结构\n\n    func (ngc *NacosGrpcClient) parseDomain() \t\t\t\t\t\n    输入：model.Service\t\t\t//nacos-go-sdk中的Service数据结构\n    输出：Domain\t\t\t\t//nacos-coredns插件中的Domain数据结构\n    功能：将从Nacos服务器获取的model.Service数据转换成对应Coredns的Instance数据结构\n\n公有方法：\n    func (ngc *NacosGrpcClient) GetAllServicesInfo() \t\n    输入：vo.GetAllServiceInfoParam //nacos-go-sdk中的GetAllServicesInfo请求参数\n    输出：AllDomNames\t\t\t\t//nacos-go-sdk中的ServiceList数据结构\n    作用：对应v1版本的API(/v1/ns/api/allDomNames)，调用getGrpcClient()，调用sdk中封装的方法，获取在nacos里注册的所有服务名，调用parseAllDomNames()转换成对应的数据结构\n\n    func (ngc *NacosGrpcClient) GetService() \t\t\t\t\t\n    输入：vo.GetServiceParam    //nacos-go-sdk中的GetService请求参数\n    输出：Domain\t\t\t\t//nacos-go-sdk中的Service数据结构\n    功能：对应v1版本的API(/v1/ns/api/srvIPXT)，调用getGrpcClient()，调用sdk中封装的方法，获取在nacos里注册的所有服务名，调用parseDomain()转换成对应的数据结构\n</code></pre>\n"},{"title":"ubuntu-go-protobuf","date":"2022-07-03T09:08:43.000Z","_content":"## ubuntu-go\nbridge\n\napt-get update\n\napt-get install openssh_server\n\nvim /etc/ssh/sshd_config\n\n```\nPermitRootLogin yes #允许root登录\nPermitEmptyPasswords no #不允许空密码登录\nPasswordAuthentication yes # 设置是否使用口令验证。\n\n```\n\nsudo passwd root\n\nservice ssh restart\n\nwget https://golang.google.cn/dl/go1.16.4.linux-amd64.tar.gz\n\ntar -zxvf go1.16.4.linux-amd64.tar.gz\n\nmv go /usr/local\n\nvim /etc/profile\n\n```\nexport PATH=$PATH:/usr/local/go/bin\nexport GOROOT=/usr/local/go\nexport GOPATH=/home/go\n```\n\nsource /etc/profile\n\n开启Go的MODULE支持\nexport GO111MODULE=on\n\n软件源替换\n<!-- export GOPROXY=https://goproxy.cn,direct -->\ngo env -w GOPROXY=https://goproxy.cn\n\n## protobuf\n一直想要自己搞一套始终没时间，现在公司准备弄一个，但是时间太紧，一个人做整个后台，忙不过来。趁国庆时间多，摸索了一下，这里做个记录。\n\nprotobuf是什么，就在这里不用多说了，如该你看到这里，那说明其实你已经知道protobuf是干啥用的，啥语法格式的你都已经清楚。\n\n环境：ubuntu\n\n参考链接：\n\nhttps://github.com/protocolbuffers/protobuf/blob/master/src/README.md\n\n这个参考链接里面内容提炼一下，你就只需要完成以下几个命令操作即可。\n\n1.由于protobuf是C++写的，需要以下这些安装包：autoconf , automake,  libtool,  curl,   make,   g++,  unzip\nsudo apt-get install autoconf automake libtool curl make g++ unzip\n\n2.安装源文件\ngit clone https://github.com/protocolbuffers/protobuf.git\n\n3.cd 到protobuf目录\ncd protobuf\n\n4.clone子模块的依赖：\ngit submodule update --init --recursive\n\n5.执行自动生成的shell脚本：\n./autogen.sh\n\n6.配置文件shell脚本\n./configure\n\n7.编译\n\nmake\n8. 编译检查(个人觉得可有可无)\nmake check\n\n9. 编译安装\nsudo make install\n\n10. 刷新\nsudo ldconfig\n\n11. 查看安装结果\nprotoc --version\n ","source":"_posts/vmware-ubuntu-go.md","raw":"---\ntitle: ubuntu-go-protobuf\ndate: 2022-07-03 17:08:43\ncategories: \n - linux\n---\n## ubuntu-go\nbridge\n\napt-get update\n\napt-get install openssh_server\n\nvim /etc/ssh/sshd_config\n\n```\nPermitRootLogin yes #允许root登录\nPermitEmptyPasswords no #不允许空密码登录\nPasswordAuthentication yes # 设置是否使用口令验证。\n\n```\n\nsudo passwd root\n\nservice ssh restart\n\nwget https://golang.google.cn/dl/go1.16.4.linux-amd64.tar.gz\n\ntar -zxvf go1.16.4.linux-amd64.tar.gz\n\nmv go /usr/local\n\nvim /etc/profile\n\n```\nexport PATH=$PATH:/usr/local/go/bin\nexport GOROOT=/usr/local/go\nexport GOPATH=/home/go\n```\n\nsource /etc/profile\n\n开启Go的MODULE支持\nexport GO111MODULE=on\n\n软件源替换\n<!-- export GOPROXY=https://goproxy.cn,direct -->\ngo env -w GOPROXY=https://goproxy.cn\n\n## protobuf\n一直想要自己搞一套始终没时间，现在公司准备弄一个，但是时间太紧，一个人做整个后台，忙不过来。趁国庆时间多，摸索了一下，这里做个记录。\n\nprotobuf是什么，就在这里不用多说了，如该你看到这里，那说明其实你已经知道protobuf是干啥用的，啥语法格式的你都已经清楚。\n\n环境：ubuntu\n\n参考链接：\n\nhttps://github.com/protocolbuffers/protobuf/blob/master/src/README.md\n\n这个参考链接里面内容提炼一下，你就只需要完成以下几个命令操作即可。\n\n1.由于protobuf是C++写的，需要以下这些安装包：autoconf , automake,  libtool,  curl,   make,   g++,  unzip\nsudo apt-get install autoconf automake libtool curl make g++ unzip\n\n2.安装源文件\ngit clone https://github.com/protocolbuffers/protobuf.git\n\n3.cd 到protobuf目录\ncd protobuf\n\n4.clone子模块的依赖：\ngit submodule update --init --recursive\n\n5.执行自动生成的shell脚本：\n./autogen.sh\n\n6.配置文件shell脚本\n./configure\n\n7.编译\n\nmake\n8. 编译检查(个人觉得可有可无)\nmake check\n\n9. 编译安装\nsudo make install\n\n10. 刷新\nsudo ldconfig\n\n11. 查看安装结果\nprotoc --version\n ","slug":"vmware-ubuntu-go","published":1,"updated":"2022-08-19T13:35:34.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdl3000ti3wu01rwatow","content":"<h2 id=\"ubuntu-go\"><a href=\"#ubuntu-go\" class=\"headerlink\" title=\"ubuntu-go\"></a>ubuntu-go</h2><p>bridge</p>\n<p>apt-get update</p>\n<p>apt-get install openssh_server</p>\n<p>vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">PermitRootLogin</span> <span class=\"hljs-literal\">yes</span> <span class=\"hljs-comment\">#允许root登录</span><br>PermitEmptyPasswords <span class=\"hljs-literal\">no</span> <span class=\"hljs-comment\">#不允许空密码登录</span><br>PasswordAuthentication <span class=\"hljs-literal\">yes</span> <span class=\"hljs-comment\"># 设置是否使用口令验证。</span><br><br></code></pre></td></tr></table></figure>\n\n<p>sudo passwd root</p>\n<p>service ssh restart</p>\n<p>wget <a href=\"https://golang.google.cn/dl/go1.16.4.linux-amd64.tar.gz\">https://golang.google.cn/dl/go1.16.4.linux-amd64.tar.gz</a></p>\n<p>tar -zxvf go1.16.4.linux-amd64.tar.gz</p>\n<p>mv go &#x2F;usr&#x2F;local</p>\n<p>vim &#x2F;etc&#x2F;profile</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">PATH</span>=<span class=\"hljs-variable\">$PATH</span>:/usr/local/go/bin<br><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">GOROOT</span>=/usr/local/go<br><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">GOPATH</span>=/home/go<br></code></pre></td></tr></table></figure>\n\n<p>source &#x2F;etc&#x2F;profile</p>\n<p>开启Go的MODULE支持<br>export GO111MODULE&#x3D;on</p>\n<p>软件源替换</p>\n<!-- export GOPROXY=https://goproxy.cn,direct -->\n<p>go env -w GOPROXY&#x3D;<a href=\"https://goproxy.cn/\">https://goproxy.cn</a></p>\n<h2 id=\"protobuf\"><a href=\"#protobuf\" class=\"headerlink\" title=\"protobuf\"></a>protobuf</h2><p>一直想要自己搞一套始终没时间，现在公司准备弄一个，但是时间太紧，一个人做整个后台，忙不过来。趁国庆时间多，摸索了一下，这里做个记录。</p>\n<p>protobuf是什么，就在这里不用多说了，如该你看到这里，那说明其实你已经知道protobuf是干啥用的，啥语法格式的你都已经清楚。</p>\n<p>环境：ubuntu</p>\n<p>参考链接：</p>\n<p><a href=\"https://github.com/protocolbuffers/protobuf/blob/master/src/README.md\">https://github.com/protocolbuffers/protobuf/blob/master/src/README.md</a></p>\n<p>这个参考链接里面内容提炼一下，你就只需要完成以下几个命令操作即可。</p>\n<p>1.由于protobuf是C++写的，需要以下这些安装包：autoconf , automake,  libtool,  curl,   make,   g++,  unzip<br>sudo apt-get install autoconf automake libtool curl make g++ unzip</p>\n<p>2.安装源文件<br>git clone <a href=\"https://github.com/protocolbuffers/protobuf.git\">https://github.com/protocolbuffers/protobuf.git</a></p>\n<p>3.cd 到protobuf目录<br>cd protobuf</p>\n<p>4.clone子模块的依赖：<br>git submodule update –init –recursive</p>\n<p>5.执行自动生成的shell脚本：<br>.&#x2F;autogen.sh</p>\n<p>6.配置文件shell脚本<br>.&#x2F;configure</p>\n<p>7.编译</p>\n<p>make<br>8. 编译检查(个人觉得可有可无)<br>make check</p>\n<ol start=\"9\">\n<li><p>编译安装<br>sudo make install</p>\n</li>\n<li><p>刷新<br>sudo ldconfig</p>\n</li>\n<li><p>查看安装结果<br>protoc –version</p>\n</li>\n</ol>\n","site":{"data":{}},"wordcount":1231,"excerpt":"","more":"<h2 id=\"ubuntu-go\"><a href=\"#ubuntu-go\" class=\"headerlink\" title=\"ubuntu-go\"></a>ubuntu-go</h2><p>bridge</p>\n<p>apt-get update</p>\n<p>apt-get install openssh_server</p>\n<p>vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">PermitRootLogin</span> <span class=\"hljs-literal\">yes</span> <span class=\"hljs-comment\">#允许root登录</span><br>PermitEmptyPasswords <span class=\"hljs-literal\">no</span> <span class=\"hljs-comment\">#不允许空密码登录</span><br>PasswordAuthentication <span class=\"hljs-literal\">yes</span> <span class=\"hljs-comment\"># 设置是否使用口令验证。</span><br><br></code></pre></td></tr></table></figure>\n\n<p>sudo passwd root</p>\n<p>service ssh restart</p>\n<p>wget <a href=\"https://golang.google.cn/dl/go1.16.4.linux-amd64.tar.gz\">https://golang.google.cn/dl/go1.16.4.linux-amd64.tar.gz</a></p>\n<p>tar -zxvf go1.16.4.linux-amd64.tar.gz</p>\n<p>mv go &#x2F;usr&#x2F;local</p>\n<p>vim &#x2F;etc&#x2F;profile</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\"><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">PATH</span>=<span class=\"hljs-variable\">$PATH</span>:/usr/local/go/bin<br><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">GOROOT</span>=/usr/local/go<br><span class=\"hljs-built_in\">export</span> <span class=\"hljs-attribute\">GOPATH</span>=/home/go<br></code></pre></td></tr></table></figure>\n\n<p>source &#x2F;etc&#x2F;profile</p>\n<p>开启Go的MODULE支持<br>export GO111MODULE&#x3D;on</p>\n<p>软件源替换</p>\n<!-- export GOPROXY=https://goproxy.cn,direct -->\n<p>go env -w GOPROXY&#x3D;<a href=\"https://goproxy.cn/\">https://goproxy.cn</a></p>\n<h2 id=\"protobuf\"><a href=\"#protobuf\" class=\"headerlink\" title=\"protobuf\"></a>protobuf</h2><p>一直想要自己搞一套始终没时间，现在公司准备弄一个，但是时间太紧，一个人做整个后台，忙不过来。趁国庆时间多，摸索了一下，这里做个记录。</p>\n<p>protobuf是什么，就在这里不用多说了，如该你看到这里，那说明其实你已经知道protobuf是干啥用的，啥语法格式的你都已经清楚。</p>\n<p>环境：ubuntu</p>\n<p>参考链接：</p>\n<p><a href=\"https://github.com/protocolbuffers/protobuf/blob/master/src/README.md\">https://github.com/protocolbuffers/protobuf/blob/master/src/README.md</a></p>\n<p>这个参考链接里面内容提炼一下，你就只需要完成以下几个命令操作即可。</p>\n<p>1.由于protobuf是C++写的，需要以下这些安装包：autoconf , automake,  libtool,  curl,   make,   g++,  unzip<br>sudo apt-get install autoconf automake libtool curl make g++ unzip</p>\n<p>2.安装源文件<br>git clone <a href=\"https://github.com/protocolbuffers/protobuf.git\">https://github.com/protocolbuffers/protobuf.git</a></p>\n<p>3.cd 到protobuf目录<br>cd protobuf</p>\n<p>4.clone子模块的依赖：<br>git submodule update –init –recursive</p>\n<p>5.执行自动生成的shell脚本：<br>.&#x2F;autogen.sh</p>\n<p>6.配置文件shell脚本<br>.&#x2F;configure</p>\n<p>7.编译</p>\n<p>make<br>8. 编译检查(个人觉得可有可无)<br>make check</p>\n<ol start=\"9\">\n<li><p>编译安装<br>sudo make install</p>\n</li>\n<li><p>刷新<br>sudo ldconfig</p>\n</li>\n<li><p>查看安装结果<br>protoc –version</p>\n</li>\n</ol>\n"},{"title":"nacos-docker部署","date":"2022-06-21T07:21:43.000Z","_content":"\n\n## docker 安装\n```\n    apt install docker.io\n```\n\n## docker 官方拉取\n```\n    docker pull nacos/nacos-server:latest\n```\n### 创建本地的映射文件\n```\n    mkdir -p /root/nacos/logs\n```\n\n## 初始化 mysql 数据库 \n\n从以下链接获取sql脚本：https://github.com/alibaba/nacos/blob/develop/distribution/conf/nacos-mysql.sql\n\n\n## 单机模式中-e 添加的参数不同与集群模式，集群模式见文章结尾。\n\n单机模式中/home/nacos/conf/application.properties 配置文件如下：\n```\n# spring\nserver.servlet.contextPath=${SERVER_SERVLET_CONTEXTPATH:/nacos}\nserver.contextPath=/nacos\nserver.port=${NACOS_SERVER_PORT:8848}\nspring.datasource.platform=${SPRING_DATASOURCE_PLATFORM:\"\"}\nnacos.cmdb.dumpTaskInterval=3600\nnacos.cmdb.eventTaskInterval=10\nnacos.cmdb.labelTaskInterval=300\nnacos.cmdb.loadDataAtStart=false\ndb.num=${MYSQL_DATABASE_NUM:1}\ndb.url.0=jdbc:mysql://${MYSQL_SERVICE_HOST}:${MYSQL_SERVICE_PORT:3306}/${MYSQL_SERVICE_DB_NAME}?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true\ndb.url.1=jdbc:mysql://${MYSQL_SERVICE_HOST}:${MYSQL_SERVICE_PORT:3306}/${MYSQL_SERVICE_DB_NAME}?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true\ndb.user=${MYSQL_SERVICE_USER}\ndb.password=${MYSQL_SERVICE_PASSWORD}\n### The auth system to use, currently only 'nacos' is supported:\nnacos.core.auth.system.type=${NACOS_AUTH_SYSTEM_TYPE:nacos}\n\n\n### The token expiration in seconds:\nnacos.core.auth.default.token.expire.seconds=${NACOS_AUTH_TOKEN_EXPIRE_SECONDS:18000}\n\n### The default token:\nnacos.core.auth.default.token.secret.key=${NACOS_AUTH_TOKEN:SecretKey012345678901234567890123456789012345678901234567890123456789}\n\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\nnacos.core.auth.caching.enabled=${NACOS_AUTH_CACHE_ENABLE:false}\n\nserver.tomcat.accesslog.enabled=${TOMCAT_ACCESSLOG_ENABLED:false}\nserver.tomcat.accesslog.pattern=%h %l %u %t \"%r\" %s %b %D\n# default current work dir\nserver.tomcat.basedir=\n## spring security config\n### turn off security\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\n# metrics for elastic search\nmanagement.metrics.export.elastic.enabled=false\nmanagement.metrics.export.influx.enabled=false\n\nnacos.naming.distro.taskDispatchThreadCount=10\nnacos.naming.distro.taskDispatchPeriod=200\nnacos.naming.distro.batchSyncKeyCount=1000\nnacos.naming.distro.initDataRatio=0.9\nnacos.naming.distro.syncRetryDelay=5000\nnacos.naming.data.warmup=true\n```\n\n## 创建nacos容器(单例模式)\n\n这里以单点的模式为例,Docker启动需要暴露8848 9848 9849三个端口\n为什么要开放三个端口？\n可以发现官方文档中有这么一段话：Nacos2.x版本相比1.X新增了gRPC的通信方式，因此需要增加2个端口。新增端口是在配置的主端口(server.port)基础上，进行一定偏移量自动生成。\n```\n    docker run -d -p 8848:8848 -p 9848:9848 -p 9849:9849 \\\n    -e MODE=standalone \\\n    -e PREFER_HOST_MODE=hostname \\ \n    -e SPRING_DATASOURCE_PLATFORM=mysql \\\n    -e MYSQL_SERVICE_HOST=127.0.0.1 \\\n    -e MYSQL_SERVICE_PORT=3306 \\\n    -e MYSQL_SERVICE_DB_NAME=nacos_config \\\n    -e MYSQL_SERVICE_USER=root \\\n    -e MYSQL_SERVICE_PASSWORD=123456 \\\n    -e MYSQL_DATABASE_NUM=1 \\\n    -v /root/nacos/logs:/home/nacos/logs \\\n    --restart always --name nacos nacos/nacos-server:latest\n```\n\n```\ndocker run -d -p 8848:8848 -p 9848:9848 -p 9849:9849 -e MODE=standalone -e PREFER_HOST_MODE=hostname -e SPRING_DATASOURCE_PLATFORM=mysql -e MYSQL_SERVICE_HOST=192.168.66.146 -e MYSQL_SERVICE_PORT=3306 -e MYSQL_SERVICE_DB_NAME=nacos_config -e MYSQL_SERVICE_USER=root -e MYSQL_SERVICE_PASSWORD=123456 -e MYSQL_DATABASE_NUM=1 -v /root/nacos/logs:/home/nacos/logs --name nacos nacos/nacos-server:latest\n```\n\n\n## 启动容器\n```\n    docker start nacos\n```\n### 访问http://localhost:8848/nacos/ 账号默认nacos、密码默认nacos\n新建txt配置文件\n![hello nacos](/img/docker-nacos/hello_nacos.png)\n\n```\nService registration服务注册示例\n\ncurl -X POST 'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&ip=20.18.7.10&port=8080'\nService discovery服务发现示例\n\ncurl -X GET 'http://127.0.0.1:8848/nacos/v1/ns/instance/list?serviceName=nacos.naming.serviceName'\nPublish config推送配置示例\n\ncurl -X POST \"http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&group=test&content=helloWorld\"\nGet config获取配置示例\n\ncurl -X GET \"http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&group=test\"\n```\n\n## 集群部署\n```\ndocker run -d \\\n--network myNetwork --ip 172.18.0.4 --name nacos-server-18848 \\\n-e MODE=cluster \\\n-e SPRING_DATASOURCE_PLATFORM=mysql \\\n-e MYSQL_SERVICE_HOST=172.18.0.3 \\\n-e MYSQL_SERVICE_PORT=3306 \\\n-e MYSQL_SERVICE_USER=root \\\n-e MYSQL_SERVICE_PASSWORD=123456 \\\n-e MYSQL_SERVICE_DB_NAME=nacos_config \\\n-e NACOS_SERVER_PORT=8848 \\\n-e NACOS_SERVERS=\"172.18.0.4:8848 172.18.0.5:8848 172.18.0.6:8848\" \\\n-e NACOS_SERVER_IP=172.18.0.4 \\\n-e JVM_XMS=256m -e JVM_XMX=512m  \\\n-v /usr/local/nacos/logs/nacos-server-18848:/home/nacos/logs \\\n-v /usr/local/nacos/conf:/home/nacos/conf \\\n-p 18848:8848 \\\nnacos/nacos-server\n```","source":"_posts/docker-nacos.md","raw":"---\ntitle: nacos-docker部署\ndate: 2022-06-21 15:21:43\ncategories: \n - nacos\n---\n\n\n## docker 安装\n```\n    apt install docker.io\n```\n\n## docker 官方拉取\n```\n    docker pull nacos/nacos-server:latest\n```\n### 创建本地的映射文件\n```\n    mkdir -p /root/nacos/logs\n```\n\n## 初始化 mysql 数据库 \n\n从以下链接获取sql脚本：https://github.com/alibaba/nacos/blob/develop/distribution/conf/nacos-mysql.sql\n\n\n## 单机模式中-e 添加的参数不同与集群模式，集群模式见文章结尾。\n\n单机模式中/home/nacos/conf/application.properties 配置文件如下：\n```\n# spring\nserver.servlet.contextPath=${SERVER_SERVLET_CONTEXTPATH:/nacos}\nserver.contextPath=/nacos\nserver.port=${NACOS_SERVER_PORT:8848}\nspring.datasource.platform=${SPRING_DATASOURCE_PLATFORM:\"\"}\nnacos.cmdb.dumpTaskInterval=3600\nnacos.cmdb.eventTaskInterval=10\nnacos.cmdb.labelTaskInterval=300\nnacos.cmdb.loadDataAtStart=false\ndb.num=${MYSQL_DATABASE_NUM:1}\ndb.url.0=jdbc:mysql://${MYSQL_SERVICE_HOST}:${MYSQL_SERVICE_PORT:3306}/${MYSQL_SERVICE_DB_NAME}?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true\ndb.url.1=jdbc:mysql://${MYSQL_SERVICE_HOST}:${MYSQL_SERVICE_PORT:3306}/${MYSQL_SERVICE_DB_NAME}?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true\ndb.user=${MYSQL_SERVICE_USER}\ndb.password=${MYSQL_SERVICE_PASSWORD}\n### The auth system to use, currently only 'nacos' is supported:\nnacos.core.auth.system.type=${NACOS_AUTH_SYSTEM_TYPE:nacos}\n\n\n### The token expiration in seconds:\nnacos.core.auth.default.token.expire.seconds=${NACOS_AUTH_TOKEN_EXPIRE_SECONDS:18000}\n\n### The default token:\nnacos.core.auth.default.token.secret.key=${NACOS_AUTH_TOKEN:SecretKey012345678901234567890123456789012345678901234567890123456789}\n\n### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.\nnacos.core.auth.caching.enabled=${NACOS_AUTH_CACHE_ENABLE:false}\n\nserver.tomcat.accesslog.enabled=${TOMCAT_ACCESSLOG_ENABLED:false}\nserver.tomcat.accesslog.pattern=%h %l %u %t \"%r\" %s %b %D\n# default current work dir\nserver.tomcat.basedir=\n## spring security config\n### turn off security\nnacos.security.ignore.urls=/,/error,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**\n# metrics for elastic search\nmanagement.metrics.export.elastic.enabled=false\nmanagement.metrics.export.influx.enabled=false\n\nnacos.naming.distro.taskDispatchThreadCount=10\nnacos.naming.distro.taskDispatchPeriod=200\nnacos.naming.distro.batchSyncKeyCount=1000\nnacos.naming.distro.initDataRatio=0.9\nnacos.naming.distro.syncRetryDelay=5000\nnacos.naming.data.warmup=true\n```\n\n## 创建nacos容器(单例模式)\n\n这里以单点的模式为例,Docker启动需要暴露8848 9848 9849三个端口\n为什么要开放三个端口？\n可以发现官方文档中有这么一段话：Nacos2.x版本相比1.X新增了gRPC的通信方式，因此需要增加2个端口。新增端口是在配置的主端口(server.port)基础上，进行一定偏移量自动生成。\n```\n    docker run -d -p 8848:8848 -p 9848:9848 -p 9849:9849 \\\n    -e MODE=standalone \\\n    -e PREFER_HOST_MODE=hostname \\ \n    -e SPRING_DATASOURCE_PLATFORM=mysql \\\n    -e MYSQL_SERVICE_HOST=127.0.0.1 \\\n    -e MYSQL_SERVICE_PORT=3306 \\\n    -e MYSQL_SERVICE_DB_NAME=nacos_config \\\n    -e MYSQL_SERVICE_USER=root \\\n    -e MYSQL_SERVICE_PASSWORD=123456 \\\n    -e MYSQL_DATABASE_NUM=1 \\\n    -v /root/nacos/logs:/home/nacos/logs \\\n    --restart always --name nacos nacos/nacos-server:latest\n```\n\n```\ndocker run -d -p 8848:8848 -p 9848:9848 -p 9849:9849 -e MODE=standalone -e PREFER_HOST_MODE=hostname -e SPRING_DATASOURCE_PLATFORM=mysql -e MYSQL_SERVICE_HOST=192.168.66.146 -e MYSQL_SERVICE_PORT=3306 -e MYSQL_SERVICE_DB_NAME=nacos_config -e MYSQL_SERVICE_USER=root -e MYSQL_SERVICE_PASSWORD=123456 -e MYSQL_DATABASE_NUM=1 -v /root/nacos/logs:/home/nacos/logs --name nacos nacos/nacos-server:latest\n```\n\n\n## 启动容器\n```\n    docker start nacos\n```\n### 访问http://localhost:8848/nacos/ 账号默认nacos、密码默认nacos\n新建txt配置文件\n![hello nacos](/img/docker-nacos/hello_nacos.png)\n\n```\nService registration服务注册示例\n\ncurl -X POST 'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&ip=20.18.7.10&port=8080'\nService discovery服务发现示例\n\ncurl -X GET 'http://127.0.0.1:8848/nacos/v1/ns/instance/list?serviceName=nacos.naming.serviceName'\nPublish config推送配置示例\n\ncurl -X POST \"http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&group=test&content=helloWorld\"\nGet config获取配置示例\n\ncurl -X GET \"http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&group=test\"\n```\n\n## 集群部署\n```\ndocker run -d \\\n--network myNetwork --ip 172.18.0.4 --name nacos-server-18848 \\\n-e MODE=cluster \\\n-e SPRING_DATASOURCE_PLATFORM=mysql \\\n-e MYSQL_SERVICE_HOST=172.18.0.3 \\\n-e MYSQL_SERVICE_PORT=3306 \\\n-e MYSQL_SERVICE_USER=root \\\n-e MYSQL_SERVICE_PASSWORD=123456 \\\n-e MYSQL_SERVICE_DB_NAME=nacos_config \\\n-e NACOS_SERVER_PORT=8848 \\\n-e NACOS_SERVERS=\"172.18.0.4:8848 172.18.0.5:8848 172.18.0.6:8848\" \\\n-e NACOS_SERVER_IP=172.18.0.4 \\\n-e JVM_XMS=256m -e JVM_XMX=512m  \\\n-v /usr/local/nacos/logs/nacos-server-18848:/home/nacos/logs \\\n-v /usr/local/nacos/conf:/home/nacos/conf \\\n-p 18848:8848 \\\nnacos/nacos-server\n```","slug":"docker-nacos","published":1,"updated":"2022-08-19T13:35:34.633Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl8gzqdl4000ui3wu3c601lvk","content":"<h2 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">apt <span class=\"hljs-keyword\">install</span> docker.io<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-官方拉取\"><a href=\"#docker-官方拉取\" class=\"headerlink\" title=\"docker 官方拉取\"></a>docker 官方拉取</h2><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">docker pull nacos/nacos-<span class=\"hljs-keyword\">server</span>:latest<br></code></pre></td></tr></table></figure>\n<h3 id=\"创建本地的映射文件\"><a href=\"#创建本地的映射文件\" class=\"headerlink\" title=\"创建本地的映射文件\"></a>创建本地的映射文件</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">mkdir -p <span class=\"hljs-regexp\">/root/</span>nacos/logs<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"初始化-mysql-数据库\"><a href=\"#初始化-mysql-数据库\" class=\"headerlink\" title=\"初始化 mysql 数据库\"></a>初始化 mysql 数据库</h2><p>从以下链接获取sql脚本：<a href=\"https://github.com/alibaba/nacos/blob/develop/distribution/conf/nacos-mysql.sql\">https://github.com/alibaba/nacos/blob/develop/distribution/conf/nacos-mysql.sql</a></p>\n<h2 id=\"单机模式中-e-添加的参数不同与集群模式，集群模式见文章结尾。\"><a href=\"#单机模式中-e-添加的参数不同与集群模式，集群模式见文章结尾。\" class=\"headerlink\" title=\"单机模式中-e 添加的参数不同与集群模式，集群模式见文章结尾。\"></a>单机模式中-e 添加的参数不同与集群模式，集群模式见文章结尾。</h2><p>单机模式中&#x2F;home&#x2F;nacos&#x2F;conf&#x2F;application.properties 配置文件如下：</p>\n<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs roboconf\"><span class=\"hljs-comment\"># spring</span><br>server.servlet.contextPath=$&#123;<span class=\"hljs-attribute\">SERVER_SERVLET_CONTEXTPATH</span>:/nacos&#125;<br>server<span class=\"hljs-variable\">.contextPath</span>=/nacos<br>server<span class=\"hljs-variable\">.port</span>=$&#123;NACOS_SERVER_PORT:8848&#125;<br>spring<span class=\"hljs-variable\">.datasource</span><span class=\"hljs-variable\">.platform</span>=$&#123;SPRING_DATASOURCE_PLATFORM:&quot;&quot;&#125;<br>nacos<span class=\"hljs-variable\">.cmdb</span><span class=\"hljs-variable\">.dumpTaskInterval</span>=3600<br>nacos<span class=\"hljs-variable\">.cmdb</span><span class=\"hljs-variable\">.eventTaskInterval</span>=10<br>nacos<span class=\"hljs-variable\">.cmdb</span><span class=\"hljs-variable\">.labelTaskInterval</span>=300<br>nacos<span class=\"hljs-variable\">.cmdb</span><span class=\"hljs-variable\">.loadDataAtStart</span>=false<br>db<span class=\"hljs-variable\">.num</span>=$&#123;MYSQL_DATABASE_NUM:1&#125;<br>db<span class=\"hljs-variable\">.url</span>.0=jdbc:mysql://$&#123;MYSQL_SERVICE_HOST&#125;:$&#123;MYSQL_SERVICE_PORT:3306&#125;/$&#123;MYSQL_SERVICE_DB_NAME&#125;?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true<br>db<span class=\"hljs-variable\">.url</span>.1=jdbc:mysql://$&#123;MYSQL_SERVICE_HOST&#125;:$&#123;MYSQL_SERVICE_PORT:3306&#125;/$&#123;MYSQL_SERVICE_DB_NAME&#125;?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true<br>db<span class=\"hljs-variable\">.user</span>=$&#123;MYSQL_SERVICE_USER&#125;<br>db<span class=\"hljs-variable\">.password</span>=$&#123;MYSQL_SERVICE_PASSWORD&#125;<br>### The auth system to use, currently only &#x27;nacos&#x27; is supported:<br>nacos<span class=\"hljs-variable\">.core</span><span class=\"hljs-variable\">.auth</span><span class=\"hljs-variable\">.system</span><span class=\"hljs-variable\">.type</span>=$&#123;NACOS_AUTH_SYSTEM_TYPE:nacos&#125;<br><br><br>### The token expiration in seconds:<br>nacos<span class=\"hljs-variable\">.core</span><span class=\"hljs-variable\">.auth</span><span class=\"hljs-variable\">.default</span><span class=\"hljs-variable\">.token</span><span class=\"hljs-variable\">.expire</span><span class=\"hljs-variable\">.seconds</span>=$&#123;NACOS_AUTH_TOKEN_EXPIRE_SECONDS:18000&#125;<br><br>### The default token:<br>nacos<span class=\"hljs-variable\">.core</span><span class=\"hljs-variable\">.auth</span><span class=\"hljs-variable\">.default</span><span class=\"hljs-variable\">.token</span><span class=\"hljs-variable\">.secret</span><span class=\"hljs-variable\">.key</span>=$&#123;NACOS_AUTH_TOKEN:SecretKey012345678901234567890123456789012345678901234567890123456789&#125;<br><br>### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.<br>nacos<span class=\"hljs-variable\">.core</span><span class=\"hljs-variable\">.auth</span><span class=\"hljs-variable\">.caching</span><span class=\"hljs-variable\">.enabled</span>=$&#123;NACOS_AUTH_CACHE_ENABLE:false&#125;<br><br>server<span class=\"hljs-variable\">.tomcat</span><span class=\"hljs-variable\">.accesslog</span><span class=\"hljs-variable\">.enabled</span>=$&#123;TOMCAT_ACCESSLOG_ENABLED:false&#125;<br>server<span class=\"hljs-variable\">.tomcat</span><span class=\"hljs-variable\">.accesslog</span><span class=\"hljs-variable\">.pattern</span>=%h %l %u %t &quot;%r&quot; %s %b %D<br># default current work dir<br>server<span class=\"hljs-variable\">.tomcat</span><span class=\"hljs-variable\">.basedir</span>=<br>## spring security config<br>### turn off security<br>nacos<span class=\"hljs-variable\">.security</span><span class=\"hljs-variable\">.ignore</span><span class=\"hljs-variable\">.urls</span>=/,/error,/**/*<span class=\"hljs-variable\">.css</span>,/**/*<span class=\"hljs-variable\">.js</span>,/**/*<span class=\"hljs-variable\">.html</span>,/**/*<span class=\"hljs-variable\">.map</span>,/**/*<span class=\"hljs-variable\">.svg</span>,/**/*<span class=\"hljs-variable\">.png</span>,/**/*<span class=\"hljs-variable\">.ico</span>,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**<br># metrics for elastic search<br>management<span class=\"hljs-variable\">.metrics</span><span class=\"hljs-variable\">.export</span><span class=\"hljs-variable\">.elastic</span><span class=\"hljs-variable\">.enabled</span>=false<br>management<span class=\"hljs-variable\">.metrics</span><span class=\"hljs-variable\">.export</span><span class=\"hljs-variable\">.influx</span><span class=\"hljs-variable\">.enabled</span>=false<br><br>nacos<span class=\"hljs-variable\">.naming</span><span class=\"hljs-variable\">.distro</span><span class=\"hljs-variable\">.taskDispatchThreadCount</span>=10<br>nacos<span class=\"hljs-variable\">.naming</span><span class=\"hljs-variable\">.distro</span><span class=\"hljs-variable\">.taskDispatchPeriod</span>=200<br>nacos<span class=\"hljs-variable\">.naming</span><span class=\"hljs-variable\">.distro</span><span class=\"hljs-variable\">.batchSyncKeyCount</span>=1000<br>nacos<span class=\"hljs-variable\">.naming</span><span class=\"hljs-variable\">.distro</span><span class=\"hljs-variable\">.initDataRatio</span>=0.9<br>nacos<span class=\"hljs-variable\">.naming</span><span class=\"hljs-variable\">.distro</span><span class=\"hljs-variable\">.syncRetryDelay</span>=5000<br>nacos<span class=\"hljs-variable\">.naming</span><span class=\"hljs-variable\">.data</span><span class=\"hljs-variable\">.warmup</span>=true<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"创建nacos容器-单例模式\"><a href=\"#创建nacos容器-单例模式\" class=\"headerlink\" title=\"创建nacos容器(单例模式)\"></a>创建nacos容器(单例模式)</h2><p>这里以单点的模式为例,Docker启动需要暴露8848 9848 9849三个端口<br>为什么要开放三个端口？<br>可以发现官方文档中有这么一段话：Nacos2.x版本相比1.X新增了gRPC的通信方式，因此需要增加2个端口。新增端口是在配置的主端口(server.port)基础上，进行一定偏移量自动生成。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">docker <span class=\"hljs-built_in\">run</span> -d -p 8848:8848 -p 9848:9848 -p 9849:9849 \\<br>-e <span class=\"hljs-attribute\">MODE</span>=standalone \\<br>-e <span class=\"hljs-attribute\">PREFER_HOST_MODE</span>=hostname \\ <br>-e <span class=\"hljs-attribute\">SPRING_DATASOURCE_PLATFORM</span>=mysql \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_HOST</span>=127.0.0.1 \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_PORT</span>=3306 \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_DB_NAME</span>=nacos_config \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_USER</span>=root \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_PASSWORD</span>=123456 \\<br>-e <span class=\"hljs-attribute\">MYSQL_DATABASE_NUM</span>=1 \\<br>-v /root/nacos/logs:/home/nacos/logs \\<br>--restart always --name nacos nacos/nacos-server:latest<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">docker <span class=\"hljs-built_in\">run</span> -d -p 8848:8848 -p 9848:9848 -p 9849:9849 -e <span class=\"hljs-attribute\">MODE</span>=standalone -e <span class=\"hljs-attribute\">PREFER_HOST_MODE</span>=hostname -e <span class=\"hljs-attribute\">SPRING_DATASOURCE_PLATFORM</span>=mysql -e <span class=\"hljs-attribute\">MYSQL_SERVICE_HOST</span>=192.168.66.146 -e <span class=\"hljs-attribute\">MYSQL_SERVICE_PORT</span>=3306 -e <span class=\"hljs-attribute\">MYSQL_SERVICE_DB_NAME</span>=nacos_config -e <span class=\"hljs-attribute\">MYSQL_SERVICE_USER</span>=root -e <span class=\"hljs-attribute\">MYSQL_SERVICE_PASSWORD</span>=123456 -e <span class=\"hljs-attribute\">MYSQL_DATABASE_NUM</span>=1 -v /root/nacos/logs:/home/nacos/logs --name nacos nacos/nacos-server:latest<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">docker <span class=\"hljs-literal\">start</span> nacos<br></code></pre></td></tr></table></figure>\n<h3 id=\"访问http-localhost-8848-nacos-账号默认nacos、密码默认nacos\"><a href=\"#访问http-localhost-8848-nacos-账号默认nacos、密码默认nacos\" class=\"headerlink\" title=\"访问http://localhost:8848/nacos/ 账号默认nacos、密码默认nacos\"></a>访问<a href=\"http://localhost:8848/nacos/\">http://localhost:8848/nacos/</a> 账号默认nacos、密码默认nacos</h3><p>新建txt配置文件<br><img src=\"/img/docker-nacos/hello_nacos.png\" alt=\"hello nacos\"></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">Service registration服务注册示例<br><br>curl -X POST <span class=\"hljs-string\">&#x27;http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&amp;ip=20.18.7.10&amp;port=8080&#x27;</span><span class=\"hljs-built_in\"></span><br><span class=\"hljs-built_in\">Service </span>discovery服务发现示例<br><br>curl -X <span class=\"hljs-built_in\">GET</span> <span class=\"hljs-string\">&#x27;http://127.0.0.1:8848/nacos/v1/ns/instance/list?serviceName=nacos.naming.serviceName&#x27;</span><br>Publish config推送配置示例<br><br>curl -X POST <span class=\"hljs-string\">&quot;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test&amp;content=helloWorld&quot;</span><br><span class=\"hljs-built_in\">Get</span> config获取配置示例<br><br>curl -X <span class=\"hljs-built_in\">GET</span> <span class=\"hljs-string\">&quot;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"集群部署\"><a href=\"#集群部署\" class=\"headerlink\" title=\"集群部署\"></a>集群部署</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">docker <span class=\"hljs-built_in\">run</span> -d \\<br>--network myNetwork --ip 172.18.0.4 --name nacos-server-18848 \\<br>-e <span class=\"hljs-attribute\">MODE</span>=cluster \\<br>-e <span class=\"hljs-attribute\">SPRING_DATASOURCE_PLATFORM</span>=mysql \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_HOST</span>=172.18.0.3 \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_PORT</span>=3306 \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_USER</span>=root \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_PASSWORD</span>=123456 \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_DB_NAME</span>=nacos_config \\<br>-e <span class=\"hljs-attribute\">NACOS_SERVER_PORT</span>=8848 \\<br>-e <span class=\"hljs-attribute\">NACOS_SERVERS</span>=<span class=\"hljs-string\">&quot;172.18.0.4:8848 172.18.0.5:8848 172.18.0.6:8848&quot;</span> \\<br>-e <span class=\"hljs-attribute\">NACOS_SERVER_IP</span>=172.18.0.4 \\<br>-e <span class=\"hljs-attribute\">JVM_XMS</span>=256m -e <span class=\"hljs-attribute\">JVM_XMX</span>=512m  \\<br>-v /usr/local/nacos/logs/nacos-server-18848:/home/nacos/logs \\<br>-v /usr/local/nacos/conf:/home/nacos/conf \\<br>-p 18848:8848 \\<br>nacos/nacos-server<br></code></pre></td></tr></table></figure>","site":{"data":{}},"wordcount":4841,"excerpt":"","more":"<h2 id=\"docker-安装\"><a href=\"#docker-安装\" class=\"headerlink\" title=\"docker 安装\"></a>docker 安装</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cmake\">apt <span class=\"hljs-keyword\">install</span> docker.io<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"docker-官方拉取\"><a href=\"#docker-官方拉取\" class=\"headerlink\" title=\"docker 官方拉取\"></a>docker 官方拉取</h2><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs axapta\">docker pull nacos/nacos-<span class=\"hljs-keyword\">server</span>:latest<br></code></pre></td></tr></table></figure>\n<h3 id=\"创建本地的映射文件\"><a href=\"#创建本地的映射文件\" class=\"headerlink\" title=\"创建本地的映射文件\"></a>创建本地的映射文件</h3><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">mkdir -p <span class=\"hljs-regexp\">/root/</span>nacos/logs<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"初始化-mysql-数据库\"><a href=\"#初始化-mysql-数据库\" class=\"headerlink\" title=\"初始化 mysql 数据库\"></a>初始化 mysql 数据库</h2><p>从以下链接获取sql脚本：<a href=\"https://github.com/alibaba/nacos/blob/develop/distribution/conf/nacos-mysql.sql\">https://github.com/alibaba/nacos/blob/develop/distribution/conf/nacos-mysql.sql</a></p>\n<h2 id=\"单机模式中-e-添加的参数不同与集群模式，集群模式见文章结尾。\"><a href=\"#单机模式中-e-添加的参数不同与集群模式，集群模式见文章结尾。\" class=\"headerlink\" title=\"单机模式中-e 添加的参数不同与集群模式，集群模式见文章结尾。\"></a>单机模式中-e 添加的参数不同与集群模式，集群模式见文章结尾。</h2><p>单机模式中&#x2F;home&#x2F;nacos&#x2F;conf&#x2F;application.properties 配置文件如下：</p>\n<figure class=\"highlight roboconf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs roboconf\"><span class=\"hljs-comment\"># spring</span><br>server.servlet.contextPath=$&#123;<span class=\"hljs-attribute\">SERVER_SERVLET_CONTEXTPATH</span>:/nacos&#125;<br>server<span class=\"hljs-variable\">.contextPath</span>=/nacos<br>server<span class=\"hljs-variable\">.port</span>=$&#123;NACOS_SERVER_PORT:8848&#125;<br>spring<span class=\"hljs-variable\">.datasource</span><span class=\"hljs-variable\">.platform</span>=$&#123;SPRING_DATASOURCE_PLATFORM:&quot;&quot;&#125;<br>nacos<span class=\"hljs-variable\">.cmdb</span><span class=\"hljs-variable\">.dumpTaskInterval</span>=3600<br>nacos<span class=\"hljs-variable\">.cmdb</span><span class=\"hljs-variable\">.eventTaskInterval</span>=10<br>nacos<span class=\"hljs-variable\">.cmdb</span><span class=\"hljs-variable\">.labelTaskInterval</span>=300<br>nacos<span class=\"hljs-variable\">.cmdb</span><span class=\"hljs-variable\">.loadDataAtStart</span>=false<br>db<span class=\"hljs-variable\">.num</span>=$&#123;MYSQL_DATABASE_NUM:1&#125;<br>db<span class=\"hljs-variable\">.url</span>.0=jdbc:mysql://$&#123;MYSQL_SERVICE_HOST&#125;:$&#123;MYSQL_SERVICE_PORT:3306&#125;/$&#123;MYSQL_SERVICE_DB_NAME&#125;?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true<br>db<span class=\"hljs-variable\">.url</span>.1=jdbc:mysql://$&#123;MYSQL_SERVICE_HOST&#125;:$&#123;MYSQL_SERVICE_PORT:3306&#125;/$&#123;MYSQL_SERVICE_DB_NAME&#125;?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true<br>db<span class=\"hljs-variable\">.user</span>=$&#123;MYSQL_SERVICE_USER&#125;<br>db<span class=\"hljs-variable\">.password</span>=$&#123;MYSQL_SERVICE_PASSWORD&#125;<br>### The auth system to use, currently only &#x27;nacos&#x27; is supported:<br>nacos<span class=\"hljs-variable\">.core</span><span class=\"hljs-variable\">.auth</span><span class=\"hljs-variable\">.system</span><span class=\"hljs-variable\">.type</span>=$&#123;NACOS_AUTH_SYSTEM_TYPE:nacos&#125;<br><br><br>### The token expiration in seconds:<br>nacos<span class=\"hljs-variable\">.core</span><span class=\"hljs-variable\">.auth</span><span class=\"hljs-variable\">.default</span><span class=\"hljs-variable\">.token</span><span class=\"hljs-variable\">.expire</span><span class=\"hljs-variable\">.seconds</span>=$&#123;NACOS_AUTH_TOKEN_EXPIRE_SECONDS:18000&#125;<br><br>### The default token:<br>nacos<span class=\"hljs-variable\">.core</span><span class=\"hljs-variable\">.auth</span><span class=\"hljs-variable\">.default</span><span class=\"hljs-variable\">.token</span><span class=\"hljs-variable\">.secret</span><span class=\"hljs-variable\">.key</span>=$&#123;NACOS_AUTH_TOKEN:SecretKey012345678901234567890123456789012345678901234567890123456789&#125;<br><br>### Turn on/off caching of auth information. By turning on this switch, the update of auth information would have a 15 seconds delay.<br>nacos<span class=\"hljs-variable\">.core</span><span class=\"hljs-variable\">.auth</span><span class=\"hljs-variable\">.caching</span><span class=\"hljs-variable\">.enabled</span>=$&#123;NACOS_AUTH_CACHE_ENABLE:false&#125;<br><br>server<span class=\"hljs-variable\">.tomcat</span><span class=\"hljs-variable\">.accesslog</span><span class=\"hljs-variable\">.enabled</span>=$&#123;TOMCAT_ACCESSLOG_ENABLED:false&#125;<br>server<span class=\"hljs-variable\">.tomcat</span><span class=\"hljs-variable\">.accesslog</span><span class=\"hljs-variable\">.pattern</span>=%h %l %u %t &quot;%r&quot; %s %b %D<br># default current work dir<br>server<span class=\"hljs-variable\">.tomcat</span><span class=\"hljs-variable\">.basedir</span>=<br>## spring security config<br>### turn off security<br>nacos<span class=\"hljs-variable\">.security</span><span class=\"hljs-variable\">.ignore</span><span class=\"hljs-variable\">.urls</span>=/,/error,/**/*<span class=\"hljs-variable\">.css</span>,/**/*<span class=\"hljs-variable\">.js</span>,/**/*<span class=\"hljs-variable\">.html</span>,/**/*<span class=\"hljs-variable\">.map</span>,/**/*<span class=\"hljs-variable\">.svg</span>,/**/*<span class=\"hljs-variable\">.png</span>,/**/*<span class=\"hljs-variable\">.ico</span>,/console-fe/public/**,/v1/auth/**,/v1/console/health/**,/actuator/**,/v1/console/server/**<br># metrics for elastic search<br>management<span class=\"hljs-variable\">.metrics</span><span class=\"hljs-variable\">.export</span><span class=\"hljs-variable\">.elastic</span><span class=\"hljs-variable\">.enabled</span>=false<br>management<span class=\"hljs-variable\">.metrics</span><span class=\"hljs-variable\">.export</span><span class=\"hljs-variable\">.influx</span><span class=\"hljs-variable\">.enabled</span>=false<br><br>nacos<span class=\"hljs-variable\">.naming</span><span class=\"hljs-variable\">.distro</span><span class=\"hljs-variable\">.taskDispatchThreadCount</span>=10<br>nacos<span class=\"hljs-variable\">.naming</span><span class=\"hljs-variable\">.distro</span><span class=\"hljs-variable\">.taskDispatchPeriod</span>=200<br>nacos<span class=\"hljs-variable\">.naming</span><span class=\"hljs-variable\">.distro</span><span class=\"hljs-variable\">.batchSyncKeyCount</span>=1000<br>nacos<span class=\"hljs-variable\">.naming</span><span class=\"hljs-variable\">.distro</span><span class=\"hljs-variable\">.initDataRatio</span>=0.9<br>nacos<span class=\"hljs-variable\">.naming</span><span class=\"hljs-variable\">.distro</span><span class=\"hljs-variable\">.syncRetryDelay</span>=5000<br>nacos<span class=\"hljs-variable\">.naming</span><span class=\"hljs-variable\">.data</span><span class=\"hljs-variable\">.warmup</span>=true<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"创建nacos容器-单例模式\"><a href=\"#创建nacos容器-单例模式\" class=\"headerlink\" title=\"创建nacos容器(单例模式)\"></a>创建nacos容器(单例模式)</h2><p>这里以单点的模式为例,Docker启动需要暴露8848 9848 9849三个端口<br>为什么要开放三个端口？<br>可以发现官方文档中有这么一段话：Nacos2.x版本相比1.X新增了gRPC的通信方式，因此需要增加2个端口。新增端口是在配置的主端口(server.port)基础上，进行一定偏移量自动生成。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">docker <span class=\"hljs-built_in\">run</span> -d -p 8848:8848 -p 9848:9848 -p 9849:9849 \\<br>-e <span class=\"hljs-attribute\">MODE</span>=standalone \\<br>-e <span class=\"hljs-attribute\">PREFER_HOST_MODE</span>=hostname \\ <br>-e <span class=\"hljs-attribute\">SPRING_DATASOURCE_PLATFORM</span>=mysql \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_HOST</span>=127.0.0.1 \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_PORT</span>=3306 \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_DB_NAME</span>=nacos_config \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_USER</span>=root \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_PASSWORD</span>=123456 \\<br>-e <span class=\"hljs-attribute\">MYSQL_DATABASE_NUM</span>=1 \\<br>-v /root/nacos/logs:/home/nacos/logs \\<br>--restart always --name nacos nacos/nacos-server:latest<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">docker <span class=\"hljs-built_in\">run</span> -d -p 8848:8848 -p 9848:9848 -p 9849:9849 -e <span class=\"hljs-attribute\">MODE</span>=standalone -e <span class=\"hljs-attribute\">PREFER_HOST_MODE</span>=hostname -e <span class=\"hljs-attribute\">SPRING_DATASOURCE_PLATFORM</span>=mysql -e <span class=\"hljs-attribute\">MYSQL_SERVICE_HOST</span>=192.168.66.146 -e <span class=\"hljs-attribute\">MYSQL_SERVICE_PORT</span>=3306 -e <span class=\"hljs-attribute\">MYSQL_SERVICE_DB_NAME</span>=nacos_config -e <span class=\"hljs-attribute\">MYSQL_SERVICE_USER</span>=root -e <span class=\"hljs-attribute\">MYSQL_SERVICE_PASSWORD</span>=123456 -e <span class=\"hljs-attribute\">MYSQL_DATABASE_NUM</span>=1 -v /root/nacos/logs:/home/nacos/logs --name nacos nacos/nacos-server:latest<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h2><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">docker <span class=\"hljs-literal\">start</span> nacos<br></code></pre></td></tr></table></figure>\n<h3 id=\"访问http-localhost-8848-nacos-账号默认nacos、密码默认nacos\"><a href=\"#访问http-localhost-8848-nacos-账号默认nacos、密码默认nacos\" class=\"headerlink\" title=\"访问http://localhost:8848/nacos/ 账号默认nacos、密码默认nacos\"></a>访问<a href=\"http://localhost:8848/nacos/\">http://localhost:8848/nacos/</a> 账号默认nacos、密码默认nacos</h3><p>新建txt配置文件<br><img src=\"/img/docker-nacos/hello_nacos.png\" alt=\"hello nacos\"></p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">Service registration服务注册示例<br><br>curl -X POST <span class=\"hljs-string\">&#x27;http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&amp;ip=20.18.7.10&amp;port=8080&#x27;</span><span class=\"hljs-built_in\"></span><br><span class=\"hljs-built_in\">Service </span>discovery服务发现示例<br><br>curl -X <span class=\"hljs-built_in\">GET</span> <span class=\"hljs-string\">&#x27;http://127.0.0.1:8848/nacos/v1/ns/instance/list?serviceName=nacos.naming.serviceName&#x27;</span><br>Publish config推送配置示例<br><br>curl -X POST <span class=\"hljs-string\">&quot;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test&amp;content=helloWorld&quot;</span><br><span class=\"hljs-built_in\">Get</span> config获取配置示例<br><br>curl -X <span class=\"hljs-built_in\">GET</span> <span class=\"hljs-string\">&quot;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&amp;group=test&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"集群部署\"><a href=\"#集群部署\" class=\"headerlink\" title=\"集群部署\"></a>集群部署</h2><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">docker <span class=\"hljs-built_in\">run</span> -d \\<br>--network myNetwork --ip 172.18.0.4 --name nacos-server-18848 \\<br>-e <span class=\"hljs-attribute\">MODE</span>=cluster \\<br>-e <span class=\"hljs-attribute\">SPRING_DATASOURCE_PLATFORM</span>=mysql \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_HOST</span>=172.18.0.3 \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_PORT</span>=3306 \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_USER</span>=root \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_PASSWORD</span>=123456 \\<br>-e <span class=\"hljs-attribute\">MYSQL_SERVICE_DB_NAME</span>=nacos_config \\<br>-e <span class=\"hljs-attribute\">NACOS_SERVER_PORT</span>=8848 \\<br>-e <span class=\"hljs-attribute\">NACOS_SERVERS</span>=<span class=\"hljs-string\">&quot;172.18.0.4:8848 172.18.0.5:8848 172.18.0.6:8848&quot;</span> \\<br>-e <span class=\"hljs-attribute\">NACOS_SERVER_IP</span>=172.18.0.4 \\<br>-e <span class=\"hljs-attribute\">JVM_XMS</span>=256m -e <span class=\"hljs-attribute\">JVM_XMX</span>=512m  \\<br>-v /usr/local/nacos/logs/nacos-server-18848:/home/nacos/logs \\<br>-v /usr/local/nacos/conf:/home/nacos/conf \\<br>-p 18848:8848 \\<br>nacos/nacos-server<br></code></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cl8gzqdjb0000i3wuf82865hx","category_id":"cl7otp4ck0001mvwu939866sg","_id":"cl8gzqdjh0001i3wu4x0l2q3e"},{"post_id":"cl8gzqdk20002i3wue5i9gf0a","category_id":"cl7unt1jo00016bwu5pkidmxx","_id":"cl8gzqdkd0006i3wufvrz33al"},{"post_id":"cl8gzqdk90003i3wu8rpw41zr","category_id":"cl70imnkp00041qwu2usdbf3l","_id":"cl8gzqdke0008i3wu0k5tg9m3"},{"post_id":"cl8gzqdkb0004i3wu5fju3hnd","category_id":"cl70imnkx000c1qwu1pq77h2r","_id":"cl8gzqdkf000ai3wufe7tfnlf"},{"post_id":"cl8gzqdkc0005i3wugginby27","category_id":"cl70imnl0000h1qwu69qogghf","_id":"cl8gzqdki000ci3wu0yom6343"},{"post_id":"cl8gzqdkd0007i3wu7kjsf55k","category_id":"cl70imnl9000t1qwu6p3238tq","_id":"cl8gzqdkk000ei3wu0ftmbbfp"},{"post_id":"cl8gzqdke0009i3wuf50yb27l","category_id":"cl70imnl4000l1qwuh2qoflff","_id":"cl8gzqdkm000gi3wueis9hqrw"},{"post_id":"cl8gzqdkg000bi3wuawz835t4","category_id":"cl70imnl9000w1qwu8srn2536","_id":"cl8gzqdko000ii3wucmj97zfu"},{"post_id":"cl8gzqdkj000di3wud42oezxx","category_id":"cl70imnl4000l1qwuh2qoflff","_id":"cl8gzqdkq000ki3wud829emk2"},{"post_id":"cl8gzqdkl000fi3wu7tl1668t","category_id":"cl70imnkp00041qwu2usdbf3l","_id":"cl8gzqdks000mi3wu3j08hs03"},{"post_id":"cl8gzqdkn000hi3wu3iev8jan","category_id":"cl70imnkp00041qwu2usdbf3l","_id":"cl8gzqdkt000oi3wu155dbpik"},{"post_id":"cl8gzqdkp000ji3wu7ecv2rkk","category_id":"cl70imnkp00041qwu2usdbf3l","_id":"cl8gzqdkt000pi3wue4nd2311"},{"post_id":"cl8gzqdkr000li3wucmv59abx","category_id":"cl7unt1jo00016bwu5pkidmxx","_id":"cl8gzqdkt000qi3wudiu3ewdv"},{"post_id":"cl8gzqdks000ni3wu3shc3dav","category_id":"cl70imnkp00041qwu2usdbf3l","_id":"cl8gzqdkt000ri3wu835vbph6"},{"post_id":"cl8gzqdl2000si3wu3k4yeqfu","category_id":"cl70imnkp00041qwu2usdbf3l","_id":"cl8gzqdl5000vi3wubpushi1z"},{"post_id":"cl8gzqdl3000ti3wu01rwatow","category_id":"cl70imnl9000w1qwu8srn2536","_id":"cl8gzqdl5000wi3wu76eefhix"},{"post_id":"cl8gzqdl4000ui3wu3c601lvk","category_id":"cl70imnkp00041qwu2usdbf3l","_id":"cl8gzqdl5000xi3wu0ms2311v"}],"PostTag":[],"Tag":[]}}